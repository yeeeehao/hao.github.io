{"version":3,"file":"ee8b1517-e989e709a34af4b3e709.js","mappings":";0XAUA,MAAMA,EACFC,cACIC,KAAKC,SAAW,KAChBD,KAAKE,QAAU,IAAIC,IACnBH,KAAKI,UAAW,EAChBJ,KAAKK,eAAYC,CACrB,CACHC,QAAQC,EAAOC,EAAOC,EAAMC,GACrB,MAAMC,EAAYH,EAAMI,UAAUF,GAC5BG,EAAWL,EAAMM,SACvBH,EAAUI,SAASC,GAAKA,EAAG,CACnBT,QACAU,QAAST,EAAMS,QACfJ,WACAK,YAAaC,KAAKC,IAAIX,EAAOD,EAAMa,MAAOR,MAEtD,CACHS,WACWvB,KAAKC,WAGTD,KAAKI,UAAW,EAChBJ,KAAKC,SAAW,EAAAuB,EAAA,KAAsBC,QAAQ,KAC1CzB,KAAK0B,UACL1B,KAAKC,SAAW,KACZD,KAAKI,UACLJ,KAAKuB,UACT,IAER,CACHG,QAAQhB,EAAOiB,KAAKC,OACb,IAAIC,EAAY,EAChB7B,KAAKE,QAAQc,SAAQ,CAACP,EAAOD,KACzB,IAAKC,EAAMqB,UAAYrB,EAAMsB,MAAMC,OAC/B,OAEJ,MAAMD,EAAQtB,EAAMsB,MACpB,IAEIE,EAFAC,EAAIH,EAAMC,OAAS,EACnBG,GAAO,EAEX,KAAMD,GAAK,IAAKA,EACZD,EAAOF,EAAMG,GACTD,EAAKG,SACDH,EAAKI,OAAS5B,EAAMM,WACpBN,EAAMM,SAAWkB,EAAKI,QAE1BJ,EAAKK,KAAK5B,GACVyB,GAAO,IAEPJ,EAAMG,GAAKH,EAAMA,EAAMC,OAAS,GAChCD,EAAMQ,OAGVJ,IACA3B,EAAM2B,OACNnC,KAAKO,QAAQC,EAAOC,EAAOC,EAAM,aAEhCqB,EAAMC,SACPvB,EAAMqB,SAAU,EAChB9B,KAAKO,QAAQC,EAAOC,EAAOC,EAAM,YACjCD,EAAMS,SAAU,GAEpBW,GAAaE,EAAMC,MAAM,IAE7BhC,KAAKK,UAAYK,EACC,IAAdmB,IACA7B,KAAKI,UAAW,EAExB,CACHoC,UAAUhC,GACH,MAAMiC,EAASzC,KAAKE,QACpB,IAAIO,EAAQgC,EAAOC,IAAIlC,GAavB,OAZKC,IACDA,EAAQ,CACJqB,SAAS,EACTZ,SAAS,EACTa,MAAO,GACPlB,UAAW,CACP8B,SAAU,GACVC,SAAU,KAGlBH,EAAOI,IAAIrC,EAAOC,IAEfA,CACX,CACHqC,OAAOtC,EAAOuC,EAAOC,GACdhD,KAAKwC,UAAUhC,GAAOK,UAAUkC,GAAOE,KAAKD,EAChD,CACHE,IAAI1C,EAAOuB,GACCA,GAAUA,EAAMC,QAGrBhC,KAAKwC,UAAUhC,GAAOuB,MAAMkB,QAAQlB,EACxC,CACHoB,IAAI3C,GACG,OAAOR,KAAKwC,UAAUhC,GAAOuB,MAAMC,OAAS,CAChD,CACHV,MAAMd,GACC,MAAMC,EAAQT,KAAKE,QAAQwC,IAAIlC,GAC1BC,IAGLA,EAAMqB,SAAU,EAChBrB,EAAMa,MAAQK,KAAKC,MACnBnB,EAAMM,SAAWN,EAAMsB,MAAMqB,QAAO,CAACC,EAAKC,IAAMlC,KAAKmC,IAAIF,EAAKC,EAAIE,YAAY,GAC9ExD,KAAKuB,WACT,CACAO,QAAQtB,GACJ,IAAKR,KAAKI,SACN,OAAO,EAEX,MAAMK,EAAQT,KAAKE,QAAQwC,IAAIlC,GAC/B,SAAKC,GAAUA,EAAMqB,SAAYrB,EAAMsB,MAAMC,OAIjD,CACHyB,KAAKjD,GACE,MAAMC,EAAQT,KAAKE,QAAQwC,IAAIlC,GAC/B,IAAKC,IAAUA,EAAMsB,MAAMC,OACvB,OAEJ,MAAMD,EAAQtB,EAAMsB,MACpB,IAAIG,EAAIH,EAAMC,OAAS,EACvB,KAAME,GAAK,IAAKA,EACZH,EAAMG,GAAGwB,SAEbjD,EAAMsB,MAAQ,GACd/B,KAAKO,QAAQC,EAAOC,EAAOkB,KAAKC,MAAO,WAC3C,CACH+B,OAAOnD,GACA,OAAOR,KAAKE,QAAQ0D,OAAOpD,EAC/B,EAEJ,IAAIqD,EAA2B,IAAI/D,EAEnC,MAAMgE,EAAc,cACdC,EAAgB,CAClBC,QAASC,EAAMC,EAAIC,GACf,OAAOA,EAAS,GAAMD,EAAKD,CAC/B,EACHG,MAAOH,EAAMC,EAAIC,GACV,MAAME,GAAK,IAAAC,GAAML,GAAQH,GACnBS,EAAKF,EAAGG,QAAS,IAAAF,GAAMJ,GAAMJ,GACnC,OAAOS,GAAMA,EAAGC,MAAQD,EAAGE,IAAIJ,EAAIF,GAAQO,YAAcR,CAC7D,EACAS,OAAQV,EAAMC,EAAIC,GACd,OAAOF,GAAQC,EAAKD,GAAQE,CAChC,GAEJ,MAAMS,EACF7E,YAAY8E,EAAKC,EAAQC,EAAMb,GAC3B,MAAMc,EAAeF,EAAOC,GAC5Bb,GAAK,OAAQ,CACTW,EAAIX,GACJA,EACAc,EACAH,EAAIZ,OAER,MAAMA,GAAO,OAAQ,CACjBY,EAAIZ,KACJe,EACAd,IAEJlE,KAAKoC,SAAU,EACfpC,KAAKiF,IAAMJ,EAAI5D,IAAM8C,EAAcc,EAAIlE,aAAesD,GACtDjE,KAAKkF,QAAU,EAAAC,EAAQN,EAAIO,SAAW,EAAAD,EAAA,OACtCnF,KAAKqF,OAASjE,KAAKkE,MAAM3D,KAAKC,OAASiD,EAAIU,OAAS,IACpDvF,KAAKwD,UAAYxD,KAAKqC,OAASjB,KAAKkE,MAAMT,EAAI9D,UAC9Cf,KAAKwF,QAAUX,EAAIY,KACnBzF,KAAK0F,QAAUZ,EACf9E,KAAK2F,MAAQZ,EACb/E,KAAK4F,MAAQ3B,EACbjE,KAAK6F,IAAM3B,EACXlE,KAAK8F,eAAYxF,CACrB,CACAyF,SACI,OAAO/F,KAAKoC,OAChB,CACA4D,OAAOnB,EAAKX,EAAIxD,GACZ,GAAIV,KAAKoC,QAAS,CACdpC,KAAKO,SAAQ,GACb,MAAMyE,EAAehF,KAAK0F,QAAQ1F,KAAK2F,OACjCM,EAAUvF,EAAOV,KAAKqF,OACtBa,EAASlG,KAAKwD,UAAYyC,EAChCjG,KAAKqF,OAAS3E,EACdV,KAAKwD,UAAYpC,KAAKkE,MAAMlE,KAAKmC,IAAI2C,EAAQrB,EAAI9D,WACjDf,KAAKqC,QAAU4D,EACfjG,KAAKwF,QAAUX,EAAIY,KACnBzF,KAAK6F,KAAM,OAAQ,CACfhB,EAAIX,GACJA,EACAc,EACAH,EAAIZ,OAERjE,KAAK4F,OAAQ,OAAQ,CACjBf,EAAIZ,KACJe,EACAd,GAER,CACJ,CACAR,SACQ1D,KAAKoC,UACLpC,KAAKsC,KAAKX,KAAKC,OACf5B,KAAKoC,SAAU,EACfpC,KAAKO,SAAQ,GAErB,CACA+B,KAAK5B,GACD,MAAMuF,EAAUvF,EAAOV,KAAKqF,OACtBtE,EAAWf,KAAKwD,UAChBuB,EAAO/E,KAAK2F,MACZ1B,EAAOjE,KAAK4F,MACZH,EAAOzF,KAAKwF,MACZtB,EAAKlE,KAAK6F,IAChB,IAAI1B,EAEJ,GADAnE,KAAKoC,QAAU6B,IAASC,IAAOuB,GAAQQ,EAAUlF,IAC5Cf,KAAKoC,QAGN,OAFApC,KAAK0F,QAAQX,GAAQb,OACrBlE,KAAKO,SAAQ,GAGb0F,EAAU,EACVjG,KAAK0F,QAAQX,GAAQd,GAGzBE,EAAS8B,EAAUlF,EAAW,EAC9BoD,EAASsB,GAAQtB,EAAS,EAAI,EAAIA,EAASA,EAC3CA,EAASnE,KAAKkF,QAAQ9D,KAAKC,IAAI,EAAGD,KAAKmC,IAAI,EAAGY,KAC9CnE,KAAK0F,QAAQX,GAAQ/E,KAAKiF,IAAIhB,EAAMC,EAAIC,GAC5C,CACAgC,OACI,MAAMC,EAAWpG,KAAK8F,YAAc9F,KAAK8F,UAAY,IACrD,OAAO,IAAIO,SAAQ,CAACC,EAAKC,KACrBH,EAASnD,KAAK,CACVqD,MACAC,OACF,GAEV,CACAhG,QAAQiG,GACJ,MAAMC,EAASD,EAAW,MAAQ,MAC5BJ,EAAWpG,KAAK8F,WAAa,GACnC,IAAI,IAAI5D,EAAI,EAAGA,EAAIkE,EAASpE,OAAQE,IAChCkE,EAASlE,GAAGuE,IAEpB,EAGJ,MAAMC,EACF3G,YAAYS,EAAOmG,GACf3G,KAAK4G,OAASpG,EACdR,KAAK6G,YAAc,IAAI1G,IACvBH,KAAK8G,UAAUH,EACnB,CACAG,UAAUH,GACN,KAAK,IAAAzE,GAASyE,GACV,OAEJ,MAAMI,EAAmBC,OAAOC,KAAK,EAAAC,EAAA,WAC/BC,EAAgBnH,KAAK6G,YAC3BG,OAAOI,oBAAoBT,GAAQ3F,SAASqG,IACxC,MAAMxC,EAAM8B,EAAOU,GACnB,KAAK,IAAAnF,GAAS2C,GACV,OAEJ,MAAM2B,EAAW,CAAC,EAClB,IAAK,MAAMc,KAAUP,EACjBP,EAASc,GAAUzC,EAAIyC,KAE1B,OAAQzC,EAAI0C,aAAe1C,EAAI0C,YAAc,CAC1CF,IACDrG,SAAS+D,IACJA,IAASsC,GAAQF,EAAchE,IAAI4B,IACnCoC,EAActE,IAAIkC,EAAMyB,EAC5B,GACF,GAEV,CACHgB,gBAAgB1C,EAAQ2C,GACjB,MAAMC,EAAaD,EAAOE,QACpBA,EAwEd,SAA8B7C,EAAQ4C,GAClC,IAAKA,EACD,OAEJ,IAAIC,EAAU7C,EAAO6C,QACrB,IAAKA,EAED,YADA7C,EAAO6C,QAAUD,GAGjBC,EAAQC,UACR9C,EAAO6C,QAAUA,EAAUX,OAAOa,OAAO,CAAC,EAAGF,EAAS,CAClDC,SAAS,EACTE,YAAa,CAAC,KAGtB,OAAOH,CACX,CAxFwBI,CAAqBjD,EAAQ4C,GAC7C,IAAKC,EACD,MAAO,GAEX,MAAMK,EAAahI,KAAKiI,kBAAkBN,EAASD,GAOnD,OANIA,EAAWE,SAwDvB,SAAkBI,EAAYT,GAC1B,MAAMzF,EAAU,GACVmF,EAAOD,OAAOC,KAAKM,GACzB,IAAI,IAAIrF,EAAI,EAAGA,EAAI+E,EAAKjF,OAAQE,IAAI,CAChC,MAAMgG,EAAOF,EAAWf,EAAK/E,IACzBgG,GAAQA,EAAKnC,UACbjE,EAAQmB,KAAKiF,EAAK/B,OAE1B,CACA,OAAOE,QAAQ8B,IAAIrG,EACvB,CAjEYsG,CAAStD,EAAO6C,QAAQG,YAAaJ,GAAYW,MAAK,KAClDvD,EAAO6C,QAAUD,CAAU,IAC5B,SAGAM,CACX,CACHC,kBAAkBnD,EAAQ2C,GACnB,MAAMN,EAAgBnH,KAAK6G,YACrBmB,EAAa,GACblG,EAAUgD,EAAOgD,cAAgBhD,EAAOgD,YAAc,CAAC,GACvDQ,EAAQtB,OAAOC,KAAKQ,GACpB/G,EAAOiB,KAAKC,MAClB,IAAIM,EACJ,IAAIA,EAAIoG,EAAMtG,OAAS,EAAGE,GAAK,IAAKA,EAAE,CAClC,MAAM6C,EAAOuD,EAAMpG,GACnB,GAAuB,MAAnB6C,EAAKwD,OAAO,GACZ,SAEJ,GAAa,YAATxD,EAAoB,CACpBiD,EAAW/E,QAAQjD,KAAKwH,gBAAgB1C,EAAQ2C,IAChD,QACJ,CACA,MAAMe,EAAQf,EAAO1C,GACrB,IAAI0D,EAAY3G,EAAQiD,GACxB,MAAMF,EAAMsC,EAAczE,IAAIqC,GAC9B,GAAI0D,EAAW,CACX,GAAI5D,GAAO4D,EAAU1C,SAAU,CAC3B0C,EAAUzC,OAAOnB,EAAK2D,EAAO9H,GAC7B,QACJ,CACI+H,EAAU/E,QAElB,CACKmB,GAAQA,EAAI9D,UAIjBe,EAAQiD,GAAQ0D,EAAY,IAAI7D,EAAUC,EAAKC,EAAQC,EAAMyD,GAC7DR,EAAW/E,KAAKwF,IAJZ3D,EAAOC,GAAQyD,CAKvB,CACA,OAAOR,CACX,CACHhC,OAAOlB,EAAQ2C,GACR,GAA8B,IAA1BzH,KAAK6G,YAAY6B,KAEjB,YADA1B,OAAOa,OAAO/C,EAAQ2C,GAG1B,MAAMO,EAAahI,KAAKiI,kBAAkBnD,EAAQ2C,GAClD,OAAIO,EAAWhG,QACX6B,EAASX,IAAIlD,KAAK4G,OAAQoB,IACnB,QAFX,CAIJ,EA+BJ,SAASW,EAAUC,EAAOC,GACtB,MAAMC,EAAOF,GAASA,EAAMjB,SAAW,CAAC,EAClCoB,EAAUD,EAAKC,QACf1H,OAAmBf,IAAbwI,EAAKzH,IAAoBwH,EAAkB,EACjDtF,OAAmBjD,IAAbwI,EAAKvF,IAAoBsF,EAAkB,EACvD,MAAO,CACHvH,MAAOyH,EAAUxF,EAAMlC,EACvB2H,IAAKD,EAAU1H,EAAMkC,EAE7B,CAgCA,SAAS0F,EAAwBzI,EAAO0I,GACpC,MAAMjC,EAAO,GACPkC,EAAW3I,EAAM4I,uBAAuBF,GAC9C,IAAIhH,EAAGmH,EACP,IAAInH,EAAI,EAAGmH,EAAOF,EAASnH,OAAQE,EAAImH,IAAQnH,EAC3C+E,EAAKhE,KAAKkG,EAASjH,GAAGoH,OAE1B,OAAOrC,CACX,CACA,SAASsC,EAAWC,EAAOhB,EAAOiB,EAAS9B,EAAU,CAAC,GAClD,MAAMV,EAAOuC,EAAMvC,KACbyC,EAA8B,WAAjB/B,EAAQgC,KAC3B,IAAIzH,EAAGmH,EAAMO,EAAcC,EAC3B,GAAc,OAAVrB,EAAJ,CAGA,IAAItG,EAAI,EAAGmH,EAAOpC,EAAKjF,OAAQE,EAAImH,IAAQnH,EAAE,CAEzC,GADA0H,GAAgB3C,EAAK/E,GACjB0H,IAAiBH,EAAS,CAC1B,GAAI9B,EAAQQ,IACR,SAEJ,KACJ,CACA0B,EAAaL,EAAM/B,OAAOmC,IACtB,OAAeC,KAAgBH,GAAwB,IAAVlB,IAAe,IAAAsB,GAAKtB,MAAW,IAAAsB,GAAKD,MACjFrB,GAASqB,EAEjB,CACA,OAAOrB,CAdP,CAeJ,CAcA,SAASuB,EAAUnB,EAAOoB,GACtB,MAAMC,EAAUrB,GAASA,EAAMjB,QAAQsC,QACvC,OAAOA,QAAuB3J,IAAZ2J,QAAwC3J,IAAf0J,EAAKR,KACpD,CAWA,SAASU,EAAiBC,EAAQC,EAAUC,GACxC,MAAMC,EAAWH,EAAOC,KAAcD,EAAOC,GAAY,CAAC,GAC1D,OAAOE,EAASD,KAAgBC,EAASD,GAAc,CAAC,EAC5D,CACA,SAASE,EAAoBf,EAAOgB,EAAQC,EAAU9J,GAClD,IAAK,MAAMqJ,KAAQQ,EAAOE,wBAAwB/J,GAAMoI,UAAU,CAC9D,MAAMP,EAAQgB,EAAMQ,EAAKV,OACzB,GAAImB,GAAYjC,EAAQ,IAAMiC,GAAYjC,EAAQ,EAC9C,OAAOwB,EAAKV,KAEpB,CACA,OAAO,IACX,CACA,SAASqB,EAAaC,EAAYC,GAC9B,MAAM,MAAErK,EAAQsK,YAAad,GAAUY,EACjCT,EAAS3J,EAAMuK,UAAYvK,EAAMuK,QAAU,CAAC,IAC5C,OAAEC,EAAO,OAAER,EAASlB,MAAOM,GAAkBI,EAC7CiB,EAAQD,EAAOE,KACfC,EAAQX,EAAOU,KACf7D,EA7BV,SAAqB+D,EAAYC,EAAYrB,GACzC,MAAO,GAAGoB,EAAWE,MAAMD,EAAWC,MAAMtB,EAAKR,OAASQ,EAAKrJ,MACnE,CA2BgB4K,CAAYP,EAAQR,EAAQR,GAClCX,EAAOwB,EAAO7I,OACpB,IAAIwH,EACJ,IAAI,IAAItH,EAAI,EAAGA,EAAImH,IAAQnH,EAAE,CACzB,MAAMD,EAAO4I,EAAO3I,IACZ,CAAC+I,GAAQ3B,EAAQ,CAAC6B,GAAQ3C,GAAWvG,EAE7CuH,GADmBvH,EAAK8I,UAAY9I,EAAK8I,QAAU,CAAC,IACjCI,GAASjB,EAAiBC,EAAQ9C,EAAKiC,GAC1DE,EAAMI,GAAgBpB,EACtBgB,EAAMgC,KAAOjB,EAAoBf,EAAOgB,GAAQ,EAAMR,EAAKrJ,MAC3D6I,EAAMiC,QAAUlB,EAAoBf,EAAOgB,GAAQ,EAAOR,EAAKrJ,OAC1C6I,EAAMkC,gBAAkBlC,EAAMkC,cAAgB,CAAC,IACvD9B,GAAgBpB,CACjC,CACJ,CACA,SAASmD,EAAgBnL,EAAO0K,GAC5B,MAAMU,EAASpL,EAAMoL,OACrB,OAAO5E,OAAOC,KAAK2E,GAAQC,QAAQxE,GAAMuE,EAAOvE,GAAK6D,OAASA,IAAMY,OACxE,CAuBA,SAASC,EAAY/B,EAAMjI,GACvB,MAAM6H,EAAeI,EAAKY,WAAWtB,MAC/B4B,EAAOlB,EAAKQ,QAAUR,EAAKQ,OAAOU,KACxC,GAAKA,EAAL,CAGAnJ,EAAQA,GAASiI,EAAKgC,QACtB,IAAK,MAAMnB,KAAU9I,EAAM,CACvB,MAAMoI,EAASU,EAAOE,QACtB,IAAKZ,QAA2B7J,IAAjB6J,EAAOe,SAAsD5K,IAA/B6J,EAAOe,GAAMtB,GACtD,cAEGO,EAAOe,GAAMtB,QACetJ,IAA/B6J,EAAOe,GAAMQ,oBAA4EpL,IAA7C6J,EAAOe,GAAMQ,cAAc9B,WAChEO,EAAOe,GAAMQ,cAAc9B,EAE1C,CAXA,CAYJ,CACA,MAAMqC,EAAsBtC,GAAgB,UAATA,GAA6B,SAATA,EACjDuC,EAAmB,CAACC,EAAQC,IAASA,EAASD,EAASnF,OAAOa,OAAO,CAAC,EAAGsE,GAK/E,MAAME,EACLC,gBAAkB,CAAC,EACnBA,0BAA4B,KAC5BA,uBAAyB,KACzBvM,YAAYS,EAAOoJ,GACZ5J,KAAKQ,MAAQA,EACbR,KAAKuM,KAAO/L,EAAMgM,IAClBxM,KAAKsJ,MAAQM,EACb5J,KAAKyM,gBAAkB,CAAC,EACxBzM,KAAK8K,YAAc9K,KAAK0M,UACxB1M,KAAK2M,MAAQ3M,KAAK8K,YAAYnK,KAC9BX,KAAK2H,aAAUrH,EACdN,KAAK4M,UAAW,EACjB5M,KAAK6M,WAAQvM,EACbN,KAAK8M,iBAAcxM,EACnBN,KAAK+M,oBAAiBzM,EACtBN,KAAKgN,gBAAa1M,EAClBN,KAAKiN,gBAAa3M,EAClBN,KAAKkN,qBAAsB,EAC3BlN,KAAKmN,oBAAqB,EAC1BnN,KAAKoN,cAAW9M,EAChBN,KAAKqN,UAAY,GACjBrN,KAAKsN,8BAAgCA,mBACrCtN,KAAKuN,2BAA6BA,gBAClCvN,KAAKwN,YACT,CACAA,aACI,MAAMxD,EAAOhK,KAAK8K,YAClB9K,KAAK8G,YACL9G,KAAKyN,aACLzD,EAAK0D,SAAW3D,EAAUC,EAAKQ,OAAQR,GACvChK,KAAK2N,cACD3N,KAAK2H,QAAQiG,OAAS5N,KAAKQ,MAAMqN,gBAAgB,WACjDC,QAAQC,KAAK,qKAErB,CACAC,YAAYpE,GACJ5J,KAAKsJ,QAAUM,GACfmC,EAAY/L,KAAK8K,aAErB9K,KAAKsJ,MAAQM,CACjB,CACA6D,aACI,MAAMjN,EAAQR,KAAKQ,MACbwJ,EAAOhK,KAAK8K,YACZmD,EAAUjO,KAAKkO,aACfC,EAAW,CAACjD,EAAMkD,EAAGC,EAAG7M,IAAa,MAAT0J,EAAekD,EAAa,MAATlD,EAAe1J,EAAI6M,EAClEC,EAAMtE,EAAKuE,SAAU,IAAAC,GAAeP,EAAQM,QAAS5C,EAAgBnL,EAAO,MAC5EiO,EAAMzE,EAAK0E,SAAU,IAAAF,GAAeP,EAAQS,QAAS/C,EAAgBnL,EAAO,MAC5EmO,EAAM3E,EAAK4E,SAAU,IAAAJ,GAAeP,EAAQW,QAASjD,EAAgBnL,EAAO,MAC5EqO,EAAY7E,EAAK6E,UACjBC,EAAM9E,EAAK+E,QAAUZ,EAASU,EAAWP,EAAKG,EAAKE,GACnDK,EAAMhF,EAAKiF,QAAUd,EAASU,EAAWJ,EAAKH,EAAKK,GACzD3E,EAAKkF,OAASlP,KAAKmP,cAAcb,GACjCtE,EAAKoF,OAASpP,KAAKmP,cAAcV,GACjCzE,EAAKqF,OAASrP,KAAKmP,cAAcR,GACjC3E,EAAKgB,OAAShL,KAAKmP,cAAcL,GACjC9E,EAAKQ,OAASxK,KAAKmP,cAAcH,EACrC,CACAd,aACI,OAAOlO,KAAKQ,MAAM8O,KAAKC,SAASvP,KAAKsJ,MACzC,CACAoD,UACI,OAAO1M,KAAKQ,MAAMgP,eAAexP,KAAKsJ,MAC1C,CACH6F,cAAcM,GACP,OAAOzP,KAAKQ,MAAMoL,OAAO6D,EAC7B,CACHC,eAAe9G,GACR,MAAMoB,EAAOhK,KAAK8K,YAClB,OAAOlC,IAAUoB,EAAKgB,OAAShB,EAAKQ,OAASR,EAAKgB,MACtD,CACA2E,QACI3P,KAAK0B,QAAQ,QACjB,CACHkO,WACO,MAAM5F,EAAOhK,KAAK8K,YACd9K,KAAK6M,QACL,IAAAgD,GAAoB7P,KAAK6M,MAAO7M,MAEhCgK,EAAK0D,UACL3B,EAAY/B,EAEpB,CACH8F,aACO,MAAM7B,EAAUjO,KAAKkO,aACfoB,EAAOrB,EAAQqB,OAASrB,EAAQqB,KAAO,IACvCzC,EAAQ7M,KAAK6M,MACnB,IAAI,IAAA3K,GAASoN,GACTtP,KAAK6M,MAxMjB,SAAkCyC,GAC9B,MAAMrI,EAAOD,OAAOC,KAAKqI,GACnBS,EAAQ,IAAIC,MAAM/I,EAAKjF,QAC7B,IAAIE,EAAGmH,EAAMhC,EACb,IAAInF,EAAI,EAAGmH,EAAOpC,EAAKjF,OAAQE,EAAImH,IAAQnH,EACvCmF,EAAMJ,EAAK/E,GACX6N,EAAM7N,GAAK,CACPkM,EAAG/G,EACHgH,EAAGiB,EAAKjI,IAGhB,OAAO0I,CACX,CA4LyBE,CAAyBX,QACnC,GAAIzC,IAAUyC,EAAM,CACvB,GAAIzC,EAAO,EACP,IAAAgD,GAAoBhD,EAAO7M,MAC3B,MAAMgK,EAAOhK,KAAK8K,YAClBiB,EAAY/B,GACZA,EAAKgC,QAAU,EACnB,CACIsD,GAAQtI,OAAOkJ,aAAaZ,KAC5B,IAAAa,GAAkBb,EAAMtP,MAE5BA,KAAKqN,UAAY,GACjBrN,KAAK6M,MAAQyC,CACjB,CACJ,CACA3B,cACI,MAAM3D,EAAOhK,KAAK8K,YAClB9K,KAAK8P,aACD9P,KAAKsN,qBACLtD,EAAKiE,QAAU,IAAIjO,KAAKsN,mBAEhC,CACA8C,sBAAsBC,GAClB,MAAMrG,EAAOhK,KAAK8K,YACZmD,EAAUjO,KAAKkO,aACrB,IAAIoC,GAAe,EACnBtQ,KAAK8P,aACL,MAAMS,EAAavG,EAAK0D,SACxB1D,EAAK0D,SAAW3D,EAAUC,EAAKQ,OAAQR,GACnCA,EAAKR,QAAUyE,EAAQzE,QACvB8G,GAAe,EACfvE,EAAY/B,GACZA,EAAKR,MAAQyE,EAAQzE,OAEzBxJ,KAAKwQ,gBAAgBH,IACjBC,GAAgBC,IAAevG,EAAK0D,WACpC/C,EAAa3K,KAAMgK,EAAKgC,QAEhC,CACHlF,YACO,MAAMH,EAAS3G,KAAKQ,MAAMmG,OACpB8J,EAAY9J,EAAO+J,iBAAiB1Q,KAAK2M,OACzCgE,EAAShK,EAAOiK,gBAAgB5Q,KAAKkO,aAAcuC,GAAW,GACpEzQ,KAAK2H,QAAUhB,EAAOkK,eAAeF,EAAQ3Q,KAAK8Q,cAClD9Q,KAAK4M,SAAW5M,KAAK2H,QAAQoJ,QAC7B/Q,KAAKyM,gBAAkB,CAAC,CAC5B,CACHuE,MAAM1P,EAAO2P,GACN,MAAQnG,YAAad,EAAO6C,MAAOyC,GAAUtP,MACvC,OAAEgL,EAAO,SAAE0C,GAAc1D,EACzBiB,EAAQD,EAAOE,KACrB,IAEIhJ,EAAGoB,EAAKuH,EAFRqG,EAAmB,IAAV5P,GAAe2P,IAAU3B,EAAKtN,QAAgBgI,EAAKmH,QAC5DC,EAAO9P,EAAQ,GAAK0I,EAAKgC,QAAQ1K,EAAQ,GAE7C,IAAsB,IAAlBtB,KAAK4M,SACL5C,EAAKgC,QAAUsD,EACftF,EAAKmH,SAAU,EACftG,EAASyE,MACN,CAECzE,GADA,OAAQyE,EAAKhO,IACJtB,KAAKqR,eAAerH,EAAMsF,EAAMhO,EAAO2P,IACzC,IAAA/O,GAASoN,EAAKhO,IACZtB,KAAKsR,gBAAgBtH,EAAMsF,EAAMhO,EAAO2P,GAExCjR,KAAKuR,mBAAmBvH,EAAMsF,EAAMhO,EAAO2P,GAExD,MAAMO,EAA6B,IAAmB,OAAflO,EAAI2H,IAAmBmG,GAAQ9N,EAAI2H,GAASmG,EAAKnG,GACxF,IAAI/I,EAAI,EAAGA,EAAI+O,IAAS/O,EACpB8H,EAAKgC,QAAQ9J,EAAIZ,GAASgC,EAAMuH,EAAO3I,GACnCgP,IACIM,MACAN,GAAS,GAEbE,EAAO9N,GAGf0G,EAAKmH,QAAUD,CACnB,CACIxD,GACA/C,EAAa3K,KAAM6K,EAE3B,CACH0G,mBAAmBvH,EAAMsF,EAAMhO,EAAO2P,GAC/B,MAAM,OAAEjG,EAAO,OAAER,GAAYR,EACvBiB,EAAQD,EAAOE,KACfC,EAAQX,EAAOU,KACfuG,EAASzG,EAAO0G,YAChBC,EAAc3G,IAAWR,EACzBK,EAAS,IAAImF,MAAMiB,GACzB,IAAI/O,EAAGmH,EAAMC,EACb,IAAIpH,EAAI,EAAGmH,EAAO4H,EAAO/O,EAAImH,IAAQnH,EACjCoH,EAAQpH,EAAIZ,EACZuJ,EAAO3I,GAAK,CACR,CAAC+I,GAAQ0G,GAAe3G,EAAOgG,MAAMS,EAAOnI,GAAQA,GACpD,CAAC6B,GAAQX,EAAOwG,MAAM1B,EAAKhG,GAAQA,IAG3C,OAAOuB,CACX,CACHwG,eAAerH,EAAMsF,EAAMhO,EAAO2P,GAC3B,MAAM,OAAE/B,EAAO,OAAEE,GAAYpF,EACvBa,EAAS,IAAImF,MAAMiB,GACzB,IAAI/O,EAAGmH,EAAMC,EAAOrH,EACpB,IAAIC,EAAI,EAAGmH,EAAO4H,EAAO/O,EAAImH,IAAQnH,EACjCoH,EAAQpH,EAAIZ,EACZW,EAAOqN,EAAKhG,GACZuB,EAAO3I,GAAK,CACRkM,EAAGc,EAAO8B,MAAM/O,EAAK,GAAIqH,GACzB+E,EAAGe,EAAO4B,MAAM/O,EAAK,GAAIqH,IAGjC,OAAOuB,CACX,CACHyG,gBAAgBtH,EAAMsF,EAAMhO,EAAO2P,GAC5B,MAAM,OAAE/B,EAAO,OAAEE,GAAYpF,GACvB,SAAE4H,EAAU,IAAI,SAAEC,EAAU,KAAS7R,KAAK4M,SAC1C/B,EAAS,IAAImF,MAAMiB,GACzB,IAAI/O,EAAGmH,EAAMC,EAAOrH,EACpB,IAAIC,EAAI,EAAGmH,EAAO4H,EAAO/O,EAAImH,IAAQnH,EACjCoH,EAAQpH,EAAIZ,EACZW,EAAOqN,EAAKhG,GACZuB,EAAO3I,GAAK,CACRkM,EAAGc,EAAO8B,OAAM,OAAiB/O,EAAM2P,GAAWtI,GAClD+E,EAAGe,EAAO4B,OAAM,OAAiB/O,EAAM4P,GAAWvI,IAG1D,OAAOuB,CACX,CACHiH,UAAUxI,GACH,OAAOtJ,KAAK8K,YAAYkB,QAAQ1C,EACpC,CACHyI,eAAezI,GACR,OAAOtJ,KAAK8K,YAAYwE,KAAKhG,EACjC,CACHC,WAAWX,EAAOiC,EAAQlB,GACnB,MAAMnJ,EAAQR,KAAKQ,MACbwJ,EAAOhK,KAAK8K,YACZtC,EAAQqC,EAAOjC,EAAMsC,MAK3B,OAAO3B,EAJO,CACVtC,KAAMgC,EAAwBzI,GAAO,GACrCiH,OAAQoD,EAAOE,QAAQnC,EAAMsC,MAAMQ,eAEdlD,EAAOwB,EAAKV,MAAO,CACxCK,QAER,CACHqI,sBAAsBC,EAAOrJ,EAAOiC,EAAQrB,GACrC,MAAM0I,EAAcrH,EAAOjC,EAAMsC,MACjC,IAAI1C,EAAwB,OAAhB0J,EAAuBC,IAAMD,EACzC,MAAMzK,EAAS+B,GAASqB,EAAOE,QAAQnC,EAAMsC,MACzC1B,GAAS/B,IACT+B,EAAM/B,OAASA,EACfe,EAAQe,EAAWC,EAAO0I,EAAalS,KAAK8K,YAAYxB,QAE5D2I,EAAM5Q,IAAMD,KAAKC,IAAI4Q,EAAM5Q,IAAKmH,GAChCyJ,EAAM1O,IAAMnC,KAAKmC,IAAI0O,EAAM1O,IAAKiF,EACpC,CACH4J,UAAUxJ,EAAOyJ,GACV,MAAMrI,EAAOhK,KAAK8K,YACZkB,EAAUhC,EAAKgC,QACfkF,EAASlH,EAAKmH,SAAWvI,IAAUoB,EAAKgB,OACxC3B,EAAO2C,EAAQhK,OACfsQ,EAAatS,KAAK0P,eAAe9G,GACjCY,EAhQM,EAAC6I,EAAUrI,EAAMxJ,IAAQ6R,IAAarI,EAAKuI,QAAUvI,EAAK0D,UAAY,CAClFzG,KAAMgC,EAAwBzI,GAAO,GACrCiH,OAAQ,MA8PM+K,CAAYH,EAAUrI,EAAMhK,KAAKQ,OACzCyR,EAAQ,CACV5Q,IAAKoR,OAAOC,kBACZnP,IAAKkP,OAAOE,oBAERtR,IAAKuR,EAAWrP,IAAKsP,GA5VrC,SAAuBjK,GACnB,MAAM,IAAEvH,EAAI,IAAEkC,EAAI,WAAEuP,EAAW,WAAEC,GAAgBnK,EAAMoK,gBACvD,MAAO,CACH3R,IAAKyR,EAAazR,EAAMoR,OAAOE,kBAC/BpP,IAAKwP,EAAaxP,EAAMkP,OAAOC,kBAEvC,CAsVmDM,CAAcV,GACzD,IAAIpQ,EAAG2I,EACP,SAASoI,IACLpI,EAASmB,EAAQ9J,GACjB,MAAM2H,EAAagB,EAAOyH,EAAWpH,MACrC,QAAQ,OAAeL,EAAOjC,EAAMsC,QAAU0H,EAAW/I,GAAcgJ,EAAWhJ,CACtF,CACA,IAAI3H,EAAI,EAAGA,EAAImH,IACP4J,MAGJjT,KAAKgS,sBAAsBC,EAAOrJ,EAAOiC,EAAQrB,IAC7C0H,MALehP,GASvB,GAAIgP,EACA,IAAIhP,EAAImH,EAAO,EAAGnH,GAAK,IAAKA,EACxB,IAAI+Q,IAAJ,CAGAjT,KAAKgS,sBAAsBC,EAAOrJ,EAAOiC,EAAQrB,GACjD,KAFA,CAKR,OAAOyI,CACX,CACAiB,mBAAmBtK,GACf,MAAMiC,EAAS7K,KAAK8K,YAAYkB,QAC1BvE,EAAS,GACf,IAAIvF,EAAGmH,EAAMb,EACb,IAAItG,EAAI,EAAGmH,EAAOwB,EAAO7I,OAAQE,EAAImH,IAAQnH,EACzCsG,EAAQqC,EAAO3I,GAAG0G,EAAMsC,OACpB,OAAe1C,IACff,EAAOxE,KAAKuF,GAGpB,OAAOf,CACX,CACH0L,iBACO,OAAO,CACX,CACHC,iBAAiB9J,GACV,MAAMU,EAAOhK,KAAK8K,YACZE,EAAShB,EAAKgB,OACdR,EAASR,EAAKQ,OACdK,EAAS7K,KAAK8R,UAAUxI,GAC9B,MAAO,CACH+J,MAAOrI,EAAS,GAAKA,EAAOsI,iBAAiBzI,EAAOG,EAAOE,OAAS,GACpE1C,MAAOgC,EAAS,GAAKA,EAAO8I,iBAAiBzI,EAAOL,EAAOU,OAAS,GAE5E,CACHxJ,QAAQiI,GACD,MAAMK,EAAOhK,KAAK8K,YAClB9K,KAAKgG,OAAO2D,GAAQ,WACpBK,EAAKuJ,MAxdb,SAAgB/K,GACZ,IAAIgL,EAAGhS,EAAGiS,EAAGtD,EASb,OARI,IAAAjO,GAASsG,IACTgL,EAAIhL,EAAMkL,IACVlS,EAAIgH,EAAMmL,MACVF,EAAIjL,EAAMoL,OACVzD,EAAI3H,EAAMqL,MAEVL,EAAIhS,EAAIiS,EAAItD,EAAI3H,EAEb,CACHkL,IAAKF,EACLG,MAAOnS,EACPoS,OAAQH,EACRI,KAAM1D,EACN2D,UAAoB,IAAVtL,EAElB,CAucqBuL,EAAO,IAAAvF,GAAexO,KAAK2H,QAAQqM,KArexD,SAAqB9E,EAAQE,EAAQvG,GACjC,IAAwB,IAApBA,EACA,OAAO,EAEX,MAAMuF,EAAIzF,EAAUuG,EAAQrG,GACtBwF,EAAI1F,EAAUyG,EAAQvG,GAC5B,MAAO,CACH6K,IAAKrF,EAAErF,IACP2K,MAAOvF,EAAEpF,IACT4K,OAAQvF,EAAE/M,MACVuS,KAAMzF,EAAE9M,MAEhB,CAyd8D2S,CAAYjK,EAAKkF,OAAQlF,EAAKoF,OAAQpP,KAAKmT,mBACrG,CACHnN,OAAO2D,GAAO,CACXxH,OACI,MAAMqK,EAAMxM,KAAKuM,KACX/L,EAAQR,KAAKQ,MACbwJ,EAAOhK,KAAK8K,YACZoJ,EAAWlK,EAAKsF,MAAQ,GACxB6E,EAAO3T,EAAM4T,UACbrO,EAAS,GACTzE,EAAQtB,KAAKgN,YAAc,EAC3BiE,EAAQjR,KAAKiN,YAAciH,EAASlS,OAASV,EAC7C+S,EAA0BrU,KAAK2H,QAAQ0M,wBAC7C,IAAInS,EAIJ,IAHI8H,EAAKiE,SACLjE,EAAKiE,QAAQ9L,KAAKqK,EAAK2H,EAAM7S,EAAO2P,GAEpC/O,EAAIZ,EAAOY,EAAIZ,EAAQ2P,IAAS/O,EAAE,CAClC,MAAMoS,EAAUJ,EAAShS,GACrBoS,EAAQ/B,SAGR+B,EAAQvO,QAAUsO,EAClBtO,EAAO9C,KAAKqR,GAEZA,EAAQnS,KAAKqK,EAAK2H,GAE1B,CACA,IAAIjS,EAAI,EAAGA,EAAI6D,EAAO/D,SAAUE,EAC5B6D,EAAO7D,GAAGC,KAAKqK,EAAK2H,EAE5B,CACHI,SAASjL,EAAOvD,GACT,MAAM4D,EAAO5D,EAAS,SAAW,UACjC,YAAiBzF,IAAVgJ,GAAuBtJ,KAAK8K,YAAYmD,QAAUjO,KAAKwU,6BAA6B7K,GAAQ3J,KAAKyU,0BAA0BnL,GAAS,EAAGK,EAClJ,CACHmH,WAAWxH,EAAOvD,EAAQ4D,GACnB,MAAMsE,EAAUjO,KAAKkO,aACrB,IAAIwG,EACJ,GAAIpL,GAAS,GAAKA,EAAQtJ,KAAK8K,YAAYwE,KAAKtN,OAAQ,CACpD,MAAMsS,EAAUtU,KAAK8K,YAAYwE,KAAKhG,GACtCoL,EAAUJ,EAAQlH,WAAakH,EAAQlH,SArYnD,SAA2BuH,EAAQrL,EAAOgL,GACtC,OAAO,OAAcK,EAAQ,CACzB5O,QAAQ,EACR6O,UAAWtL,EACXuB,YAAQvK,EACRuU,SAAKvU,EACLgU,UACAhL,QACAK,KAAM,UACNhJ,KAAM,QAEd,CA0X8DmU,CAAkB9U,KAAK8Q,aAAcxH,EAAOgL,IAC9FI,EAAQ7J,OAAS7K,KAAK8R,UAAUxI,GAChCoL,EAAQG,IAAM5G,EAAQqB,KAAKhG,GAC3BoL,EAAQpL,MAAQoL,EAAQE,UAAYtL,CACxC,MACIoL,EAAU1U,KAAKoN,WAAapN,KAAKoN,SApZ7C,SAA8BuH,EAAQrL,GAClC,OAAO,OAAcqL,EAAQ,CACzB5O,QAAQ,EACRkI,aAAS3N,EACTsJ,aAAcN,EACdA,QACAK,KAAM,UACNhJ,KAAM,WAEd,CA2YwDoU,CAAqB/U,KAAKQ,MAAMsQ,aAAc9Q,KAAKsJ,QAC/FoL,EAAQzG,QAAUA,EAClByG,EAAQpL,MAAQoL,EAAQ9K,aAAe5J,KAAKsJ,MAIhD,OAFAoL,EAAQ3O,SAAWA,EACnB2O,EAAQ/K,KAAOA,EACR+K,CACX,CACHF,6BAA6B7K,GACtB,OAAO3J,KAAKgV,uBAAuBhV,KAAKsN,mBAAmBhC,GAAI3B,EACnE,CACH8K,0BAA0BnL,EAAOK,GAC1B,OAAO3J,KAAKgV,uBAAuBhV,KAAKuN,gBAAgBjC,GAAI3B,EAAML,EACtE,CACH0L,uBAAuBC,EAAatL,EAAO,UAAWL,GAC/C,MAAMvD,EAAkB,WAAT4D,EACTuL,EAAQlV,KAAKyM,gBACb0I,EAAWF,EAAc,IAAMtL,EAC/BwC,EAAS+I,EAAMC,GACfC,EAAUpV,KAAKkN,sBAAuB,OAAQ5D,GACpD,GAAI6C,EACA,OAAOD,EAAiBC,EAAQiJ,GAEpC,MAAMzO,EAAS3G,KAAKQ,MAAMmG,OACpB8J,EAAY9J,EAAO0O,wBAAwBrV,KAAK2M,MAAOsI,GACvDK,EAAWvP,EAAS,CACtB,GAAGkP,SACH,QACAA,EACA,IACA,CACAA,EACA,IAEEtE,EAAShK,EAAOiK,gBAAgB5Q,KAAKkO,aAAcuC,GACnD8E,EAAQvO,OAAOC,KAAK,EAAAC,EAAA,SAAkB+N,IAEtCxN,EAASd,EAAO6O,oBAAoB7E,EAAQ4E,GADlC,IAAIvV,KAAK8Q,WAAWxH,EAAOvD,EAAQ4D,IACe2L,GAKlE,OAJI7N,EAAOG,UACPH,EAAOG,QAAUwN,EACjBF,EAAMC,GAAYnO,OAAOyO,OAAOvJ,EAAiBzE,EAAQ2N,KAEtD3N,CACX,CACHiO,mBAAmBpM,EAAOqM,EAAY5P,GAC/B,MAAMvF,EAAQR,KAAKQ,MACb0U,EAAQlV,KAAKyM,gBACb0I,EAAW,aAAaQ,IACxBxJ,EAAS+I,EAAMC,GACrB,GAAIhJ,EACA,OAAOA,EAEX,IAAIxE,EACJ,IAAgC,IAA5BnH,EAAMmH,QAAQc,UAAqB,CACnC,MAAM9B,EAAS3G,KAAKQ,MAAMmG,OACpB8J,EAAY9J,EAAOiP,0BAA0B5V,KAAK2M,MAAOgJ,GACzDhF,EAAShK,EAAOiK,gBAAgB5Q,KAAKkO,aAAcuC,GACzD9I,EAAUhB,EAAOkK,eAAeF,EAAQ3Q,KAAK8Q,WAAWxH,EAAOvD,EAAQ4P,GAC3E,CACA,MAAM3N,EAAa,IAAItB,EAAWlG,EAAOmH,GAAWA,EAAQK,YAI5D,OAHIL,GAAWA,EAAQkO,aACnBX,EAAMC,GAAYnO,OAAOyO,OAAOzN,IAE7BA,CACX,CACH8N,iBAAiBnO,GACV,GAAKA,EAAQC,QAGb,OAAO5H,KAAK+M,iBAAmB/M,KAAK+M,eAAiB/F,OAAOa,OAAO,CAAC,EAAGF,GAC3E,CACHoO,eAAepM,EAAMqM,GACd,OAAQA,GAAiB/J,EAAmBtC,IAAS3J,KAAKQ,MAAMyV,mBACpE,CACHC,kBAAkB5U,EAAOqI,GAClB,MAAMwM,EAAYnW,KAAKyU,0BAA0BnT,EAAOqI,GAClDyM,EAA0BpW,KAAK+M,eAC/BiJ,EAAgBhW,KAAK8V,iBAAiBK,GACtCJ,EAAiB/V,KAAK+V,eAAepM,EAAMqM,IAAkBA,IAAkBI,EAErF,OADApW,KAAKqW,oBAAoBL,EAAerM,EAAMwM,GACvC,CACHH,gBACAD,iBAER,CACHO,cAAchC,EAAShL,EAAO/B,EAAYoC,GAC/BsC,EAAmBtC,GACnB3C,OAAOa,OAAOyM,EAAS/M,GAEvBvH,KAAK0V,mBAAmBpM,EAAOK,GAAM3D,OAAOsO,EAAS/M,EAE7D,CACH8O,oBAAoBL,EAAerM,EAAMjC,GAC9BsO,IAAkB/J,EAAmBtC,IACrC3J,KAAK0V,wBAAmBpV,EAAWqJ,GAAM3D,OAAOgQ,EAAetO,EAEvE,CACH6O,UAAUjC,EAAShL,EAAOK,EAAM5D,GACzBuO,EAAQvO,OAASA,EACjB,MAAM4B,EAAU3H,KAAKuU,SAASjL,EAAOvD,GACrC/F,KAAK0V,mBAAmBpM,EAAOK,EAAM5D,GAAQC,OAAOsO,EAAS,CACzD3M,SAAU5B,GAAU/F,KAAK8V,iBAAiBnO,IAAYA,GAE9D,CACA6O,iBAAiBlC,EAAS1K,EAAcN,GACpCtJ,KAAKuW,UAAUjC,EAAShL,EAAO,UAAU,EAC7C,CACAmN,cAAcnC,EAAS1K,EAAcN,GACjCtJ,KAAKuW,UAAUjC,EAAShL,EAAO,UAAU,EAC7C,CACHoN,2BACO,MAAMpC,EAAUtU,KAAK8K,YAAYmD,QAC7BqG,GACAtU,KAAKuW,UAAUjC,OAAShU,EAAW,UAAU,EAErD,CACHqW,wBACO,MAAMrC,EAAUtU,KAAK8K,YAAYmD,QAC7BqG,GACAtU,KAAKuW,UAAUjC,OAAShU,EAAW,UAAU,EAErD,CACHkQ,gBAAgBH,GACT,MAAMf,EAAOtP,KAAK6M,MACZqH,EAAWlU,KAAK8K,YAAYwE,KAClC,IAAK,MAAO7I,EAAQmQ,EAAMC,KAAS7W,KAAKqN,UACpCrN,KAAKyG,GAAQmQ,EAAMC,GAEvB7W,KAAKqN,UAAY,GACjB,MAAMyJ,EAAU5C,EAASlS,OACnB+U,EAAUzH,EAAKtN,OACfiP,EAAQ7P,KAAKC,IAAI0V,EAASD,GAC5B7F,GACAjR,KAAKgR,MAAM,EAAGC,GAEd8F,EAAUD,EACV9W,KAAKgX,gBAAgBF,EAASC,EAAUD,EAASzG,GAC1C0G,EAAUD,GACjB9W,KAAKiX,gBAAgBF,EAASD,EAAUC,EAEhD,CACHC,gBAAgB1V,EAAO2P,EAAOZ,GAAmB,GAC1C,MAAMrG,EAAOhK,KAAK8K,YACZwE,EAAOtF,EAAKsF,KACZtG,EAAM1H,EAAQ2P,EACpB,IAAI/O,EACJ,MAAMgV,EAAQC,IAEV,IADAA,EAAInV,QAAUiP,EACV/O,EAAIiV,EAAInV,OAAS,EAAGE,GAAK8G,EAAK9G,IAC9BiV,EAAIjV,GAAKiV,EAAIjV,EAAI+O,EACrB,EAGJ,IADAiG,EAAK5H,GACDpN,EAAIZ,EAAOY,EAAI8G,IAAO9G,EACtBoN,EAAKpN,GAAK,IAAIlC,KAAKuN,gBAEnBvN,KAAK4M,UACLsK,EAAKlN,EAAKgC,SAEdhM,KAAKgR,MAAM1P,EAAO2P,GACdZ,GACArQ,KAAKoX,eAAe9H,EAAMhO,EAAO2P,EAAO,QAEhD,CACAmG,eAAe9C,EAAShT,EAAO2P,EAAOtH,GAAO,CAChDsN,gBAAgB3V,EAAO2P,GAChB,MAAMjH,EAAOhK,KAAK8K,YAClB,GAAI9K,KAAK4M,SAAU,CACf,MAAMyK,EAAUrN,EAAKgC,QAAQsL,OAAOhW,EAAO2P,GACvCjH,EAAK0D,UACL3B,EAAY/B,EAAMqN,EAE1B,CACArN,EAAKsF,KAAKgI,OAAOhW,EAAO2P,EAC5B,CACHsG,MAAMC,GACC,GAAIxX,KAAK4M,SACL5M,KAAKqN,UAAUpK,KAAKuU,OACjB,CACH,MAAO/Q,EAAQmQ,EAAMC,GAAQW,EAC7BxX,KAAKyG,GAAQmQ,EAAMC,EACvB,CACA7W,KAAKQ,MAAMiX,aAAaxU,KAAK,CACzBjD,KAAKsJ,SACFkO,GAEX,CACAE,cACI,MAAMzG,EAAQ0G,UAAU3V,OACxBhC,KAAKuX,MAAM,CACP,kBACAvX,KAAKkO,aAAaoB,KAAKtN,OAASiP,EAChCA,GAER,CACA2G,aACI5X,KAAKuX,MAAM,CACP,kBACAvX,KAAK8K,YAAYwE,KAAKtN,OAAS,EAC/B,GAER,CACA6V,eACI7X,KAAKuX,MAAM,CACP,kBACA,EACA,GAER,CACAO,cAAcxW,EAAO2P,GACbA,GACAjR,KAAKuX,MAAM,CACP,kBACAjW,EACA2P,IAGR,MAAM8G,EAAWJ,UAAU3V,OAAS,EAChC+V,GACA/X,KAAKuX,MAAM,CACP,kBACAjW,EACAyW,GAGZ,CACAC,iBACIhY,KAAKuX,MAAM,CACP,kBACA,EACAI,UAAU3V,QAElB,EA83BJ,MAAMiW,UAAuB5L,EACzBC,UAAY,OACfA,gBAAkB,CACXgB,mBAAoB,OACpBC,gBAAiB,QACjB2K,UAAU,EACVC,UAAU,GAEjB7L,iBAAmB,CACZV,OAAQ,CACJwM,QAAS,CACLzX,KAAM,YAEV0X,QAAS,CACL1X,KAAM,YAIlB6M,aACIxN,KAAKkN,qBAAsB,EAC3BlN,KAAKmN,oBAAqB,EAC1BmL,MAAM9K,YACV,CACAxH,OAAO2D,GACH,MAAMK,EAAOhK,KAAK8K,aACVmD,QAASsK,EAAOjJ,KAAMkJ,EAAS,GAAG,SAAEC,GAAczO,EACpD0O,EAAqB1Y,KAAKQ,MAAMyV,oBACtC,IAAI,MAAE3U,EAAM,MAAE2P,IAAW,OAAiCjH,EAAMwO,EAAQE,GACxE1Y,KAAKgN,WAAa1L,EAClBtB,KAAKiN,WAAagE,GACd,OAAoBjH,KACpB1I,EAAQ,EACR2P,EAAQuH,EAAOxW,QAEnBuW,EAAK3R,OAAS5G,KAAKQ,MACnB+X,EAAKI,cAAgB3Y,KAAKsJ,MAC1BiP,EAAKK,aAAeH,EAASG,WAC7BL,EAAKC,OAASA,EACd,MAAM7Q,EAAU3H,KAAKwU,6BAA6B7K,GAC7C3J,KAAK2H,QAAQuQ,WACdvQ,EAAQkR,YAAc,GAE1BlR,EAAQmR,QAAU9Y,KAAK2H,QAAQmR,QAC/B9Y,KAAKsW,cAAciC,OAAMjY,EAAW,CAChCyY,UAAWL,EACX/Q,WACDgC,GACH3J,KAAKoX,eAAeoB,EAAQlX,EAAO2P,EAAOtH,EAC9C,CACAyN,eAAeoB,EAAQlX,EAAO2P,EAAOtH,GACjC,MAAMgG,EAAiB,UAAThG,GACR,OAAEqB,EAAO,OAAER,EAAO,SAAEkD,EAAS,SAAE+K,GAAczY,KAAK8K,aAClD,cAAEkL,EAAc,eAAED,GAAoB/V,KAAKkW,kBAAkB5U,EAAOqI,GACpEsB,EAAQD,EAAOE,KACfC,EAAQX,EAAOU,MACf,SAAEiN,EAAS,QAAEW,GAAa9Y,KAAK2H,QAC/BqR,GAAe,OAASb,GAAYA,EAAW1F,OAAOC,kBACtDuG,EAAejZ,KAAKQ,MAAMyV,qBAAuBtG,GAAkB,SAAThG,EAC1DX,EAAM1H,EAAQ2P,EACdiI,EAAcV,EAAOxW,OAC3B,IAAImX,EAAa7X,EAAQ,GAAKtB,KAAK8R,UAAUxQ,EAAQ,GACrD,IAAI,IAAIY,EAAI,EAAGA,EAAIgX,IAAehX,EAAE,CAChC,MAAMkX,EAAQZ,EAAOtW,GACfqF,EAAa0R,EAAeG,EAAQ,CAAC,EAC3C,GAAIlX,EAAIZ,GAASY,GAAK8G,EAAK,CACvBzB,EAAW8R,MAAO,EAClB,QACJ,CACA,MAAMxO,EAAS7K,KAAK8R,UAAU5P,GACxBoX,GAAW,OAAczO,EAAOM,IAChCoO,EAAShS,EAAW0D,GAASD,EAAOwO,iBAAiB3O,EAAOI,GAAQ/I,GACpEuX,EAASlS,EAAW4D,GAASwE,GAAS2J,EAAW9O,EAAOkP,eAAiBlP,EAAOgP,iBAAiB9L,EAAW1N,KAAKuJ,WAAWiB,EAAQK,EAAQ6C,GAAY7C,EAAOM,GAAQjJ,GAC7KqF,EAAW8R,KAAOM,MAAMJ,IAAWI,MAAMF,IAAWH,EACpD/R,EAAW9D,KAAOvB,EAAI,GAAKd,KAAKwY,IAAI/O,EAAOI,GAASkO,EAAWlO,IAAU+N,EACrEF,IACAvR,EAAWsD,OAASA,EACpBtD,EAAWsN,IAAM4D,EAASnJ,KAAKpN,IAE/B6T,IACAxO,EAAWI,QAAUqO,GAAiBhW,KAAKyU,0BAA0BvS,EAAGkX,EAAMrT,OAAS,SAAW4D,IAEjGsP,GACDjZ,KAAKsW,cAAc8C,EAAOlX,EAAGqF,EAAYoC,GAE7CwP,EAAatO,CACjB,CACJ,CACHsI,iBACO,MAAMnJ,EAAOhK,KAAK8K,YACZmD,EAAUjE,EAAKiE,QACf4L,EAAS5L,EAAQtG,SAAWsG,EAAQtG,QAAQkR,aAAe,EAC3DvJ,EAAOtF,EAAKsF,MAAQ,GAC1B,IAAKA,EAAKtN,OACN,OAAO6X,EAEX,MAAMC,EAAaxK,EAAK,GAAG5G,KAAK1I,KAAKyU,0BAA0B,IACzDsF,EAAYzK,EAAKA,EAAKtN,OAAS,GAAG0G,KAAK1I,KAAKyU,0BAA0BnF,EAAKtN,OAAS,IAC1F,OAAOZ,KAAKmC,IAAIsW,EAAQC,EAAYC,GAAa,CACrD,CACA5X,OACI,MAAM6H,EAAOhK,KAAK8K,YAClBd,EAAKiE,QAAQ+L,oBAAoBha,KAAKQ,MAAM4T,UAAWpK,EAAKgB,OAAOE,MACnEoN,MAAMnW,MACV,EA2cJ,SAAS8X,EAAaC,EAAShP,EAAM1C,EAAO2R,GACxC,MAAM,WAAEvP,EAAW,KAAE0E,EAAK,QAAE6B,GAAa+I,EACnClP,EAASJ,EAAWE,YAAYE,OACtC,GAAIA,GAAUE,IAASF,EAAOE,MAAiB,MAATA,GAAgBiG,GAAW7B,EAAKtN,OAAQ,CAC1E,MAAMoY,EAAepP,EAAOqP,eAAiB,IAAgB,IAC7D,IAAKF,EACD,OAAOC,EAAa9K,EAAMpE,EAAM1C,GAC7B,GAAIoC,EAAWmC,eAAgB,CAClC,MAAMuN,EAAKhL,EAAK,GACV2C,EAA+B,mBAAhBqI,EAAGC,UAA2BD,EAAGC,SAASrP,GAC/D,GAAI+G,EAAO,CACP,MAAM3Q,EAAQ8Y,EAAa9K,EAAMpE,EAAM1C,EAAQyJ,GACzCjJ,EAAMoR,EAAa9K,EAAMpE,EAAM1C,EAAQyJ,GAC7C,MAAO,CACHuI,GAAIlZ,EAAMkZ,GACVC,GAAIzR,EAAIyR,GAEhB,CACJ,CACJ,CACA,MAAO,CACHD,GAAI,EACJC,GAAInL,EAAKtN,OAAS,EAE1B,CACC,SAAS0Y,EAAyBla,EAAO0K,EAAMyP,EAAUC,EAAST,GAC/D,MAAMhR,EAAW3I,EAAMqa,+BACjBrS,EAAQmS,EAASzP,GACvB,IAAI,IAAIhJ,EAAI,EAAGmH,EAAOF,EAASnH,OAAQE,EAAImH,IAAQnH,EAAE,CACjD,MAAM,MAAEoH,EAAM,KAAEgG,GAAUnG,EAASjH,IAC7B,GAAEsY,EAAG,GAAEC,GAAQR,EAAa9Q,EAASjH,GAAIgJ,EAAM1C,EAAO2R,GAC5D,IAAI,IAAIW,EAAIN,EAAIM,GAAKL,IAAMK,EAAE,CACzB,MAAMxG,EAAUhF,EAAKwL,GAChBxG,EAAQ+E,MACTuB,EAAQtG,EAAShL,EAAOwR,EAEhC,CACJ,CACJ,CAUC,SAASC,EAAkBva,EAAOma,EAAUzP,EAAM8P,EAAkBC,GACjE,MAAMlZ,EAAQ,GACd,IAAKkZ,IAAqBza,EAAM0a,cAAcP,GAC1C,OAAO5Y,EAeX,OADA2Y,EAAyBla,EAAO0K,EAAMyP,GAZf,SAASrG,EAAS1K,EAAcN,IAC9C2R,IAAqB,OAAe3G,EAAS9T,EAAM4T,UAAW,KAG/DE,EAAQ6G,QAAQR,EAASvM,EAAGuM,EAAStM,EAAG2M,IACxCjZ,EAAMkB,KAAK,CACPqR,UACA1K,eACAN,SAGZ,IACgE,GACzDvH,CACX,CAuBC,SAASqZ,EAAyB5a,EAAOma,EAAUzP,EAAMiP,EAAWa,EAAkBC,GACnF,IAAIlZ,EAAQ,GACZ,MAAMsZ,EArDT,SAAkCnQ,GAC/B,MAAMoQ,GAA8B,IAAvBpQ,EAAKqQ,QAAQ,KACpBC,GAA8B,IAAvBtQ,EAAKqQ,QAAQ,KAC1B,OAAO,SAASE,EAAKC,GACjB,MAAMC,EAASL,EAAOla,KAAKwY,IAAI6B,EAAIrN,EAAIsN,EAAItN,GAAK,EAC1CwN,EAASJ,EAAOpa,KAAKwY,IAAI6B,EAAIpN,EAAIqN,EAAIrN,GAAK,EAChD,OAAOjN,KAAKya,KAAKza,KAAK0a,IAAIH,EAAQ,GAAKva,KAAK0a,IAAIF,EAAQ,GAC5D,CACJ,CA6C2BG,CAAyB7Q,GAChD,IAAI8Q,EAAcvJ,OAAOC,kBA8BzB,OADAgI,EAAyBla,EAAO0K,EAAMyP,GA5BtC,SAAwBrG,EAAS1K,EAAcN,GAC3C,MAAM6R,EAAU7G,EAAQ6G,QAAQR,EAASvM,EAAGuM,EAAStM,EAAG2M,GACxD,GAAIb,IAAcgB,EACd,OAEJ,MAAMc,EAAS3H,EAAQ4H,eAAelB,GAEtC,OADsBC,GAAoBza,EAAM0a,cAAce,MACzCd,EACjB,OAEJ,MAAMgB,EAAWd,EAAeV,EAAUsB,GACtCE,EAAWH,GACXja,EAAQ,CACJ,CACIuS,UACA1K,eACAN,UAGR0S,EAAcG,GACPA,IAAaH,GACpBja,EAAMkB,KAAK,CACPqR,UACA1K,eACAN,SAGZ,IAEOvH,CACX,CACC,SAASqa,EAAgB5b,EAAOma,EAAUzP,EAAMiP,EAAWa,EAAkBC,GAC1E,OAAKA,GAAqBza,EAAM0a,cAAcP,GAG9B,MAATzP,GAAiBiP,EAA6EiB,EAAyB5a,EAAOma,EAAUzP,EAAMiP,EAAWa,EAAkBC,GA7DrL,SAA+Bza,EAAOma,EAAUzP,EAAM8P,GACnD,IAAIjZ,EAAQ,GAmBZ,OADA2Y,EAAyBla,EAAO0K,EAAMyP,GAjBtC,SAAwBrG,EAAS1K,EAAcN,GAC3C,MAAM,WAAE+S,EAAW,SAAEC,GAAchI,EAAQiI,SAAS,CAChD,aACA,YACDvB,IACG,MAAEwB,IAAW,OAAkBlI,EAAS,CAC1ClG,EAAGuM,EAASvM,EACZC,EAAGsM,EAAStM,KAEZ,OAAcmO,EAAOH,EAAYC,IACjCva,EAAMkB,KAAK,CACPqR,UACA1K,eACAN,SAGZ,IAEOvH,CACX,CAwCwC0a,CAAsBjc,EAAOma,EAAUzP,EAAM8P,GAFtE,EAGf,CACC,SAAS0B,EAAalc,EAAOma,EAAUzP,EAAMiP,EAAWa,GACrD,MAAMjZ,EAAQ,GACR4a,EAAuB,MAATzR,EAAe,WAAa,WAChD,IAAI0R,GAAiB,EAWrB,OAVAlC,EAAyBla,EAAO0K,EAAMyP,GAAU,CAACrG,EAAS1K,EAAcN,KAChEgL,EAAQqI,GAAahC,EAASzP,GAAO8P,KACrCjZ,EAAMkB,KAAK,CACPqR,UACA1K,eACAN,UAEJsT,EAAiBA,GAAkBtI,EAAQ6G,QAAQR,EAASvM,EAAGuM,EAAStM,EAAG2M,GAC/E,IAEAb,IAAcyC,EACP,GAEJ7a,CACX,CACC,IAAI8a,EAAc,CACfnC,2BACAoC,MAAO,CACVxT,MAAO9I,EAAO2E,EAAGwC,EAASqT,GACf,MAAML,GAAW,OAAoBxV,EAAG3E,GAClC0K,EAAOvD,EAAQuD,MAAQ,IACvB+P,EAAmBtT,EAAQsT,mBAAoB,EAC/ClZ,EAAQ4F,EAAQwS,UAAYY,EAAkBva,EAAOma,EAAUzP,EAAM8P,EAAkBC,GAAoBmB,EAAgB5b,EAAOma,EAAUzP,GAAM,EAAO8P,EAAkBC,GAC3K/G,EAAW,GACjB,OAAKnS,EAAMC,QAGXxB,EAAMqa,+BAA+B7Z,SAASgJ,IAC1C,MAAMV,EAAQvH,EAAM,GAAGuH,MACjBgL,EAAUtK,EAAKsF,KAAKhG,GACtBgL,IAAYA,EAAQ+E,MACpBnF,EAASjR,KAAK,CACVqR,UACA1K,aAAcI,EAAKV,MACnBA,SAER,IAEG4K,GAbI,EAcf,EACPjG,QAASzN,EAAO2E,EAAGwC,EAASqT,GACjB,MAAML,GAAW,OAAoBxV,EAAG3E,GAClC0K,EAAOvD,EAAQuD,MAAQ,KACvB+P,EAAmBtT,EAAQsT,mBAAoB,EACrD,IAAIlZ,EAAQ4F,EAAQwS,UAAYY,EAAkBva,EAAOma,EAAUzP,EAAM8P,EAAkBC,GAAoBmB,EAAgB5b,EAAOma,EAAUzP,GAAM,EAAO8P,EAAkBC,GAC/K,GAAIlZ,EAAMC,OAAS,EAAG,CAClB,MAAM4H,EAAe7H,EAAM,GAAG6H,aACxB0F,EAAO9O,EAAMgP,eAAe5F,GAAc0F,KAChDvN,EAAQ,GACR,IAAI,IAAIG,EAAI,EAAGA,EAAIoN,EAAKtN,SAAUE,EAC9BH,EAAMkB,KAAK,CACPqR,QAAShF,EAAKpN,GACd0H,eACAN,MAAOpH,GAGnB,CACA,OAAOH,CACX,EACPqX,MAAO5Y,EAAO2E,EAAGwC,EAASqT,GAIf,OAAOD,EAAkBva,GAHR,OAAoB2E,EAAG3E,GAC3BmH,EAAQuD,MAAQ,KAEmB8P,EADvBrT,EAAQsT,mBAAoB,EAEzD,EACP8B,QAASvc,EAAO2E,EAAGwC,EAASqT,GACjB,MAAML,GAAW,OAAoBxV,EAAG3E,GAClC0K,EAAOvD,EAAQuD,MAAQ,KACvB+P,EAAmBtT,EAAQsT,mBAAoB,EACrD,OAAOmB,EAAgB5b,EAAOma,EAAUzP,EAAMvD,EAAQwS,UAAWa,EAAkBC,EACvF,EACP7M,EAAG5N,EAAO2E,EAAGwC,EAASqT,GAEX,OAAO0B,EAAalc,GADH,OAAoB2E,EAAG3E,GACH,IAAKmH,EAAQwS,UAAWa,EACjE,EACP3M,EAAG7N,EAAO2E,EAAGwC,EAASqT,GAEX,OAAO0B,EAAalc,GADH,OAAoB2E,EAAG3E,GACH,IAAKmH,EAAQwS,UAAWa,EACjE,IAIR,MAAMgC,EAAmB,CACrB,OACA,MACA,QACA,UAEJ,SAASC,EAAiBC,EAAOvC,GAC7B,OAAOuC,EAAMrR,QAAQ2C,GAAIA,EAAE2O,MAAQxC,GACvC,CACA,SAASyC,EAA4BF,EAAOhS,GACxC,OAAOgS,EAAMrR,QAAQ2C,IAAyC,IAArCwO,EAAiBzB,QAAQ/M,EAAE2O,MAAe3O,EAAE6O,IAAInS,OAASA,GACtF,CACA,SAASoS,EAAaJ,EAAOnU,GACzB,OAAOmU,EAAMK,MAAK,CAACC,EAAG/J,KAClB,MAAMgK,EAAK1U,EAAU0K,EAAI+J,EACnBE,EAAK3U,EAAUyU,EAAI/J,EACzB,OAAOgK,EAAGE,SAAWD,EAAGC,OAASF,EAAGnU,MAAQoU,EAAGpU,MAAQmU,EAAGE,OAASD,EAAGC,MAAM,GAEpF,CAqCC,SAASC,EAAcC,EAASC,GAC7B,MAAM3T,EAnBV,SAAqB0T,GACjB,MAAM1T,EAAS,CAAC,EAChB,IAAK,MAAM4T,KAAQF,EAAQ,CACvB,MAAM,MAAErU,EAAM,IAAE2T,EAAI,YAAEa,GAAiBD,EACvC,IAAKvU,IAAUwT,EAAiBiB,SAASd,GACrC,SAEJ,MAAMe,EAAS/T,EAAOX,KAAWW,EAAOX,GAAS,CAC7CyH,MAAO,EACPkN,OAAQ,EACRR,OAAQ,EACRjV,KAAM,IAEVwV,EAAOjN,QACPiN,EAAOP,QAAUK,CACrB,CACA,OAAO7T,CACX,CAEmBiU,CAAYP,IACrB,aAAEQ,EAAa,cAAEC,GAAmBR,EAC1C,IAAI5b,EAAGmH,EAAMkV,EACb,IAAIrc,EAAI,EAAGmH,EAAOwU,EAAQ7b,OAAQE,EAAImH,IAAQnH,EAAE,CAC5Cqc,EAASV,EAAQ3b,GACjB,MAAM,SAAEsc,GAAcD,EAAOlB,IACvB7T,EAAQW,EAAOoU,EAAO/U,OACtBrF,EAASqF,GAAS+U,EAAOP,YAAcxU,EAAMmU,OAC/CY,EAAOE,YACPF,EAAOG,MAAQva,EAASA,EAASka,EAAeG,GAAYV,EAAOa,eACnEJ,EAAOK,OAASN,IAEhBC,EAAOG,MAAQL,EACfE,EAAOK,OAASza,EAASA,EAASma,EAAgBE,GAAYV,EAAOe,gBAE7E,CACA,OAAO1U,CACX,CAmBA,SAAS2U,EAAeC,EAAY3K,EAAWoJ,EAAG/J,GAC9C,OAAOrS,KAAKmC,IAAIwb,EAAWvB,GAAIpJ,EAAUoJ,IAAMpc,KAAKmC,IAAIwb,EAAWtL,GAAIW,EAAUX,GACrF,CACA,SAASuL,EAAiBD,EAAYE,GAClCF,EAAWrL,IAAMtS,KAAKmC,IAAIwb,EAAWrL,IAAKuL,EAAWvL,KACrDqL,EAAWlL,KAAOzS,KAAKmC,IAAIwb,EAAWlL,KAAMoL,EAAWpL,MACvDkL,EAAWnL,OAASxS,KAAKmC,IAAIwb,EAAWnL,OAAQqL,EAAWrL,QAC3DmL,EAAWpL,MAAQvS,KAAKmC,IAAIwb,EAAWpL,MAAOsL,EAAWtL,MAC7D,CACA,SAASuL,EAAW9K,EAAW0J,EAAQS,EAAQpU,GAC3C,MAAM,IAAEgT,EAAI,IAAEE,GAASkB,EACjBQ,EAAa3K,EAAU2K,WAC7B,KAAK,IAAA7c,GAASib,GAAM,CACZoB,EAAO7V,OACP0L,EAAU+I,IAAQoB,EAAO7V,MAE7B,MAAMc,EAAQW,EAAOoU,EAAO/U,QAAU,CAClCd,KAAM,EACNuI,MAAO,GAEXzH,EAAMd,KAAOtH,KAAKmC,IAAIiG,EAAMd,KAAM6V,EAAOE,WAAapB,EAAIuB,OAASvB,EAAIqB,OACvEH,EAAO7V,KAAOc,EAAMd,KAAOc,EAAMyH,MACjCmD,EAAU+I,IAAQoB,EAAO7V,IAC7B,CACI2U,EAAI8B,YACJH,EAAiBD,EAAY1B,EAAI8B,cAErC,MAAMC,EAAWhe,KAAKmC,IAAI,EAAGua,EAAOuB,WAAaP,EAAeC,EAAY3K,EAAW,OAAQ,UACzFkL,EAAYle,KAAKmC,IAAI,EAAGua,EAAOyB,YAAcT,EAAeC,EAAY3K,EAAW,MAAO,WAC1FoL,EAAeJ,IAAahL,EAAUqL,EACtCC,EAAgBJ,IAAclL,EAAUuL,EAG9C,OAFAvL,EAAUqL,EAAIL,EACdhL,EAAUuL,EAAIL,EACPf,EAAOE,WAAa,CACvBmB,KAAMJ,EACNK,MAAOH,GACP,CACAE,KAAMF,EACNG,MAAOL,EAEf,CAaA,SAASM,EAAWrB,EAAYrK,GAC5B,MAAM2K,EAAa3K,EAAU2K,WAC7B,SAASgB,EAAmBC,GACxB,MAAMC,EAAS,CACXpM,KAAM,EACNH,IAAK,EACLC,MAAO,EACPC,OAAQ,GAKZ,OAHAoM,EAAUhf,SAASmc,IACf8C,EAAO9C,GAAO/b,KAAKmC,IAAI6Q,EAAU+I,GAAM4B,EAAW5B,GAAK,IAEpD8C,CACX,CACA,OAAoBF,EAAbtB,EAAgC,CACnC,OACA,SACoB,CACpB,MACA,UAER,CACA,SAASyB,EAASC,EAAO/L,EAAW0J,EAAQ3T,GACxC,MAAMiW,EAAa,GACnB,IAAIle,EAAGmH,EAAMkV,EAAQlB,EAAKgD,EAAOC,EACjC,IAAIpe,EAAI,EAAGmH,EAAO8W,EAAMne,OAAQqe,EAAQ,EAAGne,EAAImH,IAAQnH,EAAE,CACrDqc,EAAS4B,EAAMje,GACfmb,EAAMkB,EAAOlB,IACbA,EAAIrX,OAAOuY,EAAOG,OAAStK,EAAUqL,EAAGlB,EAAOK,QAAUxK,EAAUuL,EAAGG,EAAWvB,EAAOE,WAAYrK,IACpG,MAAM,KAAEwL,EAAK,MAAEC,GAAWX,EAAW9K,EAAW0J,EAAQS,EAAQpU,GAChEkW,GAAST,GAAQQ,EAAWpe,OAC5Bse,EAAUA,GAAWT,EAChBxC,EAAImB,UACL4B,EAAWnd,KAAKsb,EAExB,CACA,OAAO8B,GAASH,EAASE,EAAYhM,EAAW0J,EAAQ3T,IAAWmW,CACvE,CACA,SAASC,EAAWlD,EAAKxJ,EAAMH,EAAKgL,EAAOE,GACvCvB,EAAI3J,IAAMA,EACV2J,EAAIxJ,KAAOA,EACXwJ,EAAI1J,MAAQE,EAAO6K,EACnBrB,EAAIzJ,OAASF,EAAMkL,EACnBvB,EAAIqB,MAAQA,EACZrB,EAAIuB,OAASA,CACjB,CACA,SAAS4B,EAAWL,EAAO/L,EAAW0J,EAAQ3T,GAC1C,MAAMsW,EAAc3C,EAAO4C,QAC3B,IAAI,EAAEtS,EAAE,EAAEC,GAAO+F,EACjB,IAAK,MAAMmK,KAAU4B,EAAM,CACvB,MAAM9C,EAAMkB,EAAOlB,IACb7T,EAAQW,EAAOoU,EAAO/U,QAAU,CAClCyH,MAAO,EACPkN,OAAQ,EACRR,OAAQ,GAENA,EAASY,EAAOP,YAAcxU,EAAMmU,QAAU,EACpD,GAAIY,EAAOE,WAAY,CACnB,MAAMC,EAAQtK,EAAUqL,EAAI9B,EACtBiB,EAASpV,EAAMd,MAAQ2U,EAAIuB,QAC7B,OAAQpV,EAAMlI,SACd+M,EAAI7E,EAAMlI,OAEV+b,EAAImB,SACJ+B,EAAWlD,EAAKoD,EAAY5M,KAAMxF,EAAGyP,EAAOuB,WAAaoB,EAAY9M,MAAQ8M,EAAY5M,KAAM+K,GAE/F2B,EAAWlD,EAAKjJ,EAAUP,KAAOrK,EAAM2U,OAAQ9P,EAAGqQ,EAAOE,GAE7DpV,EAAMlI,MAAQ+M,EACd7E,EAAM2U,QAAUO,EAChBrQ,EAAIgP,EAAIzJ,MACZ,KAAO,CACH,MAAM+M,EAAUvM,EAAUuL,EAAIhC,EACxBiD,EAASpX,EAAMd,MAAQ2U,EAAIqB,OAC7B,OAAQlV,EAAMlI,SACd8M,EAAI5E,EAAMlI,OAEV+b,EAAImB,SACJ+B,EAAWlD,EAAKjP,EAAGqS,EAAY/M,IAAKkN,EAAQ9C,EAAOyB,YAAckB,EAAY7M,OAAS6M,EAAY/M,KAElG6M,EAAWlD,EAAKjP,EAAGgG,EAAUV,IAAMlK,EAAM2U,OAAQyC,EAAQD,GAE7DnX,EAAMlI,MAAQ8M,EACd5E,EAAM2U,QAAUwC,EAChBvS,EAAIiP,EAAI1J,KACZ,CACJ,CACAS,EAAUhG,EAAIA,EACdgG,EAAU/F,EAAIA,CAClB,CACA,IAAIwP,EAAU,CACbgD,OAAQrgB,EAAOyB,GACHzB,EAAM2f,QACP3f,EAAM2f,MAAQ,IAElBle,EAAKuc,SAAWvc,EAAKuc,WAAY,EACjCvc,EAAK0Y,SAAW1Y,EAAK0Y,UAAY,MACjC1Y,EAAK0b,OAAS1b,EAAK0b,QAAU,EAC7B1b,EAAK6e,QAAU7e,EAAK6e,SAAW,WAC3B,MAAO,CACH,CACIC,EAAG,EACH5e,KAAMiS,GACFnS,EAAKE,KAAKiS,EACd,GAGZ,EACA5T,EAAM2f,MAAMld,KAAKhB,EACrB,EACH+e,UAAWxgB,EAAOygB,GACX,MAAM3X,EAAQ9I,EAAM2f,MAAQ3f,EAAM2f,MAAM5E,QAAQ0F,IAAe,GAChD,IAAX3X,GACA9I,EAAM2f,MAAM7I,OAAOhO,EAAO,EAElC,EACHxC,UAAWtG,EAAOyB,EAAM0F,GACjB1F,EAAKuc,SAAW7W,EAAQ6W,SACxBvc,EAAK0Y,SAAWhT,EAAQgT,SACxB1Y,EAAK0b,OAAShW,EAAQgW,MAC1B,EACH3X,OAAQxF,EAAOke,EAAOE,EAAQsC,GACvB,IAAK1gB,EACD,OAEJ,MAAMkgB,GAAU,OAAUlgB,EAAMmH,QAAQ4W,OAAOmC,SACzC/B,EAAiBvd,KAAKmC,IAAImb,EAAQgC,EAAQhC,MAAO,GACjDG,EAAkBzd,KAAKmC,IAAIqb,EAAS8B,EAAQ9B,OAAQ,GACpDuB,EAvMd,SAA0BA,GACtB,MAAMgB,EAxDV,SAAmBhB,GACf,MAAMgB,EAAc,GACpB,IAAIjf,EAAGmH,EAAMgU,EAAKF,EAAK3T,EAAOwU,EAC9B,IAAI9b,EAAI,EAAGmH,GAAQ8W,GAAS,IAAIne,OAAQE,EAAImH,IAAQnH,EAChDmb,EAAM8C,EAAMje,KACTyY,SAAUwC,EAAMxV,SAAW6B,QAAQwU,cAAa,IAAUX,GAC7D8D,EAAYle,KAAK,CACbqG,MAAOpH,EACPmb,MACAF,MACAsB,WAAYpB,EAAI+D,eAChBzD,OAAQN,EAAIM,OACZnU,MAAOA,GAAS2T,EAAM3T,EACtBwU,gBAGR,OAAOmD,CACX,CAuCwBE,CAAUlB,GACxB3B,EAAWlB,EAAa6D,EAAYtV,QAAQkS,GAAOA,EAAKV,IAAImB,YAAW,GACvE3K,EAAOyJ,EAAaL,EAAiBkE,EAAa,SAAS,GAC3DxN,EAAQ2J,EAAaL,EAAiBkE,EAAa,UACnDzN,EAAM4J,EAAaL,EAAiBkE,EAAa,QAAQ,GACzDvN,EAAS0J,EAAaL,EAAiBkE,EAAa,WACpDG,EAAmBlE,EAA4B+D,EAAa,KAC5DI,EAAiBnE,EAA4B+D,EAAa,KAChE,MAAO,CACH3C,WACAgD,WAAY3N,EAAK4N,OAAO/N,GACxBgO,eAAgB/N,EAAM8N,OAAOF,GAAgBE,OAAO7N,GAAQ6N,OAAOH,GACnElN,UAAW6I,EAAiBkE,EAAa,aACzCQ,SAAU9N,EAAK4N,OAAO9N,GAAO8N,OAAOF,GACpC9C,WAAY/K,EAAI+N,OAAO7N,GAAQ6N,OAAOH,GAE9C,CAsLsBM,CAAiBphB,EAAM2f,OAC/B0B,EAAgB1B,EAAMwB,SACtBG,EAAkB3B,EAAM1B,YAC9B,OAAKje,EAAM2f,OAAQ9C,IACiB,mBAArBA,EAAI0E,cACX1E,EAAI0E,cACR,IAEJ,MAAMC,EAA0BH,EAAcze,QAAO,CAAC6e,EAAOlE,IAAOA,EAAKV,IAAI1V,UAAwC,IAA7BoW,EAAKV,IAAI1V,QAAQua,QAAoBD,EAAQA,EAAQ,GAAG,IAAM,EAChJnE,EAAS9W,OAAOyO,OAAO,CACzB4J,WAAYX,EACZa,YAAaX,EACb8B,UACA/B,iBACAE,kBACAR,aAAcM,EAAiB,EAAIqD,EACnC1D,cAAeO,EAAkB,IAE/BE,EAAa/X,OAAOa,OAAO,CAAC,EAAG6Y,GACrC1B,EAAiBD,GAAY,OAAUmC,IACvC,MAAM9M,EAAYpN,OAAOa,OAAO,CAC5BkX,aACAU,EAAGd,EACHgB,EAAGd,EACHzQ,EAAGsS,EAAQ7M,KACXxF,EAAGqS,EAAQhN,KACZgN,GACGvW,EAASyT,EAAciE,EAAcJ,OAAOK,GAAkBhE,GACpEoC,EAASC,EAAM3B,SAAUpK,EAAW0J,EAAQ3T,GAC5C+V,EAAS2B,EAAezN,EAAW0J,EAAQ3T,GACvC+V,EAAS4B,EAAiB1N,EAAW0J,EAAQ3T,IAC7C+V,EAAS2B,EAAezN,EAAW0J,EAAQ3T,GA3KvD,SAA0BiK,GACtB,MAAM2K,EAAa3K,EAAU2K,WAC7B,SAASoD,EAAUhF,GACf,MAAMiF,EAAShhB,KAAKmC,IAAIwb,EAAW5B,GAAO/I,EAAU+I,GAAM,GAE1D,OADA/I,EAAU+I,IAAQiF,EACXA,CACX,CACAhO,EAAU/F,GAAK8T,EAAU,OACzB/N,EAAUhG,GAAK+T,EAAU,QACzBA,EAAU,SACVA,EAAU,SACd,CAkKQE,CAAiBjO,GACjBoM,EAAWL,EAAMqB,WAAYpN,EAAW0J,EAAQ3T,GAChDiK,EAAUhG,GAAKgG,EAAUqL,EACzBrL,EAAU/F,GAAK+F,EAAUuL,EACzBa,EAAWL,EAAMuB,eAAgBtN,EAAW0J,EAAQ3T,GACpD3J,EAAM4T,UAAY,CACdP,KAAMO,EAAUP,KAChBH,IAAKU,EAAUV,IACfC,MAAOS,EAAUP,KAAOO,EAAUqL,EAClC7L,OAAQQ,EAAUV,IAAMU,EAAUuL,EAClCf,OAAQxK,EAAUuL,EAClBjB,MAAOtK,EAAUqL,IAErB,OAAKU,EAAM/L,WAAYmK,IACnB,MAAMlB,EAAMkB,EAAOlB,IACnBrW,OAAOa,OAAOwV,EAAK7c,EAAM4T,WACzBiJ,EAAIrX,OAAOoO,EAAUqL,EAAGrL,EAAUuL,EAAG,CACjC9L,KAAM,EACNH,IAAK,EACLC,MAAO,EACPC,OAAQ,GACV,GAEV,GAGJ,MAAM0O,EACLC,eAAeC,EAAQC,GAAc,CACrCC,eAAehO,GACR,OAAO,CACX,CACHiO,iBAAiBniB,EAAOG,EAAMiiB,GAAW,CACzCC,oBAAoBriB,EAAOG,EAAMiiB,GAAW,CAC5CE,sBACO,OAAO,CACX,CACHC,eAAezO,EAASoK,EAAOE,EAAQ6D,GAGhC,OAFA/D,EAAQtd,KAAKmC,IAAI,EAAGmb,GAASpK,EAAQoK,OACrCE,EAASA,GAAUtK,EAAQsK,OACpB,CACHF,QACAE,OAAQxd,KAAKmC,IAAI,EAAGkf,EAAcrhB,KAAKkE,MAAMoZ,EAAQ+D,GAAe7D,GAE5E,CACHoE,WAAWR,GACJ,OAAO,CACX,CACHS,aAAatc,GACV,EAGJ,MAAMuc,UAAsBZ,EACxBC,eAAetgB,GACX,OAAOA,GAAQA,EAAK6O,YAAc7O,EAAK6O,WAAW,OAAS,IAC/D,CACAmS,aAAatc,GACTA,EAAOgB,QAAQc,WAAY,CAC/B,EAGJ,MACO0a,EAAc,CACjBC,WAAY,YACZC,UAAW,YACXC,SAAU,UACVC,aAAc,aACdC,YAAa,YACbC,YAAa,YACbC,UAAW,UACXC,aAAc,WACdC,WAAY,YAEVC,EAAiBrb,GAAkB,OAAVA,GAA4B,KAAVA,EAoCjD,MAAMsb,IAAuB,KAA+B,CACxDC,SAAS,GAKb,SAASC,EAAexjB,EAAOG,EAAMiiB,GACjCpiB,EAAMgiB,OAAOK,oBAAoBliB,EAAMiiB,EAAUkB,EACrD,CAYA,SAASG,EAAiBC,EAAU1B,GAChC,IAAK,MAAM2B,KAAQD,EACf,GAAIC,IAAS3B,GAAU2B,EAAKC,SAAS5B,GACjC,OAAO,CAGnB,CACA,SAAS6B,EAAqB7jB,EAAOG,EAAMiiB,GACvC,MAAMJ,EAAShiB,EAAMgiB,OACf8B,EAAW,IAAIC,kBAAkBC,IACnC,IAAIC,GAAU,EACd,IAAK,MAAMC,KAASF,EAChBC,EAAUA,GAAWR,EAAiBS,EAAMC,WAAYnC,GACxDiC,EAAUA,IAAYR,EAAiBS,EAAME,aAAcpC,GAE3DiC,GACA7B,GACJ,IAMJ,OAJA0B,EAASO,QAAQC,SAAU,CACvBC,WAAW,EACXC,SAAS,IAENV,CACX,CACA,SAASW,EAAqBzkB,EAAOG,EAAMiiB,GACvC,MAAMJ,EAAShiB,EAAMgiB,OACf8B,EAAW,IAAIC,kBAAkBC,IACnC,IAAIC,GAAU,EACd,IAAK,MAAMC,KAASF,EAChBC,EAAUA,GAAWR,EAAiBS,EAAME,aAAcpC,GAC1DiC,EAAUA,IAAYR,EAAiBS,EAAMC,WAAYnC,GAEzDiC,GACA7B,GACJ,IAMJ,OAJA0B,EAASO,QAAQC,SAAU,CACvBC,WAAW,EACXC,SAAS,IAENV,CACX,CACA,MAAMY,EAAqB,IAAI/kB,IAC/B,IAAIglB,EAAsB,EAC1B,SAASC,KACL,MAAMC,EAAM5jB,OAAO6jB,iBACfD,IAAQF,IAGZA,EAAsBE,EACtBH,EAAmBlkB,SAAQ,CAACukB,EAAQ/kB,KAC5BA,EAAMglB,0BAA4BH,GAClCE,GACJ,IAER,CAaA,SAASE,GAAqBjlB,EAAOG,EAAMiiB,GACvC,MAAMJ,EAAShiB,EAAMgiB,OACfkD,EAAYlD,IAAU,OAAeA,GAC3C,IAAKkD,EACD,OAEJ,MAAMH,GAAS,QAAU,CAAC7G,EAAOE,KAC7B,MAAMa,EAAIiG,EAAUC,YACpB/C,EAASlE,EAAOE,GACZa,EAAIiG,EAAUC,aACd/C,GACJ,GACDnhB,QACG6iB,EAAW,IAAIsB,gBAAgBpB,IACjC,MAAME,EAAQF,EAAQ,GAChB9F,EAAQgG,EAAMmB,YAAYnH,MAC1BE,EAAS8F,EAAMmB,YAAYjH,OACnB,IAAVF,GAA0B,IAAXE,GAGnB2G,EAAO7G,EAAOE,EAAO,IAIzB,OAFA0F,EAASO,QAAQa,GAlCrB,SAAuCllB,EAAO+kB,GACrCL,EAAmBxc,MACpBjH,OAAOkhB,iBAAiB,SAAUyC,IAEtCF,EAAmBriB,IAAIrC,EAAO+kB,EAClC,CA8BIO,CAA8BtlB,EAAO+kB,GAC9BjB,CACX,CACA,SAASyB,GAAgBvlB,EAAOG,EAAM2jB,GAC9BA,GACAA,EAAS0B,aAEA,WAATrlB,GApCR,SAAyCH,GACrC0kB,EAAmBthB,OAAOpD,GACrB0kB,EAAmBxc,MACpBjH,OAAOohB,oBAAoB,SAAUuC,GAE7C,CAgCQa,CAAgCzlB,EAExC,CACA,SAAS0lB,GAAqB1lB,EAAOG,EAAMiiB,GACvC,MAAMJ,EAAShiB,EAAMgiB,OACf2D,GAAQ,QAAWpjB,IACH,OAAdvC,EAAMgM,KACNoW,EAtHZ,SAAyB7f,EAAOvC,GAC5B,MAAMG,EAAOwiB,EAAYpgB,EAAMpC,OAASoC,EAAMpC,MACxC,EAAEyN,EAAE,EAAEC,IAAO,OAAoBtL,EAAOvC,GAC9C,MAAO,CACHG,OACAH,QACA4lB,OAAQrjB,EACRqL,OAAS9N,IAAN8N,EAAkBA,EAAI,KACzBC,OAAS/N,IAAN+N,EAAkBA,EAAI,KAEjC,CA4GqBgY,CAAgBtjB,EAAOvC,GACpC,GACDA,GAEH,OAhIJ,SAAqB2jB,EAAMxjB,EAAMiiB,GAC7BuB,EAAKxB,iBAAiBhiB,EAAMiiB,EAAUkB,EAC1C,CA6HIwC,CAAY9D,EAAQ7hB,EAAMwlB,GACnBA,CACX,CACC,MAAMI,WAAoBjE,EAC1BC,eAAeC,EAAQC,GAChB,MAAM/N,EAAU8N,GAAUA,EAAO1R,YAAc0R,EAAO1R,WAAW,MACjE,OAAI4D,GAAWA,EAAQ8N,SAAWA,GA3KzC,SAAoBA,EAAQC,GACzB,MAAM+D,EAAQhE,EAAOgE,MACfC,EAAejE,EAAOkE,aAAa,UACnCC,EAAcnE,EAAOkE,aAAa,SAcxC,GAbAlE,EAAkB,SAAI,CAClBthB,QAAS,CACL0d,OAAQ6H,EACR/H,MAAOiI,EACPH,MAAO,CACHtE,QAASsE,EAAMtE,QACftD,OAAQ4H,EAAM5H,OACdF,MAAO8H,EAAM9H,SAIzB8H,EAAMtE,QAAUsE,EAAMtE,SAAW,QACjCsE,EAAMI,UAAYJ,EAAMI,WAAa,aACjC/C,EAAc8C,GAAc,CAC5B,MAAME,GAAe,OAAarE,EAAQ,cACrBliB,IAAjBumB,IACArE,EAAO9D,MAAQmI,EAEvB,CACA,GAAIhD,EAAc4C,GACd,GAA4B,KAAxBjE,EAAOgE,MAAM5H,OACb4D,EAAO5D,OAAS4D,EAAO9D,OAAS+D,GAAe,OAC5C,CACH,MAAMqE,GAAgB,OAAatE,EAAQ,eACrBliB,IAAlBwmB,IACAtE,EAAO5D,OAASkI,EAExB,CAGR,CA0IYC,CAAWvE,EAAQC,GACZ/N,GAEJ,IACX,CACHgO,eAAehO,GACR,MAAM8N,EAAS9N,EAAQ8N,OACvB,IAAKA,EAAkB,SACnB,OAAO,EAEX,MAAMthB,EAAUshB,EAAkB,SAAEthB,QACpC,CACI,SACA,SACFF,SAAS+D,IACP,MAAMyD,EAAQtH,EAAQ6D,IAClB,OAAcyD,GACdga,EAAOwE,gBAAgBjiB,GAEvByd,EAAOyE,aAAaliB,EAAMyD,EAC9B,IAEJ,MAAMge,EAAQtlB,EAAQslB,OAAS,CAAC,EAMhC,OALAxf,OAAOC,KAAKuf,GAAOxlB,SAASqG,IACxBmb,EAAOgE,MAAMnf,GAAOmf,EAAMnf,EAAI,IAElCmb,EAAO9D,MAAQ8D,EAAO9D,aACf8D,EAAkB,UAClB,CACX,CACHG,iBAAiBniB,EAAOG,EAAMiiB,GACvB5iB,KAAK6iB,oBAAoBriB,EAAOG,GAChC,MAAMumB,EAAU1mB,EAAM2mB,WAAa3mB,EAAM2mB,SAAW,CAAC,GAM/CvM,EALW,CACbwM,OAAQ/C,EACRgD,OAAQpC,EACRM,OAAQE,IAEa9kB,IAASulB,GAClCgB,EAAQvmB,GAAQia,EAAQpa,EAAOG,EAAMiiB,EACzC,CACHC,oBAAoBriB,EAAOG,GACpB,MAAMumB,EAAU1mB,EAAM2mB,WAAa3mB,EAAM2mB,SAAW,CAAC,GAC/ChB,EAAQe,EAAQvmB,GACtB,IAAKwlB,EACD,QAEa,CACbiB,OAAQrB,GACRsB,OAAQtB,GACRR,OAAQQ,IAEaplB,IAASqjB,GAC1BxjB,EAAOG,EAAMwlB,GACrBe,EAAQvmB,QAAQL,CACpB,CACAwiB,sBACI,OAAOrhB,OAAO6jB,gBAClB,CACHvC,eAAeP,EAAQ9D,EAAOE,EAAQ6D,GAC/B,OAAO,OAAeD,EAAQ9D,EAAOE,EAAQ6D,EACjD,CACHO,WAAWR,GACJ,MAAMkD,GAAY,OAAelD,GACjC,SAAUkD,IAAaA,EAAU4B,YACrC,EAUJ,MAAMC,GACFjb,gBAAkB,CAAC,EACnBA,0BAAuBhM,EACvByF,QAAS,EACTyhB,gBAAgBxM,GACZ,MAAM,EAAE5M,EAAE,EAAEC,GAAOrO,KAAKuc,SAAS,CAC7B,IACA,KACDvB,GACH,MAAO,CACH5M,IACAC,IAER,CACAoZ,WACI,OAAO,OAASznB,KAAKoO,KAAM,OAASpO,KAAKqO,EAC7C,CACAkO,SAASjU,EAAOof,GACZ,MAAMjnB,EAAQT,KAAK8H,YACnB,IAAK4f,IAAUjnB,EAEX,OAAOT,KAEX,MAAM2nB,EAAM,CAAC,EAIb,OAHArf,EAAMtH,SAAS+D,IACX4iB,EAAI5iB,GAAQtE,EAAMsE,IAAStE,EAAMsE,GAAMgB,SAAWtF,EAAMsE,GAAMc,IAAM7F,KAAK+E,EAAK,IAE3E4iB,CACX,EAGJ,SAASC,GAAShf,EAAOif,GACrB,MAAMC,EAAWlf,EAAMjB,QAAQkgB,MACzBE,EAyBV,SAA2Bnf,GACvB,MAAMof,EAASpf,EAAMjB,QAAQqgB,OACvBC,EAAarf,EAAMsf,YACnBC,EAAWvf,EAAMwf,QAAUH,GAAcD,EAAS,EAAI,GACtDK,EAAWzf,EAAM0f,WAAaL,EACpC,OAAO7mB,KAAKkE,MAAMlE,KAAKC,IAAI8mB,EAAUE,GACzC,CA/B+BE,CAAkB3f,GACvC4f,EAAapnB,KAAKC,IAAIymB,EAASW,eAAiBV,EAAoBA,GACpEW,EAAeZ,EAASa,MAAMC,QA6CvC,SAAyBf,GACtB,MAAMgB,EAAS,GACf,IAAI3mB,EAAGmH,EACP,IAAInH,EAAI,EAAGmH,EAAOwe,EAAM7lB,OAAQE,EAAImH,EAAMnH,IAClC2lB,EAAM3lB,GAAGymB,OACTE,EAAO5lB,KAAKf,GAGpB,OAAO2mB,CACX,CAtDkDC,CAAgBjB,GAAS,GACjEkB,EAAkBL,EAAa1mB,OAC/BgnB,EAAQN,EAAa,GACrBO,EAAOP,EAAaK,EAAkB,GACtCG,EAAW,GACjB,GAAIH,EAAkBP,EAElB,OAgDP,SAAoBX,EAAOqB,EAAUR,EAAcS,GAChD,IAEIjnB,EAFA+O,EAAQ,EACRmY,EAAOV,EAAa,GAGxB,IADAS,EAAU/nB,KAAKioB,KAAKF,GAChBjnB,EAAI,EAAGA,EAAI2lB,EAAM7lB,OAAQE,IACrBA,IAAMknB,IACNF,EAASjmB,KAAK4kB,EAAM3lB,IACpB+O,IACAmY,EAAOV,EAAazX,EAAQkY,GAGxC,CA7DQG,CAAWzB,EAAOqB,EAAUR,EAAcK,EAAkBP,GACrDU,EAEX,MAAMC,EAqBT,SAA0BT,EAAcb,EAAOW,GAC5C,MAAMe,EA4DT,SAAwBpS,GACrB,MAAMqS,EAAMrS,EAAInV,OAChB,IAAIE,EAAGunB,EACP,GAAID,EAAM,EACN,OAAO,EAEX,IAAIC,EAAOtS,EAAI,GAAIjV,EAAI,EAAGA,EAAIsnB,IAAOtnB,EACjC,GAAIiV,EAAIjV,GAAKiV,EAAIjV,EAAI,KAAOunB,EACxB,OAAO,EAGf,OAAOA,CACX,CAxE6BC,CAAehB,GAClCS,EAAUtB,EAAM7lB,OAASwmB,EAC/B,IAAKe,EACD,OAAOnoB,KAAKmC,IAAI4lB,EAAS,GAE7B,MAAMQ,GAAU,OAAWJ,GAC3B,IAAI,IAAIrnB,EAAI,EAAGmH,EAAOsgB,EAAQ3nB,OAAS,EAAGE,EAAImH,EAAMnH,IAAI,CACpD,MAAMiC,EAASwlB,EAAQznB,GACvB,GAAIiC,EAASglB,EACT,OAAOhlB,CAEf,CACA,OAAO/C,KAAKmC,IAAI4lB,EAAS,EAC7B,CAnCoBS,CAAiBlB,EAAcb,EAAOW,GACtD,GAAIO,EAAkB,EAAG,CACrB,IAAI7mB,EAAGmH,EACP,MAAMwgB,EAAkBd,EAAkB,EAAI3nB,KAAK0oB,OAAOb,EAAOD,IAAUD,EAAkB,IAAM,KAEnG,IADA1P,GAAKwO,EAAOqB,EAAUC,GAAS,OAAcU,GAAmB,EAAIb,EAAQa,EAAiBb,GACzF9mB,EAAI,EAAGmH,EAAO0f,EAAkB,EAAG7mB,EAAImH,EAAMnH,IAC7CmX,GAAKwO,EAAOqB,EAAUC,EAAST,EAAaxmB,GAAIwmB,EAAaxmB,EAAI,IAGrE,OADAmX,GAAKwO,EAAOqB,EAAUC,EAASF,GAAM,OAAcY,GAAmBhC,EAAM7lB,OAASinB,EAAOY,GACrFX,CACX,CAEA,OADA7P,GAAKwO,EAAOqB,EAAUC,GACfD,CACX,CA8CC,SAAS7P,GAAKwO,EAAOqB,EAAUC,EAASY,EAAYC,GACjD,MAAM1oB,GAAQ,IAAAkN,GAAeub,EAAY,GACnC/gB,EAAM5H,KAAKC,KAAI,IAAAmN,GAAewb,EAAUnC,EAAM7lB,QAAS6lB,EAAM7lB,QACnE,IACIA,EAAQE,EAAGknB,EADXnY,EAAQ,EAQZ,IANAkY,EAAU/nB,KAAKioB,KAAKF,GAChBa,IACAhoB,EAASgoB,EAAWD,EACpBZ,EAAUnnB,EAASZ,KAAKkE,MAAMtD,EAASmnB,IAE3CC,EAAO9nB,EACD8nB,EAAO,GACTnY,IACAmY,EAAOhoB,KAAK0oB,MAAMxoB,EAAQ2P,EAAQkY,GAEtC,IAAIjnB,EAAId,KAAKmC,IAAIjC,EAAO,GAAIY,EAAI8G,EAAK9G,IAC7BA,IAAMknB,IACNF,EAASjmB,KAAK4kB,EAAM3lB,IACpB+O,IACAmY,EAAOhoB,KAAK0oB,MAAMxoB,EAAQ2P,EAAQkY,GAG9C,CAeA,MACMc,GAAiB,CAACrhB,EAAOshB,EAAMlC,IAAkB,QAATkC,GAA2B,SAATA,EAAkBthB,EAAMshB,GAAQlC,EAASpf,EAAMshB,GAAQlC,EACtH,SAASmC,GAAOhT,EAAKiT,GAClB,MAAMvB,EAAS,GACTwB,EAAYlT,EAAInV,OAASooB,EACzBZ,EAAMrS,EAAInV,OAChB,IAAIE,EAAI,EACR,KAAMA,EAAIsnB,EAAKtnB,GAAKmoB,EAChBxB,EAAO5lB,KAAKkU,EAAI/V,KAAKkE,MAAMpD,KAE/B,OAAO2mB,CACX,CACC,SAASyB,GAAoB1hB,EAAOU,EAAOihB,GACxC,MAAMvoB,EAAS4G,EAAMif,MAAM7lB,OACrBwoB,EAAappB,KAAKC,IAAIiI,EAAOtH,EAAS,GACtCV,EAAQsH,EAAM6hB,YACdzhB,EAAMJ,EAAM8hB,UACZC,EAAU,KAChB,IACI3C,EADA4C,EAAYhiB,EAAMiiB,gBAAgBL,GAEtC,KAAID,IAEIvC,EADW,IAAXhmB,EACSZ,KAAKmC,IAAIqnB,EAAYtpB,EAAO0H,EAAM4hB,GAC1B,IAAVthB,GACGV,EAAMiiB,gBAAgB,GAAKD,GAAa,GAExCA,EAAYhiB,EAAMiiB,gBAAgBL,EAAa,IAAM,EAEnEI,GAAaJ,EAAalhB,EAAQ0e,GAAUA,EACxC4C,EAAYtpB,EAAQqpB,GAAWC,EAAY5hB,EAAM2hB,IAIzD,OAAOC,CACX,CAcC,SAASE,GAAkBnjB,GACxB,OAAOA,EAAQojB,UAAYpjB,EAAQsgB,WAAa,CACpD,CACC,SAAS+C,GAAerjB,EAASsjB,GAC9B,IAAKtjB,EAAQua,QACT,OAAO,EAEX,MAAMgJ,GAAO,QAAOvjB,EAAQujB,KAAMD,GAC5BvK,GAAU,OAAU/Y,EAAQ+Y,SAElC,QADc,OAAQ/Y,EAAQwjB,MAAQxjB,EAAQwjB,KAAKnpB,OAAS,GAC7CkpB,EAAKE,WAAa1K,EAAQ9B,MAC7C,CAcA,SAASyM,GAAWC,EAAO3Q,EAAU5R,GACjC,IAAI4e,GAAM,QAAmB2D,GAI7B,OAHIviB,GAAwB,UAAb4R,IAAyB5R,GAAwB,UAAb4R,KAC/CgN,EA5Ea,CAAC2D,GAAkB,SAAVA,EAAmB,QAAoB,UAAVA,EAAoB,OAASA,EA4E1EC,CAAa5D,IAEhBA,CACX,CAwCA,MAAM6D,WAAcjE,GAChBxnB,YAAY8E,GACRyT,QACCtY,KAAKsL,GAAKzG,EAAIyG,GACdtL,KAAKW,KAAOkE,EAAIlE,KAChBX,KAAK2H,aAAUrH,EACfN,KAAKwM,IAAM3H,EAAI2H,IACfxM,KAAKQ,MAAQqE,EAAIrE,MACjBR,KAAK0T,SAAMpT,EACXN,KAAK4T,YAAStT,EACdN,KAAK6T,UAAOvT,EACZN,KAAK2T,WAAQrT,EACbN,KAAK0e,WAAQpe,EACbN,KAAK4e,YAASte,EACfN,KAAKyrB,SAAW,CACZ5X,KAAM,EACNF,MAAO,EACPD,IAAK,EACLE,OAAQ,GAEX5T,KAAK0rB,cAAWprB,EAChBN,KAAK2rB,eAAYrrB,EACjBN,KAAK4rB,gBAAatrB,EAClBN,KAAK6rB,mBAAgBvrB,EACrBN,KAAK8rB,iBAAcxrB,EACnBN,KAAK+rB,kBAAezrB,EACpBN,KAAKkL,UAAO5K,EACZN,KAAKgsB,mBAAgB1rB,EACtBN,KAAKqB,SAAMf,EACXN,KAAKuD,SAAMjD,EACXN,KAAKisB,YAAS3rB,EACbN,KAAK6nB,MAAQ,GACb7nB,KAAKksB,eAAiB,KACtBlsB,KAAKmsB,YAAc,KACnBnsB,KAAKosB,YAAc,KACpBpsB,KAAKooB,QAAU,EACfpoB,KAAKsoB,WAAa,EAClBtoB,KAAKqsB,kBAAoB,CAAC,EACzBrsB,KAAKyqB,iBAAcnqB,EACnBN,KAAK0qB,eAAYpqB,EAClBN,KAAKqa,gBAAiB,EACtBra,KAAKssB,cAAWhsB,EAChBN,KAAKusB,cAAWjsB,EAChBN,KAAKwsB,mBAAgBlsB,EACrBN,KAAKysB,mBAAgBnsB,EACrBN,KAAK0sB,aAAe,EACpB1sB,KAAK2sB,aAAe,EACpB3sB,KAAK4sB,OAAS,CAAC,EACf5sB,KAAK6sB,mBAAoB,EACzB7sB,KAAKoN,cAAW9M,CACpB,CACHwsB,KAAKnlB,GACE3H,KAAK2H,QAAUA,EAAQolB,WAAW/sB,KAAK8Q,cACvC9Q,KAAKkL,KAAOvD,EAAQuD,KACpBlL,KAAKusB,SAAWvsB,KAAKgR,MAAMrJ,EAAQtG,KACnCrB,KAAKssB,SAAWtsB,KAAKgR,MAAMrJ,EAAQpE,KACnCvD,KAAKysB,cAAgBzsB,KAAKgR,MAAMrJ,EAAQqlB,cACxChtB,KAAKwsB,cAAgBxsB,KAAKgR,MAAMrJ,EAAQslB,aAC5C,CACHjc,MAAM6D,EAAKvL,GACJ,OAAOuL,CACX,CACH7B,gBACO,IAAI,SAAEuZ,EAAS,SAAED,EAAS,cAAEG,EAAc,cAAED,GAAmBxsB,KAK/D,OAJAusB,GAAW,OAAgBA,EAAU9Z,OAAOC,mBAC5C4Z,GAAW,OAAgBA,EAAU7Z,OAAOE,mBAC5C8Z,GAAgB,OAAgBA,EAAeha,OAAOC,mBACtD8Z,GAAgB,OAAgBA,EAAe/Z,OAAOE,mBAC/C,CACHtR,KAAK,OAAgBkrB,EAAUE,GAC/BlpB,KAAK,OAAgB+oB,EAAUE,GAC/B1Z,YAAY,OAAeyZ,GAC3BxZ,YAAY,OAAeuZ,GAEnC,CACHla,UAAUC,GACH,IACIJ,GADA,IAAE5Q,EAAI,IAAEkC,EAAI,WAAEuP,EAAW,WAAEC,GAAgB/S,KAAKgT,gBAEpD,GAAIF,GAAcC,EACd,MAAO,CACH1R,MACAkC,OAGR,MAAM2pB,EAAQltB,KAAK0K,0BACnB,IAAI,IAAIxI,EAAI,EAAGmH,EAAO6jB,EAAMlrB,OAAQE,EAAImH,IAAQnH,EAC5C+P,EAAQib,EAAMhrB,GAAG0I,WAAWwH,UAAUpS,KAAMqS,GACvCS,IACDzR,EAAMD,KAAKC,IAAIA,EAAK4Q,EAAM5Q,MAEzB0R,IACDxP,EAAMnC,KAAKmC,IAAIA,EAAK0O,EAAM1O,MAKlC,OAFAlC,EAAM0R,GAAc1R,EAAMkC,EAAMA,EAAMlC,EACtCkC,EAAMuP,GAAczR,EAAMkC,EAAMlC,EAAMkC,EAC/B,CACHlC,KAAK,OAAgBA,GAAK,OAAgBkC,EAAKlC,IAC/CkC,KAAK,OAAgBA,GAAK,OAAgBlC,EAAKkC,IAEvD,CACH4b,aACO,MAAO,CACHtL,KAAM7T,KAAK8rB,aAAe,EAC1BpY,IAAK1T,KAAK4rB,YAAc,EACxBjY,MAAO3T,KAAK+rB,cAAgB,EAC5BnY,OAAQ5T,KAAK6rB,eAAiB,EAEtC,CACHsB,WACO,OAAOntB,KAAK6nB,KAChB,CACHnW,YACO,MAAMpC,EAAOtP,KAAKQ,MAAM8O,KACxB,OAAOtP,KAAK2H,QAAQ8J,SAAWzR,KAAKohB,eAAiB9R,EAAK8d,QAAU9d,EAAK+d,UAAY/d,EAAKmC,QAAU,EACxG,CACH6b,cAAclZ,EAAYpU,KAAKQ,MAAM4T,WAE9B,OADcpU,KAAKmsB,cAAgBnsB,KAAKmsB,YAAcnsB,KAAKutB,mBAAmBnZ,GAElF,CACA2N,eACI/hB,KAAK4sB,OAAS,CAAC,EACf5sB,KAAK6sB,mBAAoB,CAC7B,CACAW,gBACI,OAASxtB,KAAK2H,QAAQ6lB,aAAc,CAChCxtB,MAER,CACHgG,OAAO0lB,EAAUC,EAAW8B,GACrB,MAAM,YAAEC,EAAY,MAAEC,EAAQ9F,MAAOC,GAAc9nB,KAAK2H,QAClDimB,EAAa9F,EAAS8F,WAC5B5tB,KAAKwtB,eACLxtB,KAAK0rB,SAAWA,EAChB1rB,KAAK2rB,UAAYA,EACjB3rB,KAAKyrB,SAAWgC,EAAUzmB,OAAOa,OAAO,CACpCgM,KAAM,EACNF,MAAO,EACPD,IAAK,EACLE,OAAQ,GACT6Z,GACHztB,KAAK6nB,MAAQ,KACb7nB,KAAKosB,YAAc,KACnBpsB,KAAKksB,eAAiB,KACtBlsB,KAAKmsB,YAAc,KACnBnsB,KAAK6tB,sBACL7tB,KAAK8tB,gBACL9tB,KAAK+tB,qBACL/tB,KAAKsoB,WAAatoB,KAAKohB,eAAiBphB,KAAK0e,MAAQ+O,EAAQ5Z,KAAO4Z,EAAQ9Z,MAAQ3T,KAAK4e,OAAS6O,EAAQ/Z,IAAM+Z,EAAQ7Z,OACnH5T,KAAK6sB,oBACN7sB,KAAKguB,mBACLhuB,KAAKiuB,sBACLjuB,KAAKkuB,kBACLluB,KAAKisB,QAAS,OAAUjsB,KAAM2tB,EAAOD,GACrC1tB,KAAK6sB,mBAAoB,GAE7B7sB,KAAKmuB,mBACLnuB,KAAK6nB,MAAQ7nB,KAAKouB,cAAgB,GAClCpuB,KAAKquB,kBACL,MAAMC,EAAkBV,EAAa5tB,KAAK6nB,MAAM7lB,OAChDhC,KAAKuuB,sBAAsBD,EAAkBnE,GAAOnqB,KAAK6nB,MAAO+F,GAAc5tB,KAAK6nB,OACnF7nB,KAAK8G,YACL9G,KAAKwuB,+BACLxuB,KAAKyuB,yBACLzuB,KAAK0uB,8BACD5G,EAAS5F,UAAY4F,EAASF,UAAgC,SAApBE,EAAS6G,UACnD3uB,KAAK6nB,MAAQD,GAAS5nB,KAAMA,KAAK6nB,OACjC7nB,KAAKosB,YAAc,KACnBpsB,KAAK4uB,iBAELN,GACAtuB,KAAKuuB,sBAAsBvuB,KAAK6nB,OAEpC7nB,KAAK6uB,YACL7uB,KAAK8uB,MACL9uB,KAAK+uB,WACL/uB,KAAKgvB,aACT,CACHloB,YACO,IACImoB,EAAYC,EADZC,EAAgBnvB,KAAK2H,QAAQoB,QAE7B/I,KAAKohB,gBACL6N,EAAajvB,KAAK6T,KAClBqb,EAAWlvB,KAAK2T,QAEhBsb,EAAajvB,KAAK0T,IAClBwb,EAAWlvB,KAAK4T,OAChBub,GAAiBA,GAErBnvB,KAAKyqB,YAAcwE,EACnBjvB,KAAK0qB,UAAYwE,EACjBlvB,KAAKqa,eAAiB8U,EACtBnvB,KAAKooB,QAAU8G,EAAWD,EAC1BjvB,KAAKovB,eAAiBpvB,KAAK2H,QAAQ0nB,aACvC,CACAL,eACI,OAAShvB,KAAK2H,QAAQqnB,YAAa,CAC/BhvB,MAER,CACA6tB,uBACI,OAAS7tB,KAAK2H,QAAQkmB,oBAAqB,CACvC7tB,MAER,CACA8tB,gBACQ9tB,KAAKohB,gBACLphB,KAAK0e,MAAQ1e,KAAK0rB,SAClB1rB,KAAK6T,KAAO,EACZ7T,KAAK2T,MAAQ3T,KAAK0e,QAElB1e,KAAK4e,OAAS5e,KAAK2rB,UACnB3rB,KAAK0T,IAAM,EACX1T,KAAK4T,OAAS5T,KAAK4e,QAEvB5e,KAAK8rB,YAAc,EACnB9rB,KAAK4rB,WAAa,EAClB5rB,KAAK+rB,aAAe,EACpB/rB,KAAK6rB,cAAgB,CACzB,CACAkC,sBACI,OAAS/tB,KAAK2H,QAAQomB,mBAAoB,CACtC/tB,MAER,CACAsvB,WAAWC,GACPvvB,KAAKQ,MAAMgvB,cAAcD,EAAMvvB,KAAK8Q,eACpC,OAAS9Q,KAAK2H,QAAQ4nB,GAAO,CACzBvvB,MAER,CACAguB,mBACIhuB,KAAKsvB,WAAW,mBACpB,CACArB,sBAAuB,CACvBC,kBACIluB,KAAKsvB,WAAW,kBACpB,CACAnB,mBACInuB,KAAKsvB,WAAW,mBACpB,CACHlB,aACO,MAAO,EACX,CACAC,kBACIruB,KAAKsvB,WAAW,kBACpB,CACAG,+BACI,OAASzvB,KAAK2H,QAAQ8nB,4BAA6B,CAC/CzvB,MAER,CACH0vB,mBAAmB7H,GACZ,MAAMC,EAAW9nB,KAAK2H,QAAQkgB,MAC9B,IAAI3lB,EAAGmH,EAAM/G,EACb,IAAIJ,EAAI,EAAGmH,EAAOwe,EAAM7lB,OAAQE,EAAImH,EAAMnH,IACtCI,EAAOulB,EAAM3lB,GACbI,EAAK+Q,OAAQ,OAASyU,EAAS6H,SAAU,CACrCrtB,EAAKkG,MACLtG,EACA2lB,GACD7nB,KAEX,CACA4vB,8BACI,OAAS5vB,KAAK2H,QAAQioB,2BAA4B,CAC9C5vB,MAER,CACAwuB,gCACI,OAASxuB,KAAK2H,QAAQ6mB,6BAA8B,CAChDxuB,MAER,CACAyuB,yBACI,MAAM9mB,EAAU3H,KAAK2H,QACfmgB,EAAWngB,EAAQkgB,MACnBgI,EAAW7vB,KAAK6nB,MAAM7lB,OACtB8tB,EAAchI,EAASgI,aAAe,EACtCC,EAAcjI,EAASiI,YAC7B,IACIC,EAAWrE,EAAWsE,EADtBjE,EAAgB8D,EAEpB,IAAK9vB,KAAKkwB,eAAiBpI,EAAS5F,SAAW4N,GAAeC,GAAeF,GAAY,IAAM7vB,KAAKohB,eAEhG,YADAphB,KAAKgsB,cAAgB8D,GAGzB,MAAMK,EAAanwB,KAAKowB,iBAClBC,EAAgBF,EAAWG,OAAO5R,MAClC6R,EAAiBJ,EAAWK,QAAQ5R,OACpC8M,GAAW,OAAY1rB,KAAKQ,MAAMke,MAAQ2R,EAAe,EAAGrwB,KAAK0rB,UACvEsE,EAAYroB,EAAQqgB,OAAShoB,KAAK0rB,SAAWmE,EAAWnE,GAAYmE,EAAW,GAC3EQ,EAAgB,EAAIL,IACpBA,EAAYtE,GAAYmE,GAAYloB,EAAQqgB,OAAS,GAAM,IAC3D2D,EAAY3rB,KAAK2rB,UAAYb,GAAkBnjB,EAAQ8oB,MAAQ3I,EAASpH,QAAUsK,GAAerjB,EAAQ+oB,MAAO1wB,KAAKQ,MAAMmH,QAAQujB,MACnI+E,EAAmB7uB,KAAKya,KAAKwU,EAAgBA,EAAgBE,EAAiBA,GAC9EvE,GAAgB,OAAU5qB,KAAKC,IAAID,KAAKuvB,MAAK,QAAaR,EAAWK,QAAQ5R,OAAS,GAAKoR,GAAY,EAAG,IAAK5uB,KAAKuvB,MAAK,OAAYhF,EAAYsE,GAAmB,EAAG,IAAM7uB,KAAKuvB,MAAK,OAAYJ,EAAiBN,GAAmB,EAAG,MAC1OjE,EAAgB5qB,KAAKmC,IAAIusB,EAAa1uB,KAAKC,IAAI0uB,EAAa/D,KAEhEhsB,KAAKgsB,cAAgBA,CACzB,CACA0C,+BACI,OAAS1uB,KAAK2H,QAAQ+mB,4BAA6B,CAC/C1uB,MAER,CACA4uB,gBAAiB,CACjBC,aACI,OAAS7uB,KAAK2H,QAAQknB,UAAW,CAC7B7uB,MAER,CACA8uB,MACI,MAAM8B,EAAU,CACZlS,MAAO,EACPE,OAAQ,IAEN,MAAEpe,EAAQmH,SAAWkgB,MAAOC,EAAW4I,MAAOG,EAAYJ,KAAMK,IAAiB9wB,KACjFkiB,EAAUliB,KAAKkwB,aACf9O,EAAephB,KAAKohB,eAC1B,GAAIc,EAAS,CACT,MAAM6O,EAAc/F,GAAe6F,EAAWrwB,EAAMmH,QAAQujB,MAQ5D,GAPI9J,GACAwP,EAAQlS,MAAQ1e,KAAK0rB,SACrBkF,EAAQhS,OAASkM,GAAkBgG,GAAYC,IAE/CH,EAAQhS,OAAS5e,KAAK2rB,UACtBiF,EAAQlS,MAAQoM,GAAkBgG,GAAYC,GAE9CjJ,EAAS5F,SAAWliB,KAAK6nB,MAAM7lB,OAAQ,CACvC,MAAM,MAAEgnB,EAAM,KAAEC,EAAK,OAAEqH,EAAO,QAAEE,GAAaxwB,KAAKowB,iBAC5CY,EAAiC,EAAnBlJ,EAASpH,QACvBuQ,GAAe,IAAAzd,GAAUxT,KAAKgsB,eAC9BkF,EAAM9vB,KAAK8vB,IAAID,GACfE,EAAM/vB,KAAK+vB,IAAIF,GACrB,GAAI7P,EAAc,CACd,MAAMgQ,EAActJ,EAASuJ,OAAS,EAAIF,EAAMb,EAAO5R,MAAQwS,EAAMV,EAAQ5R,OAC7EgS,EAAQhS,OAASxd,KAAKC,IAAIrB,KAAK2rB,UAAWiF,EAAQhS,OAASwS,EAAcJ,EAC7E,KAAO,CACH,MAAMM,EAAaxJ,EAASuJ,OAAS,EAAIH,EAAMZ,EAAO5R,MAAQyS,EAAMX,EAAQ5R,OAC5EgS,EAAQlS,MAAQtd,KAAKC,IAAIrB,KAAK0rB,SAAUkF,EAAQlS,MAAQ4S,EAAaN,EACzE,CACAhxB,KAAKuxB,kBAAkBvI,EAAOC,EAAMkI,EAAKD,EAC7C,CACJ,CACAlxB,KAAKwxB,iBACDpQ,GACAphB,KAAK0e,MAAQ1e,KAAKooB,QAAU5nB,EAAMke,MAAQ1e,KAAKyrB,SAAS5X,KAAO7T,KAAKyrB,SAAS9X,MAC7E3T,KAAK4e,OAASgS,EAAQhS,SAEtB5e,KAAK0e,MAAQkS,EAAQlS,MACrB1e,KAAK4e,OAAS5e,KAAKooB,QAAU5nB,EAAMoe,OAAS5e,KAAKyrB,SAAS/X,IAAM1T,KAAKyrB,SAAS7X,OAEtF,CACA2d,kBAAkBvI,EAAOC,EAAMkI,EAAKD,GAChC,MAAQrJ,OAAO,MAAEyD,EAAM,QAAE5K,GAAW,SAAE/F,GAAc3a,KAAK2H,QACnD8pB,EAAmC,IAAvBzxB,KAAKgsB,cACjB0F,EAAgC,QAAb/W,GAAoC,MAAd3a,KAAKkL,KACpD,GAAIlL,KAAKohB,eAAgB,CACrB,MAAMuQ,EAAa3xB,KAAK6qB,gBAAgB,GAAK7qB,KAAK6T,KAC5C+d,EAAc5xB,KAAK2T,MAAQ3T,KAAK6qB,gBAAgB7qB,KAAK6nB,MAAM7lB,OAAS,GAC1E,IAAI8pB,EAAc,EACdC,EAAe,EACf0F,EACIC,GACA5F,EAAcoF,EAAMlI,EAAMtK,MAC1BqN,EAAeoF,EAAMlI,EAAKrK,SAE1BkN,EAAcqF,EAAMnI,EAAMpK,OAC1BmN,EAAemF,EAAMjI,EAAKvK,OAEb,UAAV4M,EACPS,EAAe9C,EAAKvK,MACH,QAAV4M,EACPQ,EAAc9C,EAAMtK,MACH,UAAV4M,IACPQ,EAAc9C,EAAMtK,MAAQ,EAC5BqN,EAAe9C,EAAKvK,MAAQ,GAEhC1e,KAAK8rB,YAAc1qB,KAAKmC,KAAKuoB,EAAc6F,EAAajR,GAAW1gB,KAAK0e,OAAS1e,KAAK0e,MAAQiT,GAAa,GAC3G3xB,KAAK+rB,aAAe3qB,KAAKmC,KAAKwoB,EAAe6F,EAAclR,GAAW1gB,KAAK0e,OAAS1e,KAAK0e,MAAQkT,GAAc,EACnH,KAAO,CACH,IAAIhG,EAAa3C,EAAKrK,OAAS,EAC3BiN,EAAgB7C,EAAMpK,OAAS,EACrB,UAAV0M,GACAM,EAAa,EACbC,EAAgB7C,EAAMpK,QACL,QAAV0M,IACPM,EAAa3C,EAAKrK,OAClBiN,EAAgB,GAEpB7rB,KAAK4rB,WAAaA,EAAalL,EAC/B1gB,KAAK6rB,cAAgBA,EAAgBnL,CACzC,CACJ,CACH8Q,iBACWxxB,KAAKyrB,WACLzrB,KAAKyrB,SAAS5X,KAAOzS,KAAKmC,IAAIvD,KAAK8rB,YAAa9rB,KAAKyrB,SAAS5X,MAC9D7T,KAAKyrB,SAAS/X,IAAMtS,KAAKmC,IAAIvD,KAAK4rB,WAAY5rB,KAAKyrB,SAAS/X,KAC5D1T,KAAKyrB,SAAS9X,MAAQvS,KAAKmC,IAAIvD,KAAK+rB,aAAc/rB,KAAKyrB,SAAS9X,OAChE3T,KAAKyrB,SAAS7X,OAASxS,KAAKmC,IAAIvD,KAAK6rB,cAAe7rB,KAAKyrB,SAAS7X,QAE1E,CACAmb,YACI,OAAS/uB,KAAK2H,QAAQonB,SAAU,CAC5B/uB,MAER,CACHohB,eACO,MAAM,KAAElW,EAAK,SAAEyP,GAAc3a,KAAK2H,QAClC,MAAoB,QAAbgT,GAAmC,WAAbA,GAAkC,MAATzP,CAC1D,CACH2mB,aACO,OAAO7xB,KAAK2H,QAAQ6W,QACxB,CACH+P,sBAAsB1G,GAGf,IAAI3lB,EAAGmH,EACP,IAHArJ,KAAKyvB,8BACLzvB,KAAK0vB,mBAAmB7H,GAEpB3lB,EAAI,EAAGmH,EAAOwe,EAAM7lB,OAAQE,EAAImH,EAAMnH,KAClC,OAAc2lB,EAAM3lB,GAAGmR,SACvBwU,EAAMvQ,OAAOpV,EAAG,GAChBmH,IACAnH,KAGRlC,KAAK4vB,4BACT,CACHQ,iBACO,IAAID,EAAanwB,KAAKosB,YACtB,IAAK+D,EAAY,CACb,MAAMvC,EAAa5tB,KAAK2H,QAAQkgB,MAAM+F,WACtC,IAAI/F,EAAQ7nB,KAAK6nB,MACb+F,EAAa/F,EAAM7lB,SACnB6lB,EAAQsC,GAAOtC,EAAO+F,IAE1B5tB,KAAKosB,YAAc+D,EAAanwB,KAAK8xB,mBAAmBjK,EAAOA,EAAM7lB,OACzE,CACA,OAAOmuB,CACX,CACH2B,mBAAmBjK,EAAO7lB,GACnB,MAAM,IAAEwK,EAAM6f,kBAAmB0F,GAAY/xB,KACvCgyB,EAAS,GACTC,EAAU,GAChB,IAEI/vB,EAAG4Y,EAAGoX,EAAM7e,EAAO8e,EAAUC,EAAYld,EAAOkW,EAAY1M,EAAOE,EAAQyT,EAF3EC,EAAkB,EAClBC,EAAmB,EAEvB,IAAIrwB,EAAI,EAAGA,EAAIF,IAAUE,EAAE,CAUvB,GATAmR,EAAQwU,EAAM3lB,GAAGmR,MACjB8e,EAAWnyB,KAAKwyB,wBAAwBtwB,GACxCsK,EAAI0e,KAAOkH,EAAaD,EAASM,OACjCvd,EAAQ6c,EAAOK,GAAcL,EAAOK,IAAe,CAC/C9iB,KAAM,CAAC,EACPojB,GAAI,IAERtH,EAAa+G,EAAS/G,WACtB1M,EAAQE,EAAS,GACZ,OAAcvL,KAAW,OAAQA,IAG/B,IAAI,OAAQA,GACf,IAAIyH,EAAI,EAAGoX,EAAO7e,EAAMrR,OAAQ8Y,EAAIoX,IAAQpX,EACxCuX,EAAchf,EAAMyH,IACf,OAAcuX,KAAiB,OAAQA,KACxC3T,GAAQ,OAAalS,EAAK0I,EAAM5F,KAAM4F,EAAMwd,GAAIhU,EAAO2T,GACvDzT,GAAUwM,QAPlB1M,GAAQ,OAAalS,EAAK0I,EAAM5F,KAAM4F,EAAMwd,GAAIhU,EAAOrL,GACvDuL,EAASwM,EAUb4G,EAAO/uB,KAAKyb,GACZuT,EAAQhvB,KAAK2b,GACb0T,EAAkBlxB,KAAKmC,IAAImb,EAAO4T,GAClCC,EAAmBnxB,KAAKmC,IAAIqb,EAAQ2T,EACxC,EA5iBP,SAAwBR,EAAQ/vB,IAC7B,OAAK+vB,GAAS7c,IACV,MAAMwd,EAAKxd,EAAMwd,GACXC,EAAQD,EAAG1wB,OAAS,EAC1B,IAAIE,EACJ,GAAIywB,EAAQ3wB,EAAQ,CAChB,IAAIE,EAAI,EAAGA,EAAIywB,IAASzwB,SACbgT,EAAM5F,KAAKojB,EAAGxwB,IAEzBwwB,EAAGpb,OAAO,EAAGqb,EACjB,IAER,CAiiBQC,CAAeb,EAAQ/vB,GACvB,MAAMsuB,EAAS0B,EAAOzW,QAAQ+W,GACxB9B,EAAUyB,EAAQ1W,QAAQgX,GAC1BM,EAAWC,IAAM,CACfpU,MAAOsT,EAAOc,IAAQ,EACtBlU,OAAQqT,EAAQa,IAAQ,IAEhC,MAAO,CACH9J,MAAO6J,EAAQ,GACf5J,KAAM4J,EAAQ7wB,EAAS,GACvBsuB,OAAQuC,EAAQvC,GAChBE,QAASqC,EAAQrC,GACjBwB,SACAC,UAER,CACH3e,iBAAiB9K,GACV,OAAOA,CACX,CACHgR,iBAAiBhR,EAAOc,GACjB,OAAO6I,GACX,CACH4gB,iBAAiBC,GAAQ,CACzBnI,gBAAgBvhB,GACT,MAAMue,EAAQ7nB,KAAK6nB,MACnB,OAAIve,EAAQ,GAAKA,EAAQue,EAAM7lB,OAAS,EAC7B,KAEJhC,KAAKwZ,iBAAiBqO,EAAMve,GAAOd,MAC9C,CACHyqB,mBAAmBC,GACRlzB,KAAKqa,iBACL6Y,EAAU,EAAIA,GAElB,MAAMF,EAAQhzB,KAAKyqB,YAAcyI,EAAUlzB,KAAKooB,QAChD,OAAO,OAAYpoB,KAAKovB,gBAAiB,OAAYpvB,KAAKQ,MAAOwyB,EAAO,GAAKA,EACjF,CACHG,mBAAmBH,GACZ,MAAME,GAAWF,EAAQhzB,KAAKyqB,aAAezqB,KAAKooB,QAClD,OAAOpoB,KAAKqa,eAAiB,EAAI6Y,EAAUA,CAC/C,CACHxZ,eACO,OAAO1Z,KAAKwZ,iBAAiBxZ,KAAKozB,eACtC,CACHA,eACO,MAAM,IAAE/xB,EAAI,IAAEkC,GAASvD,KACvB,OAAOqB,EAAM,GAAKkC,EAAM,EAAIA,EAAMlC,EAAM,GAAKkC,EAAM,EAAIlC,EAAM,CACjE,CACHyP,WAAWxH,GACJ,MAAMue,EAAQ7nB,KAAK6nB,OAAS,GAC5B,GAAIve,GAAS,GAAKA,EAAQue,EAAM7lB,OAAQ,CACpC,MAAMM,EAAOulB,EAAMve,GACnB,OAAOhH,EAAK8K,WAAa9K,EAAK8K,SAlkB1C,SAA2BuH,EAAQrL,EAAOhH,GACtC,OAAO,OAAcqS,EAAQ,CACzBrS,OACAgH,QACA3I,KAAM,QAEd,CA4jBqD0yB,CAAkBrzB,KAAK8Q,aAAcxH,EAAOhH,GACzF,CACA,OAAOtC,KAAKoN,WAAapN,KAAKoN,UA1kBVuH,EA0kBwC3U,KAAKQ,MAAMsQ,aA1kB3ClI,EA0kByD5I,MAzkBlF,OAAc2U,EAAQ,CACzB/L,QACAjI,KAAM,YAHd,IAA4BgU,EAAQ/L,CA2kBhC,CACHsf,YACO,MAAMoL,EAActzB,KAAK2H,QAAQkgB,MAC3B0L,GAAM,IAAA/f,GAAUxT,KAAKgsB,eACrBkF,EAAM9vB,KAAKwY,IAAIxY,KAAK8vB,IAAIqC,IACxBpC,EAAM/vB,KAAKwY,IAAIxY,KAAK+vB,IAAIoC,IACxBpD,EAAanwB,KAAKowB,iBAClB1P,EAAU4S,EAAYE,iBAAmB,EACzC/T,EAAI0Q,EAAaA,EAAWG,OAAO5R,MAAQgC,EAAU,EACrDf,EAAIwQ,EAAaA,EAAWK,QAAQ5R,OAAS8B,EAAU,EAC7D,OAAO1gB,KAAKohB,eAAiBzB,EAAIuR,EAAMzR,EAAI0R,EAAM1R,EAAIyR,EAAMvR,EAAIwR,EAAMxR,EAAIwR,EAAM1R,EAAIyR,EAAMvR,EAAIuR,EAAMzR,EAAI0R,CAC3G,CACHjB,aACO,MAAMhO,EAAUliB,KAAK2H,QAAQua,QAC7B,MAAgB,SAAZA,IACSA,EAENliB,KAAK0K,0BAA0B1I,OAAS,CACnD,CACHyxB,sBAAsBrf,GACf,MAAMlJ,EAAOlL,KAAKkL,KACZ1K,EAAQR,KAAKQ,MACbmH,EAAU3H,KAAK2H,SACf,KAAE8oB,EAAK,SAAE9V,EAAS,OAAEd,GAAYlS,EAChCqgB,EAASyI,EAAKzI,OACd5G,EAAephB,KAAKohB,eAEpBsS,EADQ1zB,KAAK6nB,MACO7lB,QAAUgmB,EAAS,EAAI,GAC3C2L,EAAK7I,GAAkB2F,GACvB1uB,EAAQ,GACR6xB,EAAa/Z,EAAOkT,WAAW/sB,KAAK8Q,cACpC+iB,EAAYD,EAAW1R,QAAU0R,EAAWlV,MAAQ,EACpDoV,EAAgBD,EAAY,EAC5BE,EAAmB,SAASf,GAC9B,OAAO,OAAYxyB,EAAOwyB,EAAOa,EACrC,EACA,IAAIG,EAAa9xB,EAAG0oB,EAAWqJ,EAC3BC,EAAKC,EAAKC,EAAKC,EAAKC,EAAIC,EAAIC,EAAIC,EACpC,GAAiB,QAAb9Z,EACAqZ,EAAcD,EAAiB/zB,KAAK4T,QACpCugB,EAAMn0B,KAAK4T,OAAS+f,EACpBU,EAAML,EAAcF,EACpBS,EAAKR,EAAiB3f,EAAUV,KAAOogB,EACvCW,EAAKrgB,EAAUR,YACZ,GAAiB,WAAb+G,EACPqZ,EAAcD,EAAiB/zB,KAAK0T,KACpC6gB,EAAKngB,EAAUV,IACf+gB,EAAKV,EAAiB3f,EAAUR,QAAUkgB,EAC1CK,EAAMH,EAAcF,EACpBO,EAAMr0B,KAAK0T,IAAMigB,OACd,GAAiB,SAAbhZ,EACPqZ,EAAcD,EAAiB/zB,KAAK2T,OACpCugB,EAAMl0B,KAAK2T,MAAQggB,EACnBS,EAAMJ,EAAcF,EACpBQ,EAAKP,EAAiB3f,EAAUP,MAAQigB,EACxCU,EAAKpgB,EAAUT,WACZ,GAAiB,UAAbgH,EACPqZ,EAAcD,EAAiB/zB,KAAK6T,MACpCygB,EAAKlgB,EAAUP,KACf2gB,EAAKT,EAAiB3f,EAAUT,OAASmgB,EACzCI,EAAMF,EAAcF,EACpBM,EAAMp0B,KAAK6T,KAAO8f,OACf,GAAa,MAATzoB,EAAc,CACrB,GAAiB,WAAbyP,EACAqZ,EAAcD,GAAkB3f,EAAUV,IAAMU,EAAUR,QAAU,EAAI,SACrE,IAAI,IAAA1R,GAASyY,GAAW,CAC3B,MAAM+Z,EAAiB1tB,OAAOC,KAAK0T,GAAU,GACvCnS,EAAQmS,EAAS+Z,GACvBV,EAAcD,EAAiB/zB,KAAKQ,MAAMoL,OAAO8oB,GAAgBlb,iBAAiBhR,GACtF,CACA+rB,EAAKngB,EAAUV,IACf+gB,EAAKrgB,EAAUR,OACfugB,EAAMH,EAAcF,EACpBO,EAAMF,EAAMR,CAChB,MAAO,GAAa,MAATzoB,EAAc,CACrB,GAAiB,WAAbyP,EACAqZ,EAAcD,GAAkB3f,EAAUP,KAAOO,EAAUT,OAAS,QACjE,IAAI,IAAAzR,GAASyY,GAAW,CAC3B,MAAMga,EAAkB3tB,OAAOC,KAAK0T,GAAU,GACxCia,EAASja,EAASga,GACxBX,EAAcD,EAAiB/zB,KAAKQ,MAAMoL,OAAO+oB,GAAiBnb,iBAAiBob,GACvF,CACAV,EAAMF,EAAcF,EACpBM,EAAMF,EAAMP,EACZW,EAAKlgB,EAAUP,KACf2gB,EAAKpgB,EAAUT,KACnB,CACA,MAAMkhB,GAAQ,IAAArmB,GAAe7G,EAAQkgB,MAAMY,cAAeiL,GACpDoB,EAAO1zB,KAAKmC,IAAI,EAAGnC,KAAKioB,KAAKqK,EAAcmB,IACjD,IAAI3yB,EAAI,EAAGA,EAAIwxB,EAAaxxB,GAAK4yB,EAAK,CAClC,MAAMpgB,EAAU1U,KAAK8Q,WAAW5O,GAC1B6yB,EAActE,EAAK1D,WAAWrY,GAC9BsgB,EAAoBnb,EAAOkT,WAAWrY,GACtCugB,EAAYF,EAAYE,UACxBC,EAAYH,EAAY3wB,MACxB+wB,EAAaH,EAAkBI,MAAQ,GACvCC,EAAmBL,EAAkBM,WACrCtF,EAAY+E,EAAY/E,UACxBuF,EAAYR,EAAYQ,UACxBC,EAAiBT,EAAYS,gBAAkB,GAC/CC,EAAuBV,EAAYU,qBACzC7K,EAAYN,GAAoBtqB,KAAMkC,EAAG8lB,QACvB1nB,IAAdsqB,IAGJqJ,GAAmB,OAAYzzB,EAAOoqB,EAAWqK,GAC7C7T,EACA8S,EAAME,EAAME,EAAKE,EAAKP,EAEtBE,EAAME,EAAME,EAAKE,EAAKR,EAE1BlyB,EAAMkB,KAAK,CACPixB,MACAC,MACAC,MACAC,MACAC,KACAC,KACAC,KACAC,KACA/V,MAAOuW,EACP7wB,MAAO8wB,EACPC,aACAE,mBACArF,YACAuF,YACAC,iBACAC,yBAER,CAGA,OAFAz1B,KAAK0sB,aAAegH,EACpB1zB,KAAK2sB,aAAeqH,EACbjyB,CACX,CACHwrB,mBAAmBnZ,GACZ,MAAMlJ,EAAOlL,KAAKkL,KACZvD,EAAU3H,KAAK2H,SACf,SAAEgT,EAAWkN,MAAOyL,GAAiB3rB,EACrCyZ,EAAephB,KAAKohB,eACpByG,EAAQ7nB,KAAK6nB,OACb,MAAEyD,EAAM,WAAEoK,EAAW,QAAEhV,EAAQ,OAAE2Q,GAAYiC,EAC7CK,EAAK7I,GAAkBnjB,EAAQ8oB,MAC/BkF,EAAiBhC,EAAKjT,EACtBkV,EAAkBvE,GAAU3Q,EAAUiV,EACtCE,IAAY,IAAAriB,GAAUxT,KAAKgsB,eAC3BjqB,EAAQ,GACd,IAAIG,EAAGmH,EAAM/G,EAAM+Q,EAAOjF,EAAGC,EAAGynB,EAAW9C,EAAO9H,EAAME,EAAY2K,EAAWC,EAC3EC,EAAe,SACnB,GAAiB,QAAbtb,EACAtM,EAAIrO,KAAK4T,OAASgiB,EAClBE,EAAY91B,KAAKk2B,+BACd,GAAiB,WAAbvb,EACPtM,EAAIrO,KAAK0T,IAAMkiB,EACfE,EAAY91B,KAAKk2B,+BACd,GAAiB,SAAbvb,EAAqB,CAC5B,MAAMgN,EAAM3nB,KAAKm2B,wBAAwBxC,GACzCmC,EAAYnO,EAAImO,UAChB1nB,EAAIuZ,EAAIvZ,CACZ,MAAO,GAAiB,UAAbuM,EAAsB,CAC7B,MAAMyb,EAAOp2B,KAAKm2B,wBAAwBxC,GAC1CmC,EAAYM,EAAKN,UACjB1nB,EAAIgoB,EAAKhoB,CACb,MAAO,GAAa,MAATlD,EAAc,CACrB,GAAiB,WAAbyP,EACAtM,GAAK+F,EAAUV,IAAMU,EAAUR,QAAU,EAAI+hB,OAC1C,IAAI,IAAAzzB,GAASyY,GAAW,CAC3B,MAAM+Z,EAAiB1tB,OAAOC,KAAK0T,GAAU,GACvCnS,EAAQmS,EAAS+Z,GACvBrmB,EAAIrO,KAAKQ,MAAMoL,OAAO8oB,GAAgBlb,iBAAiBhR,GAASmtB,CACpE,CACAG,EAAY91B,KAAKk2B,yBACrB,MAAO,GAAa,MAAThrB,EAAc,CACrB,GAAiB,WAAbyP,EACAvM,GAAKgG,EAAUP,KAAOO,EAAUT,OAAS,EAAIgiB,OAC1C,IAAI,IAAAzzB,GAASyY,GAAW,CAC3B,MAAMga,EAAkB3tB,OAAOC,KAAK0T,GAAU,GACxCia,EAASja,EAASga,GACxBvmB,EAAIpO,KAAKQ,MAAMoL,OAAO+oB,GAAiBnb,iBAAiBob,EAC5D,CACAkB,EAAY91B,KAAKm2B,wBAAwBxC,GAAImC,SACjD,CACa,MAAT5qB,IACc,UAAVogB,EACA2K,EAAe,MACE,QAAV3K,IACP2K,EAAe,WAGvB,MAAM9F,EAAanwB,KAAKowB,iBACxB,IAAIluB,EAAI,EAAGmH,EAAOwe,EAAM7lB,OAAQE,EAAImH,IAAQnH,EAAE,CAC1CI,EAAOulB,EAAM3lB,GACbmR,EAAQ/Q,EAAK+Q,MACb,MAAM0hB,EAAczB,EAAYvG,WAAW/sB,KAAK8Q,WAAW5O,IAC3D8wB,EAAQhzB,KAAK6qB,gBAAgB3oB,GAAKoxB,EAAY+C,YAC9CnL,EAAOlrB,KAAKwyB,wBAAwBtwB,GACpCkpB,EAAaF,EAAKE,WAClB2K,GAAY,OAAQ1iB,GAASA,EAAMrR,OAAS,EAC5C,MAAMs0B,EAAYP,EAAY,EACxB3xB,EAAQ2wB,EAAY3wB,MACpBmyB,EAAcxB,EAAYyB,gBAC1BC,EAAc1B,EAAY2B,gBAChC,IAuCIC,EAvCAC,EAAgBd,EAwCpB,GAvCI1U,GACAhT,EAAI4kB,EACc,UAAd8C,IAEIc,EADA10B,IAAMmH,EAAO,EACIrJ,KAAK2H,QAAQoB,QAAoB,OAAV,QAC3B,IAAN7G,EACUlC,KAAK2H,QAAQoB,QAAmB,QAAT,OAExB,UAKhBitB,EAFS,QAAbrb,EACmB,SAAf+a,GAAsC,IAAbG,GACXE,EAAY3K,EAAaA,EAAa,EAC9B,WAAfsK,GACOvF,EAAWK,QAAQ5R,OAAS,EAAI0X,EAAYlL,EAAaA,GAEzD+E,EAAWK,QAAQ5R,OAASwM,EAAa,EAGxC,SAAfsK,GAAsC,IAAbG,EACZzK,EAAa,EACJ,WAAfsK,EACMvF,EAAWK,QAAQ5R,OAAS,EAAI0X,EAAYlL,EAE5C+E,EAAWK,QAAQ5R,OAASmX,EAAY3K,EAGzDiG,IACA2E,IAAe,GAEF,IAAbH,GAAmBd,EAAY8B,oBAC/BzoB,GAAKgd,EAAa,EAAIhqB,KAAK+vB,IAAI0E,MAGnCxnB,EAAI2kB,EACJgD,GAAc,EAAID,GAAa3K,EAAa,GAG5C2J,EAAY8B,kBAAmB,CAC/B,MAAMC,GAAe,OAAU/B,EAAYgC,iBACrCnY,EAASuR,EAAW8B,QAAQ/vB,GAC5Bwc,EAAQyR,EAAW6B,OAAO9vB,GAChC,IAAIwR,EAAMsiB,EAAac,EAAapjB,IAChCG,EAAO,EAAIijB,EAAajjB,KAC5B,OAAOoiB,GACH,IAAK,SACDviB,GAAOkL,EAAS,EAChB,MACJ,IAAK,SACDlL,GAAOkL,EAGf,OAAOkX,GACH,IAAK,SACDjiB,GAAQ6K,EAAQ,EAChB,MACJ,IAAK,QACD7K,GAAQ6K,EAGhBiY,EAAW,CACP9iB,OACAH,MACAgL,MAAOA,EAAQoY,EAAapY,MAC5BE,OAAQA,EAASkY,EAAalY,OAC9Bxa,MAAO2wB,EAAYiC,cAE3B,CACAj1B,EAAMkB,KAAK,CACPoQ,QACA6X,OACA8K,aACAruB,QAAS,CACLkuB,WACAzxB,QACAmyB,cACAE,cACAX,UAAWc,EACXX,eACAgB,YAAa,CACT7oB,EACAC,GAEJsoB,aAGZ,CACA,OAAO50B,CACX,CACAm0B,0BACI,MAAM,SAAEvb,EAAS,MAAEkN,GAAW7nB,KAAK2H,QAEnC,KADkB,IAAA6L,GAAUxT,KAAKgsB,eAE7B,MAAoB,QAAbrR,EAAqB,OAAS,QAEzC,IAAI2Q,EAAQ,SAQZ,MAPoB,UAAhBzD,EAAMyD,MACNA,EAAQ,OACe,QAAhBzD,EAAMyD,MACbA,EAAQ,QACe,UAAhBzD,EAAMyD,QACbA,EAAQ,SAELA,CACX,CACA6K,wBAAwBxC,GACpB,MAAM,SAAEhZ,EAAWkN,OAAO,WAAE6N,EAAW,OAAErE,EAAO,QAAE3Q,IAAgB1gB,KAAK2H,QAEjEguB,EAAiBhC,EAAKjT,EACtB4P,EAFatwB,KAAKowB,iBAEEE,OAAO5R,MACjC,IAAIoX,EACA1nB,EAoDJ,MAnDiB,SAAbuM,EACI0W,GACAjjB,EAAIpO,KAAK2T,MAAQ+M,EACE,SAAfgV,EACAI,EAAY,OACU,WAAfJ,GACPI,EAAY,SACZ1nB,GAAKkiB,EAAS,IAEdwF,EAAY,QACZ1nB,GAAKkiB,KAGTliB,EAAIpO,KAAK2T,MAAQgiB,EACE,SAAfD,EACAI,EAAY,QACU,WAAfJ,GACPI,EAAY,SACZ1nB,GAAKkiB,EAAS,IAEdwF,EAAY,OACZ1nB,EAAIpO,KAAK6T,OAGG,UAAb8G,EACH0W,GACAjjB,EAAIpO,KAAK6T,KAAO6M,EACG,SAAfgV,EACAI,EAAY,QACU,WAAfJ,GACPI,EAAY,SACZ1nB,GAAKkiB,EAAS,IAEdwF,EAAY,OACZ1nB,GAAKkiB,KAGTliB,EAAIpO,KAAK6T,KAAO8hB,EACG,SAAfD,EACAI,EAAY,OACU,WAAfJ,GACPI,EAAY,SACZ1nB,GAAKkiB,EAAS,IAEdwF,EAAY,QACZ1nB,EAAIpO,KAAK2T,QAIjBmiB,EAAY,QAET,CACHA,YACA1nB,IAER,CACH8oB,oBACO,GAAIl3B,KAAK2H,QAAQkgB,MAAMwJ,OACnB,OAEJ,MAAM7wB,EAAQR,KAAKQ,MACbma,EAAW3a,KAAK2H,QAAQgT,SAC9B,MAAiB,SAAbA,GAAoC,UAAbA,EAChB,CACHjH,IAAK,EACLG,KAAM7T,KAAK6T,KACXD,OAAQpT,EAAMoe,OACdjL,MAAO3T,KAAK2T,OAGH,QAAbgH,GAAmC,WAAbA,EACf,CACHjH,IAAK1T,KAAK0T,IACVG,KAAM,EACND,OAAQ5T,KAAK4T,OACbD,MAAOnT,EAAMke,YALrB,CAQJ,CACHyY,iBACO,MAAM,IAAE3qB,EAAM7E,SAAS,gBAAEyvB,GAAmB,KAAEvjB,EAAK,IAAEH,EAAI,MAAEgL,EAAM,OAAEE,GAAY5e,KAC3Eo3B,IACA5qB,EAAI6qB,OACJ7qB,EAAI8qB,UAAYF,EAChB5qB,EAAI+qB,SAAS1jB,EAAMH,EAAKgL,EAAOE,GAC/BpS,EAAIgrB,UAEZ,CACAC,qBAAqBjvB,GACjB,MAAMioB,EAAOzwB,KAAK2H,QAAQ8oB,KAC1B,IAAKzwB,KAAKkwB,eAAiBO,EAAKvO,QAC5B,OAAO,EAEX,MACM5Y,EADQtJ,KAAK6nB,MACC6P,WAAWlkB,GAAIA,EAAEhL,QAAUA,IAC/C,GAAIc,GAAS,EAAG,CAEZ,OADamnB,EAAK1D,WAAW/sB,KAAK8Q,WAAWxH,IACjC2rB,SAChB,CACA,OAAO,CACX,CACH0C,SAASvjB,GACF,MAAMqc,EAAOzwB,KAAK2H,QAAQ8oB,KACpBjkB,EAAMxM,KAAKwM,IACXzK,EAAQ/B,KAAKksB,iBAAmBlsB,KAAKksB,eAAiBlsB,KAAKyzB,sBAAsBrf,IACvF,IAAIlS,EAAGmH,EACP,MAAMuuB,EAAW,CAACC,EAAIC,EAAItR,KACjBA,EAAM9H,OAAU8H,EAAMpiB,QAG3BoI,EAAI6qB,OACJ7qB,EAAIyoB,UAAYzO,EAAM9H,MACtBlS,EAAIurB,YAAcvR,EAAMpiB,MACxBoI,EAAIwrB,YAAYxR,EAAM2O,YAAc,IACpC3oB,EAAIyrB,eAAiBzR,EAAM6O,iBAC3B7oB,EAAI0rB,YACJ1rB,EAAI2rB,OAAON,EAAGzpB,EAAGypB,EAAGxpB,GACpB7B,EAAI4rB,OAAON,EAAG1pB,EAAG0pB,EAAGzpB,GACpB7B,EAAI6rB,SACJ7rB,EAAIgrB,UAAS,EAEjB,GAAI/G,EAAKvO,QACL,IAAIhgB,EAAI,EAAGmH,EAAOtH,EAAMC,OAAQE,EAAImH,IAAQnH,EAAE,CAC1C,MAAMD,EAAOF,EAAMG,GACfuuB,EAAK6H,iBACLV,EAAS,CACLxpB,EAAGnM,EAAKqyB,GACRjmB,EAAGpM,EAAKsyB,IACT,CACCnmB,EAAGnM,EAAKuyB,GACRnmB,EAAGpM,EAAKwyB,IACTxyB,GAEHwuB,EAAK1F,WACL6M,EAAS,CACLxpB,EAAGnM,EAAKiyB,IACR7lB,EAAGpM,EAAKkyB,KACT,CACC/lB,EAAGnM,EAAKmyB,IACR/lB,EAAGpM,EAAKoyB,KACT,CACCjwB,MAAOnC,EAAKszB,UACZ7W,MAAOzc,EAAK+tB,UACZmF,WAAYlzB,EAAKuzB,eACjBH,iBAAkBpzB,EAAKwzB,sBAGnC,CAER,CACH8C,aACO,MAAM,MAAE/3B,EAAM,IAAEgM,EAAM7E,SAAS,OAAEkS,EAAO,KAAE4W,IAAazwB,KACjD4zB,EAAa/Z,EAAOkT,WAAW/sB,KAAK8Q,cACpC+iB,EAAYha,EAAOqI,QAAU0R,EAAWlV,MAAQ,EACtD,IAAKmV,EACD,OAEJ,MAAM2E,EAAgB/H,EAAK1D,WAAW/sB,KAAK8Q,WAAW,IAAImkB,UACpDjB,EAAch0B,KAAK2sB,aACzB,IAAI2H,EAAIE,EAAID,EAAIE,EACZz0B,KAAKohB,gBACLkT,GAAK,OAAY9zB,EAAOR,KAAK6T,KAAMggB,GAAaA,EAAY,EAC5DW,GAAK,OAAYh0B,EAAOR,KAAK2T,MAAO6kB,GAAiBA,EAAgB,EACrEjE,EAAKE,EAAKT,IAEVO,GAAK,OAAY/zB,EAAOR,KAAK0T,IAAKmgB,GAAaA,EAAY,EAC3DY,GAAK,OAAYj0B,EAAOR,KAAK4T,OAAQ4kB,GAAiBA,EAAgB,EACtElE,EAAKE,EAAKR,GAEdxnB,EAAI6qB,OACJ7qB,EAAIyoB,UAAYrB,EAAWlV,MAC3BlS,EAAIurB,YAAcnE,EAAWxvB,MAC7BoI,EAAI0rB,YACJ1rB,EAAI2rB,OAAO7D,EAAIC,GACf/nB,EAAI4rB,OAAO5D,EAAIC,GACfjoB,EAAI6rB,SACJ7rB,EAAIgrB,SACR,CACHiB,WAAWrkB,GAEJ,IADoBpU,KAAK2H,QAAQkgB,MAChB3F,QACb,OAEJ,MAAM1V,EAAMxM,KAAKwM,IACX2H,EAAOnU,KAAKk3B,oBACd/iB,IACA,OAAS3H,EAAK2H,GAElB,MAAMpS,EAAQ/B,KAAKstB,cAAclZ,GACjC,IAAK,MAAMnS,KAAQF,EAAM,CACrB,MAAM22B,EAAoBz2B,EAAK0F,QACzBwqB,EAAWlwB,EAAKipB,KAChB7X,EAAQpR,EAAKoR,MACbhF,EAAIpM,EAAK+zB,YACf,OAAWxpB,EAAK6G,EAAO,EAAGhF,EAAG8jB,EAAUuG,EAC3C,CACIvkB,IACA,OAAW3H,EAEnB,CACHmsB,YACO,MAAM,IAAEnsB,EAAM7E,SAAS,SAAEgT,EAAS,MAAE+V,EAAM,QAAE3nB,IAAgB/I,KAC5D,IAAK0wB,EAAMxO,QACP,OAEJ,MAAMgJ,GAAO,QAAOwF,EAAMxF,MACpBxK,GAAU,OAAUgQ,EAAMhQ,SAC1B4K,EAAQoF,EAAMpF,MACpB,IAAItD,EAASkD,EAAKE,WAAa,EACd,WAAbzQ,GAAsC,WAAbA,IAAyB,IAAAzY,GAASyY,IAC3DqN,GAAUtH,EAAQ9M,QACd,OAAQ8c,EAAMvF,QACdnD,GAAUkD,EAAKE,YAAcsF,EAAMvF,KAAKnpB,OAAS,KAGrDgmB,GAAUtH,EAAQhN,IAEtB,MAAM,OAAEklB,EAAO,OAAEC,EAAO,SAAEnN,EAAS,SAAEmK,GA3kC7C,SAAmBjtB,EAAOof,EAAQrN,EAAU2Q,GACxC,MAAM,IAAE5X,EAAI,KAAEG,EAAK,OAAED,EAAO,MAAED,EAAM,MAAEnT,GAAWoI,GAC3C,UAAEwL,EAAU,OAAExI,GAAYpL,EAChC,IACIkrB,EAAUkN,EAAQC,EADlBhD,EAAW,EAEf,MAAMjX,EAAShL,EAASF,EAClBgL,EAAQ/K,EAAQE,EACtB,GAAIjL,EAAMwY,eAAgB,CAEtB,GADAwX,GAAS,QAAetN,EAAOzX,EAAMF,IACjC,IAAAzR,GAASyY,GAAW,CACpB,MAAM+Z,EAAiB1tB,OAAOC,KAAK0T,GAAU,GACvCnS,EAAQmS,EAAS+Z,GACvBmE,EAASjtB,EAAO8oB,GAAgBlb,iBAAiBhR,GAASoW,EAASoJ,CACvE,MACI6Q,EADoB,WAAble,GACGvG,EAAUR,OAASQ,EAAUV,KAAO,EAAIkL,EAASoJ,EAElDiC,GAAerhB,EAAO+R,EAAUqN,GAE7C0D,EAAW/X,EAAQE,CACvB,KAAO,CACH,IAAI,IAAA3R,GAASyY,GAAW,CACpB,MAAMga,EAAkB3tB,OAAOC,KAAK0T,GAAU,GACxCia,EAASja,EAASga,GACxBiE,EAAShtB,EAAO+oB,GAAiBnb,iBAAiBob,GAAUlW,EAAQsJ,CACxE,MACI4Q,EADoB,WAAbje,GACGvG,EAAUP,KAAOO,EAAUT,OAAS,EAAI+K,EAAQsJ,EAEjDiC,GAAerhB,EAAO+R,EAAUqN,GAE7C6Q,GAAS,QAAevN,EAAO1X,EAAQF,GACvCmiB,EAAwB,SAAblb,GAAuB,EAAAme,EAAU,EAAAA,CAChD,CACA,MAAO,CACHF,SACAC,SACAnN,WACAmK,WAER,CAqiC2DkD,CAAU/4B,KAAMgoB,EAAQrN,EAAU2Q,IACrF,OAAW9e,EAAKkkB,EAAMvF,KAAM,EAAG,EAAGD,EAAM,CACpC9mB,MAAOssB,EAAMtsB,MACbsnB,WACAmK,WACAC,UAAWzK,GAAWC,EAAO3Q,EAAU5R,GACvCktB,aAAc,SACdgB,YAAa,CACT2B,EACAC,IAGZ,CACA12B,KAAKiS,GACIpU,KAAKkwB,eAGVlwB,KAAKm3B,iBACLn3B,KAAK23B,SAASvjB,GACdpU,KAAKu4B,aACLv4B,KAAK24B,YACL34B,KAAKy4B,WAAWrkB,GACpB,CACH0M,UACO,MAAMhY,EAAO9I,KAAK2H,QACZqxB,EAAKlwB,EAAK+e,OAAS/e,EAAK+e,MAAM9G,GAAK,EACnCkY,GAAK,IAAAzqB,GAAe1F,EAAK2nB,MAAQ3nB,EAAK2nB,KAAK1P,GAAI,GAC/CmY,GAAK,IAAA1qB,GAAe1F,EAAK+Q,QAAU/Q,EAAK+Q,OAAOkH,EAAG,GACxD,OAAK/gB,KAAKkwB,cAAgBlwB,KAAKmC,OAASqpB,GAAM2N,UAAUh3B,KAUjD,CACH,CACI4e,EAAGkY,EACH92B,KAAOiS,IACHpU,KAAKm3B,iBACLn3B,KAAK23B,SAASvjB,GACdpU,KAAK24B,WAAW,GAGxB,CACI5X,EAAGmY,EACH/2B,KAAM,KACFnC,KAAKu4B,YAAY,GAGzB,CACIxX,EAAGiY,EACH72B,KAAOiS,IACHpU,KAAKy4B,WAAWrkB,EAAU,IA3B3B,CACH,CACI2M,EAAGiY,EACH72B,KAAOiS,IACHpU,KAAKmC,KAAKiS,EAAU,GA2BxC,CACH1J,wBAAwB/J,GACjB,MAAMusB,EAAQltB,KAAKQ,MAAMqa,+BACnBue,EAASp5B,KAAKkL,KAAO,SACrB2d,EAAS,GACf,IAAI3mB,EAAGmH,EACP,IAAInH,EAAI,EAAGmH,EAAO6jB,EAAMlrB,OAAQE,EAAImH,IAAQnH,EAAE,CAC1C,MAAM8H,EAAOkjB,EAAMhrB,GACf8H,EAAKovB,KAAYp5B,KAAKsL,IAAQ3K,GAAQqJ,EAAKrJ,OAASA,GACpDkoB,EAAO5lB,KAAK+G,EAEpB,CACA,OAAO6e,CACX,CACH2J,wBAAwBlpB,GACjB,MAAMR,EAAO9I,KAAK2H,QAAQkgB,MAAMkF,WAAW/sB,KAAK8Q,WAAWxH,IAC3D,OAAO,QAAOR,EAAKoiB,KACvB,CACHmO,aACO,MAAMC,EAAWt5B,KAAKwyB,wBAAwB,GAAGpH,WACjD,OAAQprB,KAAKohB,eAAiBphB,KAAK0e,MAAQ1e,KAAK4e,QAAU0a,CAC9D,EAGJ,MAAMC,GACFx5B,YAAYY,EAAM64B,EAAOC,GACrBz5B,KAAKW,KAAOA,EACZX,KAAKw5B,MAAQA,EACbx5B,KAAKy5B,SAAWA,EAChBz5B,KAAK+B,MAAQiF,OAAO0yB,OAAO,KAC/B,CACAC,UAAUh5B,GACN,OAAOqG,OAAOmyB,UAAUS,cAAcC,KAAK75B,KAAKW,KAAKw4B,UAAWx4B,EAAKw4B,UACzE,CACHW,SAAS73B,GACF,MAAM83B,EAAQ/yB,OAAOgzB,eAAe/3B,GACpC,IAAIg4B,GAiEZ,SAA2BF,GACvB,MAAO,OAAQA,GAAS,aAAcA,CAC1C,EAlEYG,CAAkBH,KAClBE,EAAcj6B,KAAK85B,SAASC,IAEhC,MAAMh4B,EAAQ/B,KAAK+B,MACbuJ,EAAKrJ,EAAKqJ,GACVkuB,EAAQx5B,KAAKw5B,MAAQ,IAAMluB,EACjC,IAAKA,EACD,MAAM,IAAI6uB,MAAM,2BAA6Bl4B,GAEjD,OAAIqJ,KAAMvJ,IAGVA,EAAMuJ,GAAMrJ,EAyBpB,SAA0BA,EAAMu3B,EAAOS,GACnC,MAAMG,GAAe,QAAMpzB,OAAO0yB,OAAO,MAAO,CAC5CO,EAAc,EAAA/yB,EAAA,IAAa+yB,GAAe,CAAC,EAC3C,EAAA/yB,EAAA,IAAasyB,GACbv3B,EAAKo4B,WAET,EAAAnzB,EAAA,IAAasyB,EAAOY,GAChBn4B,EAAKq4B,eAOb,SAAuBd,EAAOe,GAC1BvzB,OAAOC,KAAKszB,GAAQv5B,SAASw5B,IACzB,MAAMC,EAAgBD,EAASE,MAAM,KAC/BC,EAAaF,EAAcl4B,MAC3Bq4B,EAAc,CAChBpB,GACF/X,OAAOgZ,GAAeI,KAAK,KACvBC,EAAQP,EAAOC,GAAUE,MAAM,KAC/BK,EAAaD,EAAMv4B,MACnBy4B,EAAcF,EAAMD,KAAK,KAC/B,EAAA3zB,EAAA,MAAe0zB,EAAaD,EAAYK,EAAaD,EAAW,GAExE,CAlBQE,CAAczB,EAAOv3B,EAAKq4B,eAE1Br4B,EAAKi5B,aACL,EAAAh0B,EAAA,SAAkBsyB,EAAOv3B,EAAKi5B,YAEtC,CArCQC,CAAiBl5B,EAAMu3B,EAAOS,GAC1Bj6B,KAAKy5B,UACL,EAAAvyB,EAAA,SAAkBjF,EAAKqJ,GAAIrJ,EAAKm5B,YALzB5B,CAQf,CACH92B,IAAI4I,GACG,OAAOtL,KAAK+B,MAAMuJ,EACtB,CACH+vB,WAAWp5B,GACJ,MAAMF,EAAQ/B,KAAK+B,MACbuJ,EAAKrJ,EAAKqJ,GACVkuB,EAAQx5B,KAAKw5B,MACfluB,KAAMvJ,UACCA,EAAMuJ,GAEbkuB,GAASluB,KAAM,EAAApE,EAASsyB,YACjB,EAAAtyB,EAASsyB,GAAOluB,GACnBtL,KAAKy5B,iBACE,KAAUnuB,GAG7B,EAiCJ,MAAMgwB,GACFv7B,cACIC,KAAKu7B,YAAc,IAAIhC,GAAcltB,EAAmB,YAAY,GACpErM,KAAKkU,SAAW,IAAIqlB,GAAchS,GAAS,YAC3CvnB,KAAKw7B,QAAU,IAAIjC,GAAcvyB,OAAQ,WACzChH,KAAK4L,OAAS,IAAI2tB,GAAc/N,GAAO,UACvCxrB,KAAKy7B,iBAAmB,CACpBz7B,KAAKu7B,YACLv7B,KAAK4L,OACL5L,KAAKkU,SAEb,CACHhR,OAAOsU,GACAxX,KAAK07B,MAAM,WAAYlkB,EAC3B,CACA7T,UAAU6T,GACNxX,KAAK07B,MAAM,aAAclkB,EAC7B,CACHmkB,kBAAkBnkB,GACXxX,KAAK07B,MAAM,WAAYlkB,EAAMxX,KAAKu7B,YACtC,CACH5tB,eAAe6J,GACRxX,KAAK07B,MAAM,WAAYlkB,EAAMxX,KAAKkU,SACtC,CACH0nB,cAAcpkB,GACPxX,KAAK07B,MAAM,WAAYlkB,EAAMxX,KAAKw7B,QACtC,CACHK,aAAarkB,GACNxX,KAAK07B,MAAM,WAAYlkB,EAAMxX,KAAK4L,OACtC,CACHkwB,cAAcxwB,GACP,OAAOtL,KAAK+7B,KAAKzwB,EAAItL,KAAKu7B,YAAa,aAC3C,CACHS,WAAW1wB,GACJ,OAAOtL,KAAK+7B,KAAKzwB,EAAItL,KAAKkU,SAAU,UACxC,CACH+nB,UAAU3wB,GACH,OAAOtL,KAAK+7B,KAAKzwB,EAAItL,KAAKw7B,QAAS,SACvC,CACHU,SAAS5wB,GACF,OAAOtL,KAAK+7B,KAAKzwB,EAAItL,KAAK4L,OAAQ,QACtC,CACHuwB,qBAAqB3kB,GACdxX,KAAK07B,MAAM,aAAclkB,EAAMxX,KAAKu7B,YACxC,CACHa,kBAAkB5kB,GACXxX,KAAK07B,MAAM,aAAclkB,EAAMxX,KAAKkU,SACxC,CACHmoB,iBAAiB7kB,GACVxX,KAAK07B,MAAM,aAAclkB,EAAMxX,KAAKw7B,QACxC,CACHc,gBAAgB9kB,GACTxX,KAAK07B,MAAM,aAAclkB,EAAMxX,KAAK4L,OACxC,CACH8vB,MAAMj1B,EAAQ+Q,EAAM+kB,GACb,IACO/kB,GACLxW,SAASw7B,IACP,MAAMC,EAAMF,GAAiBv8B,KAAK08B,oBAAoBF,GAClDD,GAAiBE,EAAI9C,UAAU6C,IAAQC,IAAQz8B,KAAKw7B,SAAWgB,EAAIlxB,GACnEtL,KAAK28B,MAAMl2B,EAAQg2B,EAAKD,IAExB,OAAKA,GAAMv6B,IACP,MAAM26B,EAAUL,GAAiBv8B,KAAK08B,oBAAoBz6B,GAC1DjC,KAAK28B,MAAMl2B,EAAQm2B,EAAS36B,EAAK,GAEzC,GAER,CACH06B,MAAMl2B,EAAQo2B,EAAUC,GACjB,MAAMC,GAAc,QAAYt2B,IAChC,OAASq2B,EAAU,SAAWC,GAAc,GAAID,GAChDD,EAASp2B,GAAQq2B,IACjB,OAASA,EAAU,QAAUC,GAAc,GAAID,EACnD,CACHJ,oBAAoB/7B,GACb,IAAI,IAAIuB,EAAI,EAAGA,EAAIlC,KAAKy7B,iBAAiBz5B,OAAQE,IAAI,CACjD,MAAMu6B,EAAMz8B,KAAKy7B,iBAAiBv5B,GAClC,GAAIu6B,EAAI9C,UAAUh5B,GACd,OAAO87B,CAEf,CACA,OAAOz8B,KAAKw7B,OAChB,CACHO,KAAKzwB,EAAIixB,EAAe57B,GACjB,MAAMsB,EAAOs6B,EAAc75B,IAAI4I,GAC/B,QAAahL,IAAT2B,EACA,MAAM,IAAIk4B,MAAM,IAAM7uB,EAAK,yBAA2B3K,EAAO,KAEjE,OAAOsB,CACX,EAEJ,IAAI46B,GAA2B,IAAIvB,GAEnC,MAAM0B,GACFj9B,cACIC,KAAKi9B,MAAQ,EACjB,CACHC,OAAO18B,EAAO28B,EAAM3lB,EAAM3L,GACN,eAATsxB,IACAn9B,KAAKi9B,MAAQj9B,KAAKo9B,mBAAmB58B,GAAO,GAC5CR,KAAKO,QAAQP,KAAKi9B,MAAOz8B,EAAO,YAEpC,MAAM06B,EAAcrvB,EAAS7L,KAAKq9B,aAAa78B,GAAOqL,OAAOA,GAAU7L,KAAKq9B,aAAa78B,GACnFqoB,EAAS7oB,KAAKO,QAAQ26B,EAAa16B,EAAO28B,EAAM3lB,GAKtD,MAJa,iBAAT2lB,IACAn9B,KAAKO,QAAQ26B,EAAa16B,EAAO,QACjCR,KAAKO,QAAQP,KAAKi9B,MAAOz8B,EAAO,cAE7BqoB,CACX,CACHtoB,QAAQ26B,EAAa16B,EAAO28B,EAAM3lB,GAC3BA,EAAOA,GAAQ,CAAC,EAChB,IAAK,MAAM8lB,KAAcpC,EAAY,CACjC,MAAMqC,EAASD,EAAWC,OACpB92B,EAAS82B,EAAOJ,GAChBrf,EAAS,CACXtd,EACAgX,EACA8lB,EAAW31B,SAEf,IAAyC,KAArC,OAASlB,EAAQqX,EAAQyf,IAAqB/lB,EAAKgmB,WACnD,OAAO,CAEf,CACA,OAAO,CACX,CACAC,cACS,OAAcz9B,KAAK4sB,UACpB5sB,KAAK09B,UAAY19B,KAAK4sB,OACtB5sB,KAAK4sB,YAAStsB,EAEtB,CACH+8B,aAAa78B,GACN,GAAIR,KAAK4sB,OACL,OAAO5sB,KAAK4sB,OAEhB,MAAMsO,EAAcl7B,KAAK4sB,OAAS5sB,KAAKo9B,mBAAmB58B,GAE1D,OADAR,KAAK29B,oBAAoBn9B,GAClB06B,CACX,CACAkC,mBAAmB58B,EAAO2H,GACtB,MAAMxB,EAASnG,GAASA,EAAMmG,OACxBgB,GAAU,IAAA6G,GAAe7H,EAAOgB,SAAWhB,EAAOgB,QAAQ6zB,QAAS,CAAC,GACpEA,EAWb,SAAoB70B,GACjB,MAAMi3B,EAAW,CAAC,EACZpC,EAAU,GACVv0B,EAAOD,OAAOC,KAAK41B,GAASrB,QAAQz5B,OAC1C,IAAI,IAAIG,EAAI,EAAGA,EAAI+E,EAAKjF,OAAQE,IAC5Bs5B,EAAQv4B,KAAK45B,GAASZ,UAAUh1B,EAAK/E,KAEzC,MAAM27B,EAAQl3B,EAAO60B,SAAW,GAChC,IAAI,IAAIsC,EAAK,EAAGA,EAAKD,EAAM77B,OAAQ87B,IAAK,CACpC,MAAMP,EAASM,EAAMC,IACY,IAA7BtC,EAAQjgB,QAAQgiB,KAChB/B,EAAQv4B,KAAKs6B,GACbK,EAASL,EAAOjyB,KAAM,EAE9B,CACA,MAAO,CACHkwB,UACAoC,WAER,CA9BwBG,CAAWp3B,GAC3B,OAAmB,IAAZgB,GAAsBQ,EAuCrC,SAA2B3H,GAAO,QAAEg7B,EAAQ,SAAEoC,GAAaj2B,EAASQ,GAChE,MAAM0gB,EAAS,GACTnU,EAAUlU,EAAMsQ,aACtB,IAAK,MAAMysB,KAAU/B,EAAQ,CACzB,MAAMlwB,EAAKiyB,EAAOjyB,GACZxC,EAAOk1B,GAAQr2B,EAAQ2D,GAAKnD,GACrB,OAATW,GAGJ+f,EAAO5lB,KAAK,CACRs6B,SACA51B,QAASs2B,GAAWz9B,EAAMmG,OAAQ,CAC9B42B,SACAM,MAAOD,EAAStyB,IACjBxC,EAAM4L,IAEjB,CACA,OAAOmU,CACX,CAzDgDqV,CAAkB19B,EAAOg7B,EAAS7zB,EAASQ,GAAhD,EACvC,CACHw1B,oBAAoBn9B,GACb,MAAM29B,EAAsBn+B,KAAK09B,WAAa,GACxCxC,EAAcl7B,KAAK4sB,OACnBnD,EAAO,CAACjM,EAAG/J,IAAI+J,EAAE3R,QAAQuC,IAAKqF,EAAE2qB,MAAM/vB,GAAID,EAAEmvB,OAAOjyB,KAAO+C,EAAEkvB,OAAOjyB,OACzEtL,KAAKO,QAAQkpB,EAAK0U,EAAqBjD,GAAc16B,EAAO,QAC5DR,KAAKO,QAAQkpB,EAAKyR,EAAaiD,GAAsB39B,EAAO,QAChE,EAsBJ,SAASw9B,GAAQr2B,EAASQ,GACtB,OAAKA,IAAmB,IAAZR,GAGI,IAAZA,EACO,CAAC,EAELA,EALI,IAMf,CAoBA,SAASs2B,GAAWt3B,GAAQ,OAAE42B,EAAO,MAAEM,GAAU/0B,EAAM4L,GACnD,MAAMzN,EAAON,EAAO03B,gBAAgBd,GAC9B5sB,EAAShK,EAAOiK,gBAAgB9H,EAAM7B,GAI5C,OAHI42B,GAASN,EAAOlD,UAChB1pB,EAAO1N,KAAKs6B,EAAOlD,UAEhB1zB,EAAOkK,eAAeF,EAAQ+D,EAAS,CAC1C,IACD,CACC4pB,YAAY,EACZC,WAAW,EACXC,SAAS,GAEjB,CAEA,SAASC,GAAa99B,EAAMgH,GACxB,MAAM+2B,EAAkB,EAAAx3B,EAAA,SAAkBvG,IAAS,CAAC,EAEpD,QADwBgH,EAAQ4H,UAAY,CAAC,GAAG5O,IAAS,CAAC,GACpCkO,WAAalH,EAAQkH,WAAa6vB,EAAgB7vB,WAAa,GACzF,CAqBA,SAAS8vB,GAAcrzB,EAAIszB,GACvB,GAAW,MAAPtzB,GAAqB,MAAPA,GAAqB,MAAPA,EAC5B,OAAOA,EAVf,IAA0BqP,EAatB,GADArP,EAAKszB,EAAa1zB,OAXD,SADKyP,EAYqBikB,EAAajkB,WAXjB,WAAbA,EACf,IAEM,SAAbA,GAAoC,UAAbA,EAChB,SADX,IAQqErP,EAAGtJ,OAAS,GAAK28B,GAAcrzB,EAAG,GAAGuzB,cAAeD,GAErH,OAAOtzB,EAEX,MAAM,IAAI6uB,MAAM,6BAA6B5K,0DACjD,CAuDA,SAASuP,GAAYn4B,GACjB,MAAMgB,EAAUhB,EAAOgB,UAAYhB,EAAOgB,QAAU,CAAC,GACrDA,EAAQ6zB,SAAU,IAAAhtB,GAAe7G,EAAQ6zB,QAAS,CAAC,GACnD7zB,EAAQiE,OAzDZ,SAA0BjF,EAAQgB,GAC9B,MAAMo3B,EAAgB,KAAUp4B,EAAOhG,OAAS,CAC5CiL,OAAQ,CAAC,GAEPozB,EAAer3B,EAAQiE,QAAU,CAAC,EAClCqzB,EAAiBR,GAAa93B,EAAOhG,KAAMgH,GAC3CiE,EAAS5E,OAAO0yB,OAAO,MA8C7B,OA7CA1yB,OAAOC,KAAK+3B,GAAch+B,SAASsK,IAC/B,MAAM4zB,EAAYF,EAAa1zB,GAC/B,KAAK,IAAApJ,GAASg9B,GACV,OAAOpxB,QAAQqxB,MAAM,0CAA0C7zB,KAEnE,GAAI4zB,EAAUE,OACV,OAAOtxB,QAAQC,KAAK,kDAAkDzC,KAE1E,MAAMJ,EAAOyzB,GAAcrzB,EAAI4zB,GACzBG,EArCd,SAAmCn0B,EAAM2D,GACrC,OAAO3D,IAAS2D,EAAY,UAAY,SAC5C,CAmC0BywB,CAA0Bp0B,EAAM+zB,GAC5CM,EAAsBR,EAAcnzB,QAAU,CAAC,EACrDA,EAAON,IAAM,QAAQtE,OAAO0yB,OAAO,MAAO,CACtC,CACIxuB,QAEJg0B,EACAK,EAAoBr0B,GACpBq0B,EAAoBF,IACtB,IAEN14B,EAAO2I,KAAKC,SAASvO,SAASiN,IAC1B,MAAMtN,EAAOsN,EAAQtN,MAAQgG,EAAOhG,KAC9BkO,EAAYZ,EAAQY,WAAa4vB,GAAa99B,EAAMgH,GAEpD43B,GADkB,KAAU5+B,IAAS,CAAC,GACAiL,QAAU,CAAC,EACvD5E,OAAOC,KAAKs4B,GAAqBv+B,SAASw+B,IACtC,MAAMt0B,EA/DlB,SAAmCI,EAAIuD,GACnC,IAAI3D,EAAOI,EAMX,MALW,YAAPA,EACAJ,EAAO2D,EACO,YAAPvD,IACPJ,EAAqB,MAAd2D,EAAoB,IAAM,KAE9B3D,CACX,CAuDyBu0B,CAA0BD,EAAW3wB,GAC5CvD,EAAK2C,EAAQ/C,EAAO,WAAaA,EACvCU,EAAON,GAAMM,EAAON,IAAOtE,OAAO0yB,OAAO,OACzC,QAAQ9tB,EAAON,GAAK,CAChB,CACIJ,QAEJ8zB,EAAa1zB,GACbi0B,EAAoBC,IACtB,GACJ,IAENx4B,OAAOC,KAAK2E,GAAQ5K,SAASqG,IACzB,MAAMuB,EAAQgD,EAAOvE,IACrB,QAAQuB,EAAO,CACX,EAAA1B,EAAA,OAAgB0B,EAAMjI,MACtB,EAAAuG,EAAA,OACF,IAEC0E,CACX,CAIqB8zB,CAAiB/4B,EAAQgB,EAC9C,CACA,SAASg4B,GAASrwB,GAId,OAHAA,EAAOA,GAAQ,CAAC,GACXC,SAAWD,EAAKC,UAAY,GACjCD,EAAKmC,OAASnC,EAAKmC,QAAU,GACtBnC,CACX,CAOA,MAAMswB,GAAW,IAAIz/B,IACf0/B,GAAa,IAAIC,IACvB,SAASC,GAAW5qB,EAAU6qB,GAC1B,IAAI/4B,EAAO24B,GAASl9B,IAAIyS,GAMxB,OALKlO,IACDA,EAAO+4B,IACPJ,GAAS/8B,IAAIsS,EAAUlO,GACvB44B,GAAW38B,IAAI+D,IAEZA,CACX,CACA,MAAMg5B,GAAa,CAACp9B,EAAKq9B,EAAK74B,KAC1B,MAAMyB,GAAO,OAAiBo3B,EAAK74B,QACtB/G,IAATwI,GACAjG,EAAIK,IAAI4F,EACZ,EAEJ,MAAMq3B,GACFpgC,YAAY4G,GACR3G,KAAKogC,QAzBb,SAAoBz5B,GAIhB,OAHAA,EAASA,GAAU,CAAC,GACb2I,KAAOqwB,GAASh5B,EAAO2I,MAC9BwvB,GAAYn4B,GACLA,CACX,CAoBuB05B,CAAW15B,GAC1B3G,KAAKsgC,YAAc,IAAIngC,IACvBH,KAAKugC,eAAiB,IAAIpgC,GAC9B,CACIqgC,eACA,OAAOxgC,KAAKogC,QAAQI,QACxB,CACI7/B,WACA,OAAOX,KAAKogC,QAAQz/B,IACxB,CACIA,SAAKA,GACLX,KAAKogC,QAAQz/B,KAAOA,CACxB,CACI2O,WACA,OAAOtP,KAAKogC,QAAQ9wB,IACxB,CACIA,SAAKA,GACLtP,KAAKogC,QAAQ9wB,KAAOqwB,GAASrwB,EACjC,CACI3H,cACA,OAAO3H,KAAKogC,QAAQz4B,OACxB,CACIA,YAAQA,GACR3H,KAAKogC,QAAQz4B,QAAUA,CAC3B,CACI6zB,cACA,OAAOx7B,KAAKogC,QAAQ5E,OACxB,CACAx1B,SACI,MAAMW,EAAS3G,KAAKogC,QACpBpgC,KAAKygC,aACL3B,GAAYn4B,EAChB,CACA85B,aACIzgC,KAAKsgC,YAAYI,QACjB1gC,KAAKugC,eAAeG,OACxB,CACHhwB,iBAAiBiwB,GACV,OAAOZ,GAAWY,GAAa,IAAI,CAC3B,CACI,YAAYA,IACZ,MAGhB,CACH/qB,0BAA0B+qB,EAAahrB,GAChC,OAAOoqB,GAAW,GAAGY,gBAA0BhrB,KAAc,IAAI,CACzD,CACI,YAAYgrB,iBAA2BhrB,IACvC,eAAeA,KAEnB,CACI,YAAYgrB,IACZ,MAGhB,CACHtrB,wBAAwBsrB,EAAa1rB,GAC9B,OAAO8qB,GAAW,GAAGY,KAAe1rB,KAAe,IAAI,CAC/C,CACI,YAAY0rB,cAAwB1rB,IACpC,YAAY0rB,IACZ,YAAY1rB,IACZ,MAGhB,CACHopB,gBAAgBd,GACT,MAAMjyB,EAAKiyB,EAAOjyB,GAElB,OAAOy0B,GAAW,GADL//B,KAAKW,eACkB2K,KAAM,IAAI,CACtC,CACI,WAAWA,OACRiyB,EAAOqD,wBAA0B,MAGpD,CACHC,cAAcC,EAAWC,GAClB,MAAMT,EAActgC,KAAKsgC,YACzB,IAAIprB,EAAQorB,EAAY59B,IAAIo+B,GAK5B,OAJK5rB,IAAS6rB,IACV7rB,EAAQ,IAAI/U,IACZmgC,EAAYz9B,IAAIi+B,EAAW5rB,IAExBA,CACX,CACHtE,gBAAgBkwB,EAAWE,EAAUD,GAC9B,MAAM,QAAEp5B,EAAQ,KAAEhH,GAAUX,KACtBkV,EAAQlV,KAAK6gC,cAAcC,EAAWC,GACtC50B,EAAS+I,EAAMxS,IAAIs+B,GACzB,GAAI70B,EACA,OAAOA,EAEX,MAAMwE,EAAS,IAAImvB,IACnBkB,EAAShgC,SAASiG,IACV65B,IACAnwB,EAAOzN,IAAI49B,GACX75B,EAAKjG,SAASqG,GAAM44B,GAAWtvB,EAAQmwB,EAAWz5B,MAEtDJ,EAAKjG,SAASqG,GAAM44B,GAAWtvB,EAAQhJ,EAASN,KAChDJ,EAAKjG,SAASqG,GAAM44B,GAAWtvB,EAAQ,KAAUhQ,IAAS,CAAC,EAAG0G,KAC9DJ,EAAKjG,SAASqG,GAAM44B,GAAWtvB,EAAQ,EAAAzJ,EAAUG,KACjDJ,EAAKjG,SAASqG,GAAM44B,GAAWtvB,EAAQ,KAAatJ,IAAK,IAE7D,MAAM6V,EAAQlN,MAAM/L,KAAK0M,GAOzB,OANqB,IAAjBuM,EAAMlb,QACNkb,EAAMja,KAAK+D,OAAO0yB,OAAO,OAEzBmG,GAAW18B,IAAI69B,IACf9rB,EAAMrS,IAAIm+B,EAAU9jB,GAEjBA,CACX,CACH+jB,oBACO,MAAM,QAAEt5B,EAAQ,KAAEhH,GAAUX,KAC5B,MAAO,CACH2H,EACA,KAAUhH,IAAS,CAAC,EACpB,EAAAuG,EAAA,SAAkBvG,IAAS,CAAC,EAC5B,CACIA,QAEJ,EAAAuG,EACA,KAER,CACHsO,oBAAoB7E,EAAQ4E,EAAOb,EAASY,EAAW,CAChD,KAEA,MAAMuT,EAAS,CACXjhB,SAAS,IAEP,SAAEs5B,EAAS,YAAEC,GAAiBC,GAAYphC,KAAKugC,eAAgB5vB,EAAQ2E,GAC7E,IAAI3N,EAAUu5B,EACd,GAqCR,SAAqB/a,EAAO5Q,GACxB,MAAM,aAAE8rB,EAAa,YAAEC,IAAiB,QAAanb,GACrD,IAAK,MAAMphB,KAAQwQ,EAAM,CACrB,MAAM+oB,EAAa+C,EAAat8B,GAC1Bw5B,EAAY+C,EAAYv8B,GACxByD,GAAS+1B,GAAaD,IAAenY,EAAMphB,GACjD,GAAIu5B,KAAe,QAAW91B,IAAU+4B,GAAY/4B,KAAW+1B,IAAa,OAAQ/1B,GAChF,OAAO,CAEf,CACA,OAAO,CACX,CAhDYg5B,CAAYN,EAAU3rB,GAAQ,CAC9BsT,EAAOjhB,SAAU,EACjB8M,GAAU,QAAWA,GAAWA,IAAYA,EAC5C,MAAM+sB,EAAczhC,KAAK6Q,eAAeF,EAAQ+D,EAASysB,GACzDx5B,GAAU,QAAeu5B,EAAUxsB,EAAS+sB,EAChD,CACA,IAAK,MAAM18B,KAAQwQ,EACfsT,EAAO9jB,GAAQ4C,EAAQ5C,GAE3B,OAAO8jB,CACX,CACHhY,eAAeF,EAAQ+D,EAASY,EAAW,CACpC,IACDosB,GACC,MAAM,SAAER,GAAcE,GAAYphC,KAAKugC,eAAgB5vB,EAAQ2E,GAC/D,OAAO,IAAApT,GAASwS,IAAW,QAAewsB,EAAUxsB,OAASpU,EAAWohC,GAAsBR,CAClG,EAEJ,SAASE,GAAYO,EAAehxB,EAAQ2E,GACxC,IAAIJ,EAAQysB,EAAcj/B,IAAIiO,GACzBuE,IACDA,EAAQ,IAAI/U,IACZwhC,EAAc9+B,IAAI8N,EAAQuE,IAE9B,MAAMC,EAAWG,EAASulB,OAC1B,IAAI1uB,EAAS+I,EAAMxS,IAAIyS,GACvB,IAAKhJ,EAAQ,CAETA,EAAS,CACL+0B,UAFa,QAAgBvwB,EAAQ2E,GAGrC6rB,YAAa7rB,EAASzJ,QAAQ+1B,IAAKA,EAAE/C,cAAc5gB,SAAS,YAEhE/I,EAAMrS,IAAIsS,EAAUhJ,EACxB,CACA,OAAOA,CACX,CACA,MAAMo1B,GAAe/4B,IAAQ,IAAAtG,GAASsG,IAAUxB,OAAOI,oBAAoBoB,GAAOpF,QAAO,CAACC,EAAKgE,IAAMhE,IAAO,QAAWmF,EAAMnB,MAAO,GAgBpI,MAAMw6B,GAAkB,CACpB,MACA,SACA,OACA,QACA,aAEJ,SAASC,GAAqBnnB,EAAUzP,GACpC,MAAoB,QAAbyP,GAAmC,WAAbA,IAAgE,IAAvCknB,GAAgBtmB,QAAQZ,IAA6B,MAATzP,CACtG,CACA,SAAS62B,GAAcC,EAAIC,GACvB,OAAO,SAASzkB,EAAG/J,GACf,OAAO+J,EAAEwkB,KAAQvuB,EAAEuuB,GAAMxkB,EAAEykB,GAAMxuB,EAAEwuB,GAAMzkB,EAAEwkB,GAAMvuB,EAAEuuB,EACvD,CACJ,CACA,SAASE,GAAqBxtB,GAC1B,MAAMlU,EAAQkU,EAAQlU,MAChBuG,EAAmBvG,EAAMmH,QAAQc,UACvCjI,EAAMgvB,cAAc,gBACpB,OAASzoB,GAAoBA,EAAiBo7B,WAAY,CACtDztB,GACDlU,EACP,CACA,SAAS4hC,GAAoB1tB,GACzB,MAAMlU,EAAQkU,EAAQlU,MAChBuG,EAAmBvG,EAAMmH,QAAQc,WACvC,OAAS1B,GAAoBA,EAAiBs7B,WAAY,CACtD3tB,GACDlU,EACP,CACC,SAAS8hC,GAAUrgC,GAShB,OARI,UAAqC,iBAATA,EAC5BA,EAAO6iB,SAASyd,eAAetgC,GACxBA,GAAQA,EAAKD,SACpBC,EAAOA,EAAK,IAEZA,GAAQA,EAAKugB,SACbvgB,EAAOA,EAAKugB,QAETvgB,CACX,CACA,MAAMugC,GAAY,CAAC,EACbC,GAAYp7B,IACd,MAAMmb,EAAS8f,GAAUj7B,GACzB,OAAOL,OAAOS,OAAO+6B,IAAW32B,QAAQvH,GAAIA,EAAEke,SAAWA,IAAQjgB,KAAK,EAE1E,SAASmgC,GAAgBxC,EAAK5+B,EAAO4V,GACjC,MAAMjQ,EAAOD,OAAOC,KAAKi5B,GACzB,IAAK,MAAM74B,KAAOJ,EAAK,CACnB,MAAM07B,GAAUt7B,EAChB,GAAIs7B,GAAUrhC,EAAO,CACjB,MAAMkH,EAAQ03B,EAAI74B,UACX64B,EAAI74B,IACP6P,EAAO,GAAKyrB,EAASrhC,KACrB4+B,EAAIyC,EAASzrB,GAAQ1O,EAE7B,CACJ,CACJ,CAqBA,MAAMo6B,GACFt2B,gBAAkB,EAAApF,EAClBoF,iBAAmBk2B,GACnBl2B,iBAAmB,KACnBA,gBAAkBuwB,GAClBvwB,eAtFU,QAuFVA,gBAAkBm2B,GAClBn2B,mBAAmBvK,GACf86B,GAAS35B,OAAOnB,GAChB8gC,IACJ,CACAv2B,qBAAqBvK,GACjB86B,GAASl5B,UAAU5B,GACnB8gC,IACJ,CACA9iC,YAAYkC,EAAM6gC,GACd,MAAMn8B,EAAS3G,KAAK2G,OAAS,IAAIw5B,GAAO2C,GAClCC,EAAgBT,GAAUrgC,GAC1B+gC,EAAgBP,GAASM,GAC/B,GAAIC,EACA,MAAM,IAAI7I,MAAM,4CAA+C6I,EAAc13B,GAA7D,kDAA6H03B,EAAcxgB,OAAOlX,GAAK,oBAE3K,MAAM3D,EAAUhB,EAAOkK,eAAelK,EAAOs6B,oBAAqBjhC,KAAK8Q,cACvE9Q,KAAKwgC,SAAW,IAAK75B,EAAO65B,UA1kEpC,SAAyBhe,GACrB,QAAK,UAAgD,oBAApBygB,iBAAmCzgB,aAAkBygB,gBAC3E/f,EAEJqD,EACX,CAqkEgD2c,CAAgBH,IACxD/iC,KAAKwgC,SAASvd,aAAatc,GAC3B,MAAM+N,EAAU1U,KAAKwgC,SAASje,eAAewgB,EAAep7B,EAAQ8a,aAC9DD,EAAS9N,GAAWA,EAAQ8N,OAC5B5D,EAAS4D,GAAUA,EAAO5D,OAC1BF,EAAQ8D,GAAUA,EAAO9D,MAC/B1e,KAAKsL,IAAK,UACVtL,KAAKwM,IAAMkI,EACX1U,KAAKwiB,OAASA,EACdxiB,KAAK0e,MAAQA,EACb1e,KAAK4e,OAASA,EACd5e,KAAKmjC,SAAWx7B,EAChB3H,KAAKojC,aAAepjC,KAAKyiB,YACzBziB,KAAK8gB,QAAU,GACf9gB,KAAKqjC,UAAY,GACjBrjC,KAAK+K,aAAUzK,EACfN,KAAKmgB,MAAQ,GACbngB,KAAKwlB,6BAA0BllB,EAC/BN,KAAKoU,eAAY9T,EACjBN,KAAKoC,QAAU,GACfpC,KAAKsjC,gBAAahjC,EAClBN,KAAKujC,WAAa,CAAC,EAClBvjC,KAAKwjC,0BAAuBljC,EAC7BN,KAAKyjC,gBAAkB,GACvBzjC,KAAK4L,OAAS,CAAC,EACf5L,KAAK0jC,SAAW,IAAI1G,GACpBh9B,KAAKmnB,SAAW,CAAC,EACjBnnB,KAAK2jC,eAAiB,CAAC,EACvB3jC,KAAK4jC,UAAW,EAChB5jC,KAAKiW,yBAAsB3V,EAC3BN,KAAKoN,cAAW9M,EAChBN,KAAK6jC,WAAY,SAAUl6B,GAAO3J,KAAKgG,OAAO2D,IAAOhC,EAAQm8B,aAAe,GAC5E9jC,KAAKyX,aAAe,GACpB+qB,GAAUxiC,KAAKsL,IAAMtL,KAChB0U,GAAY8N,GAIjB3e,EAASf,OAAO9C,KAAM,WAAYkiC,IAClCr+B,EAASf,OAAO9C,KAAM,WAAYoiC,IAClCpiC,KAAK+jC,cACD/jC,KAAK4jC,UACL5jC,KAAKgG,UAPL8H,QAAQqxB,MAAM,oEAStB,CACI1c,kBACA,MAAQ9a,SAAS,YAAE8a,EAAY,oBAAEuhB,GAAuB,MAAEtlB,EAAM,OAAEE,EAAO,aAAEwkB,GAAkBpjC,KAC7F,OAAK,OAAcyiB,GAGfuhB,GAAuBZ,EAChBA,EAEJxkB,EAASF,EAAQE,EAAS,KALtB6D,CAMf,CACInT,WACA,OAAOtP,KAAK2G,OAAO2I,IACvB,CACIA,SAAKA,GACLtP,KAAK2G,OAAO2I,KAAOA,CACvB,CACI3H,cACA,OAAO3H,KAAKmjC,QAChB,CACIx7B,YAAQA,GACR3H,KAAK2G,OAAOgB,QAAUA,CAC1B,CACIk1B,eACA,OAAOA,EACX,CACHkH,cASO,OARA/jC,KAAKwvB,cAAc,cACfxvB,KAAK2H,QAAQs8B,WACbjkC,KAAKulB,UAEL,QAAYvlB,KAAMA,KAAK2H,QAAQ2d,kBAEnCtlB,KAAKkkC,aACLlkC,KAAKwvB,cAAc,aACZxvB,IACX,CACA0gC,QAEI,OADA,QAAY1gC,KAAKwiB,OAAQxiB,KAAKwM,KACvBxM,IACX,CACAyD,OAEI,OADAI,EAASJ,KAAKzD,MACPA,IACX,CACHulB,OAAO7G,EAAOE,GACF/a,EAAS/B,QAAQ9B,MAGlBA,KAAKmkC,kBAAoB,CACrBzlB,QACAE,UAJJ5e,KAAKokC,QAAQ1lB,EAAOE,EAO5B,CACAwlB,QAAQ1lB,EAAOE,GACX,MAAMjX,EAAU3H,KAAK2H,QACf6a,EAASxiB,KAAKwiB,OACdC,EAAc9a,EAAQq8B,qBAAuBhkC,KAAKyiB,YAClD4hB,EAAUrkC,KAAKwgC,SAASzd,eAAeP,EAAQ9D,EAAOE,EAAQ6D,GAC9D6hB,EAAW38B,EAAQ2d,kBAAoBtlB,KAAKwgC,SAAS1d,sBACrDnZ,EAAO3J,KAAK0e,MAAQ,SAAW,SACrC1e,KAAK0e,MAAQ2lB,EAAQ3lB,MACrB1e,KAAK4e,OAASylB,EAAQzlB,OACtB5e,KAAKojC,aAAepjC,KAAKyiB,aACpB,QAAYziB,KAAMskC,GAAU,KAGjCtkC,KAAKwvB,cAAc,SAAU,CACzB9mB,KAAM27B,KAEV,OAAS18B,EAAQ48B,SAAU,CACvBvkC,KACAqkC,GACDrkC,MACCA,KAAK4jC,UACD5jC,KAAK6jC,UAAUl6B,IACf3J,KAAKwkC,SAGjB,CACAC,sBACI,MACMC,EADU1kC,KAAK2H,QACSiE,QAAU,CAAC,GACzC,OAAK84B,GAAe,CAACC,EAAavL,KAC9BuL,EAAYr5B,GAAK8tB,CAAM,GAE/B,CACHwL,sBACO,MAAMj9B,EAAU3H,KAAK2H,QACfk9B,EAAYl9B,EAAQiE,OACpBA,EAAS5L,KAAK4L,OACdk5B,EAAU99B,OAAOC,KAAK2E,GAAQxI,QAAO,CAAC88B,EAAK50B,KAC7C40B,EAAI50B,IAAM,EACH40B,IACR,CAAC,GACJ,IAAIn+B,EAAQ,GACR8iC,IACA9iC,EAAQA,EAAM0f,OAAOza,OAAOC,KAAK49B,GAAWE,KAAKz5B,IAC7C,MAAMszB,EAAeiG,EAAUv5B,GACzBJ,EAAOyzB,GAAcrzB,EAAIszB,GACzBoG,EAAoB,MAAT95B,EACXkW,EAAwB,MAATlW,EACrB,MAAO,CACHvD,QAASi3B,EACTqG,UAAWD,EAAW,YAAc5jB,EAAe,SAAW,OAC9D8jB,MAAOF,EAAW,eAAiB5jB,EAAe,WAAa,SAClE,OAGT,OAAKrf,GAAQE,IACT,MAAM28B,EAAe38B,EAAK0F,QACpB2D,EAAKszB,EAAatzB,GAClBJ,EAAOyzB,GAAcrzB,EAAIszB,GACzBuG,GAAY,IAAA32B,GAAeowB,EAAaj+B,KAAMsB,EAAKijC,YAC3B5kC,IAA1Bs+B,EAAajkB,UAA0BmnB,GAAqBlD,EAAajkB,SAAUzP,KAAU42B,GAAqB7/B,EAAKgjC,aACvHrG,EAAajkB,SAAW1Y,EAAKgjC,WAEjCH,EAAQx5B,IAAM,EACd,IAAI1C,EAAQ,KACZ,GAAI0C,KAAMM,GAAUA,EAAON,GAAI3K,OAASwkC,EACpCv8B,EAAQgD,EAAON,OACZ,CAEH1C,EAAQ,IADWi0B,GAASX,SAASiJ,GAC7B,CAAe,CACnB75B,KACA3K,KAAMwkC,EACN34B,IAAKxM,KAAKwM,IACVhM,MAAOR,OAEX4L,EAAOhD,EAAM0C,IAAM1C,CACvB,CACAA,EAAMkkB,KAAK8R,EAAcj3B,EAAQ,KAErC,OAAKm9B,GAAS,CAACM,EAAY95B,KAClB85B,UACMx5B,EAAON,EAClB,KAEJ,OAAKM,GAAShD,IACViV,EAAQ/W,UAAU9G,KAAM4I,EAAOA,EAAMjB,SACrCkW,EAAQgD,OAAO7gB,KAAM4I,EAAM,GAEnC,CACHy8B,kBACO,MAAMl8B,EAAWnJ,KAAKqjC,UAChBtsB,EAAU/W,KAAKsP,KAAKC,SAASvN,OAC7B8U,EAAU3N,EAASnH,OAEzB,GADAmH,EAASoU,MAAK,CAACC,EAAG/J,IAAI+J,EAAElU,MAAQmK,EAAEnK,QAC9BwN,EAAUC,EAAS,CACnB,IAAI,IAAI7U,EAAI6U,EAAS7U,EAAI4U,IAAW5U,EAChClC,KAAKslC,oBAAoBpjC,GAE7BiH,EAASmO,OAAOP,EAASD,EAAUC,EACvC,CACA/W,KAAKyjC,gBAAkBt6B,EAASo8B,MAAM,GAAGhoB,KAAKwkB,GAAc,QAAS,SACzE,CACHyD,8BACO,MAAQnC,UAAWl6B,EAAWmG,MAAM,SAAEC,IAAiBvP,KACnDmJ,EAASnH,OAASuN,EAASvN,eACpBhC,KAAK+K,QAEhB5B,EAASnI,SAAQ,CAACgJ,EAAMV,KACqC,IAArDiG,EAAS1D,QAAQuC,GAAIA,IAAMpE,EAAKyO,WAAUzW,QAC1ChC,KAAKslC,oBAAoBh8B,EAC7B,GAER,CACAm8B,2BACI,MAAMC,EAAiB,GACjBn2B,EAAWvP,KAAKsP,KAAKC,SAC3B,IAAIrN,EAAGmH,EAEP,IADArJ,KAAKwlC,8BACDtjC,EAAI,EAAGmH,EAAOkG,EAASvN,OAAQE,EAAImH,EAAMnH,IAAI,CAC7C,MAAM+L,EAAUsB,EAASrN,GACzB,IAAI8H,EAAOhK,KAAKwP,eAAetN,GAC/B,MAAMvB,EAAOsN,EAAQtN,MAAQX,KAAK2G,OAAOhG,KAWzC,GAVIqJ,EAAKrJ,MAAQqJ,EAAKrJ,OAASA,IAC3BX,KAAKslC,oBAAoBpjC,GACzB8H,EAAOhK,KAAKwP,eAAetN,IAE/B8H,EAAKrJ,KAAOA,EACZqJ,EAAK6E,UAAYZ,EAAQY,WAAa4vB,GAAa99B,EAAMX,KAAK2H,SAC9DqC,EAAK27B,MAAQ13B,EAAQ03B,OAAS,EAC9B37B,EAAKV,MAAQpH,EACb8H,EAAKqJ,MAAQ,GAAKpF,EAAQoF,MAC1BrJ,EAAK47B,QAAU5lC,KAAK6lC,iBAAiB3jC,GACjC8H,EAAKY,WACLZ,EAAKY,WAAWoD,YAAY9L,GAC5B8H,EAAKY,WAAW6C,iBACb,CACH,MAAMq4B,EAAkBjJ,GAASf,cAAcn7B,IACzC,mBAAE2M,EAAmB,gBAAEC,GAAqB,EAAArG,EAAA,SAAkBvG,GACpEqG,OAAOa,OAAOi+B,EAAiB,CAC3Bv4B,gBAAiBsvB,GAASb,WAAWzuB,GACrCD,mBAAoBA,GAAsBuvB,GAASb,WAAW1uB,KAElEtD,EAAKY,WAAa,IAAIk7B,EAAgB9lC,KAAMkC,GAC5CwjC,EAAeziC,KAAK+G,EAAKY,WAC7B,CACJ,CAEA,OADA5K,KAAKqlC,kBACEK,CACX,CACHK,kBACO,OAAK/lC,KAAKsP,KAAKC,UAAU,CAACtB,EAASrE,KAC/B5J,KAAKwP,eAAe5F,GAAcgB,WAAW+E,OAAO,GACrD3P,KACP,CACH2P,QACO3P,KAAK+lC,iBACL/lC,KAAKwvB,cAAc,QACvB,CACAxpB,OAAO2D,GACH,MAAMhD,EAAS3G,KAAK2G,OACpBA,EAAOX,SACP,MAAM2B,EAAU3H,KAAKmjC,SAAWx8B,EAAOkK,eAAelK,EAAOs6B,oBAAqBjhC,KAAK8Q,cACjFk1B,EAAgBhmC,KAAKiW,qBAAuBtO,EAAQc,UAK1D,GAJAzI,KAAKimC,gBACLjmC,KAAKkmC,sBACLlmC,KAAKmmC,uBACLnmC,KAAK0jC,SAASjG,cAIP,IAHHz9B,KAAKwvB,cAAc,eAAgB,CACnC7lB,OACA6zB,YAAY,IAEZ,OAEJ,MAAMkI,EAAiB1lC,KAAKylC,2BAC5BzlC,KAAKwvB,cAAc,wBACnB,IAAItO,EAAa,EACjB,IAAI,IAAIhf,EAAI,EAAGmH,EAAOrJ,KAAKsP,KAAKC,SAASvN,OAAQE,EAAImH,EAAMnH,IAAI,CAC3D,MAAM,WAAE0I,GAAgB5K,KAAKwP,eAAetN,GACtCyN,GAASq2B,IAAyD,IAAxCN,EAAenqB,QAAQ3Q,GACvDA,EAAWwF,sBAAsBT,GACjCuR,EAAa9f,KAAKmC,KAAKqH,EAAWuI,iBAAkB+N,EACxD,CACAA,EAAalhB,KAAKomC,YAAcz+B,EAAQ4W,OAAO8nB,YAAcnlB,EAAa,EAC1ElhB,KAAKsmC,cAAcplB,GACd8kB,IACD,OAAKN,GAAiB96B,IAClBA,EAAW+E,OAAO,IAG1B3P,KAAKumC,gBAAgB58B,GACrB3J,KAAKwvB,cAAc,cAAe,CAC9B7lB,SAEJ3J,KAAK8gB,QAAQvD,KAAKwkB,GAAc,IAAK,SACrC,MAAM,QAAE3/B,EAAQ,WAAEkhC,GAAgBtjC,KAC9BsjC,EACAtjC,KAAKwmC,cAAclD,GAAY,GACxBlhC,EAAQJ,QACfhC,KAAKymC,mBAAmBrkC,EAASA,GAAS,GAE9CpC,KAAKwkC,QACT,CACHyB,iBACO,OAAKjmC,KAAK4L,QAAShD,IACfiV,EAAQmD,UAAUhhB,KAAM4I,EAAM,IAElC5I,KAAKykC,sBACLzkC,KAAK4kC,qBACT,CACHsB,sBACO,MAAMv+B,EAAU3H,KAAK2H,QACf++B,EAAiB,IAAI5G,IAAI94B,OAAOC,KAAKjH,KAAKujC,aAC1CoD,EAAY,IAAI7G,IAAIn4B,EAAQi/B,SAC7B,QAAUF,EAAgBC,MAAgB3mC,KAAKwjC,uBAAyB77B,EAAQs8B,aACjFjkC,KAAK6mC,eACL7mC,KAAKkkC,aAEb,CACHiC,uBACO,MAAM,eAAExC,GAAoB3jC,KACtB8mC,EAAU9mC,KAAK+mC,0BAA4B,GACjD,IAAK,MAAM,OAAEtgC,EAAO,MAAEnF,EAAM,MAAE2P,KAAY61B,EAAQ,CAE9CpE,GAAgBiB,EAAgBriC,EADR,oBAAXmF,GAAgCwK,EAAQA,EAEzD,CACJ,CACH81B,yBACO,MAAMtvB,EAAezX,KAAKyX,aAC1B,IAAKA,IAAiBA,EAAazV,OAC/B,OAEJhC,KAAKyX,aAAe,GACpB,MAAMuvB,EAAehnC,KAAKsP,KAAKC,SAASvN,OAClCilC,EAAWnU,GAAM,IAAIgN,IAAIroB,EAAa5L,QAAQvH,GAAIA,EAAE,KAAOwuB,IAAKiS,KAAI,CAACzgC,EAAGpC,IAAIA,EAAI,IAAMoC,EAAEgT,OAAO,GAAGujB,KAAK,QACvGqM,EAAYD,EAAQ,GAC1B,IAAI,IAAI/kC,EAAI,EAAGA,EAAI8kC,EAAc9kC,IAC7B,KAAK,QAAUglC,EAAWD,EAAQ/kC,IAC9B,OAGR,OAAO8N,MAAM/L,KAAKijC,GAAWnC,KAAKzgC,GAAIA,EAAEo2B,MAAM,OAAMqK,KAAKvnB,IAAI,CACrD/W,OAAQ+W,EAAE,GACVlc,OAAQkc,EAAE,GACVvM,OAAQuM,EAAE,MAEtB,CACH8oB,cAAcplB,GACP,IAEO,IAFHlhB,KAAKwvB,cAAc,eAAgB,CACnCgO,YAAY,IAEZ,OAEJ3f,EAAQ7X,OAAOhG,KAAMA,KAAK0e,MAAO1e,KAAK4e,OAAQsC,GAC9C,MAAM/M,EAAOnU,KAAKoU,UACZ+yB,EAAShzB,EAAKuK,OAAS,GAAKvK,EAAKyK,QAAU,EACjD5e,KAAK8gB,QAAU,IACf,OAAK9gB,KAAKmgB,OAAQ9C,IACV8pB,GAA2B,cAAjB9pB,EAAI1C,WAGd0C,EAAIvW,WACJuW,EAAIvW,YAER9G,KAAK8gB,QAAQ7d,QAAQoa,EAAIyD,WAAU,GACpC9gB,MACHA,KAAK8gB,QAAQ9f,SAAQ,CAACiB,EAAMqH,KACxBrH,EAAKmlC,KAAO99B,CAAK,IAErBtJ,KAAKwvB,cAAc,cACvB,CACH+W,gBAAgB58B,GACT,IAGO,IAHH3J,KAAKwvB,cAAc,uBAAwB,CAC3C7lB,OACA6zB,YAAY,IAFhB,CAMA,IAAI,IAAIt7B,EAAI,EAAGmH,EAAOrJ,KAAKsP,KAAKC,SAASvN,OAAQE,EAAImH,IAAQnH,EACzDlC,KAAKwP,eAAetN,GAAG0I,WAAW9D,YAEtC,IAAI,IAAIg3B,EAAK,EAAGuJ,EAAQrnC,KAAKsP,KAAKC,SAASvN,OAAQ87B,EAAKuJ,IAASvJ,EAC7D99B,KAAKsnC,eAAexJ,GAAI,QAAWn0B,GAAQA,EAAK,CAC5CC,aAAck0B,IACbn0B,GAET3J,KAAKwvB,cAAc,sBAAuB,CACtC7lB,QAVJ,CAYJ,CACH29B,eAAeh+B,EAAOK,GACf,MAAMK,EAAOhK,KAAKwP,eAAelG,GAC3BkO,EAAO,CACTxN,OACAV,QACAK,OACA6zB,YAAY,IAEwC,IAApDx9B,KAAKwvB,cAAc,sBAAuBhY,KAG9CxN,EAAKY,WAAWlJ,QAAQiI,GACxB6N,EAAKgmB,YAAa,EAClBx9B,KAAKwvB,cAAc,qBAAsBhY,GAC7C,CACAgtB,UAGW,IAFHxkC,KAAKwvB,cAAc,eAAgB,CACnCgO,YAAY,MAIZ35B,EAASV,IAAInD,MACTA,KAAK4jC,WAAa//B,EAAS/B,QAAQ9B,OACnC6D,EAASvC,MAAMtB,OAGnBA,KAAKmC,OACL+/B,GAAqB,CACjB1hC,MAAOR,QAGnB,CACAmC,OACI,IAAID,EACJ,GAAIlC,KAAKmkC,kBAAmB,CACxB,MAAM,MAAEzlB,EAAM,OAAEE,GAAY5e,KAAKmkC,kBACjCnkC,KAAKokC,QAAQ1lB,EAAOE,GACpB5e,KAAKmkC,kBAAoB,IAC7B,CAEA,GADAnkC,KAAK0gC,QACD1gC,KAAK0e,OAAS,GAAK1e,KAAK4e,QAAU,EAClC,OAEJ,IAEO,IAFH5e,KAAKwvB,cAAc,aAAc,CACjCgO,YAAY,IAEZ,OAEJ,MAAM+J,EAASvnC,KAAK8gB,QACpB,IAAI5e,EAAI,EAAGA,EAAIqlC,EAAOvlC,QAAUulC,EAAOrlC,GAAG6e,GAAK,IAAK7e,EAChDqlC,EAAOrlC,GAAGC,KAAKnC,KAAKoU,WAGxB,IADApU,KAAKwnC,gBACCtlC,EAAIqlC,EAAOvlC,SAAUE,EACvBqlC,EAAOrlC,GAAGC,KAAKnC,KAAKoU,WAExBpU,KAAKwvB,cAAc,YACvB,CACHpmB,uBAAuBF,GAChB,MAAMC,EAAWnJ,KAAKyjC,gBAChB5a,EAAS,GACf,IAAI3mB,EAAGmH,EACP,IAAInH,EAAI,EAAGmH,EAAOF,EAASnH,OAAQE,EAAImH,IAAQnH,EAAE,CAC7C,MAAM8H,EAAOb,EAASjH,GACjBgH,IAAiBc,EAAK47B,SACvB/c,EAAO5lB,KAAK+G,EAEpB,CACA,OAAO6e,CACX,CACHhO,+BACO,OAAO7a,KAAKoJ,wBAAuB,EACvC,CACHo+B,gBACO,IAEO,IAFHxnC,KAAKwvB,cAAc,qBAAsB,CACzCgO,YAAY,IAEZ,OAEJ,MAAMr0B,EAAWnJ,KAAK6a,+BACtB,IAAI,IAAI3Y,EAAIiH,EAASnH,OAAS,EAAGE,GAAK,IAAKA,EACvClC,KAAKynC,aAAat+B,EAASjH,IAE/BlC,KAAKwvB,cAAc,oBACvB,CACHiY,aAAaz9B,GACN,MAAMwC,EAAMxM,KAAKwM,IACXwH,EAAOhK,EAAKuJ,MACZm0B,GAAW1zB,EAAKF,SAChBK,EA/fd,SAAwBnK,GACpB,MAAM,OAAEkF,EAAO,OAAEE,GAAYpF,EAC7B,GAAIkF,GAAUE,EACV,MAAO,CACHyE,KAAM3E,EAAO2E,KACbF,MAAOzE,EAAOyE,MACdD,IAAKtE,EAAOsE,IACZE,OAAQxE,EAAOwE,OAG3B,CAqfqB+zB,CAAe39B,IAAShK,KAAKoU,UACpCoD,EAAO,CACTxN,OACAV,MAAOU,EAAKV,MACZk0B,YAAY,IAEsC,IAAlDx9B,KAAKwvB,cAAc,oBAAqBhY,KAGxCkwB,IACA,OAASl7B,EAAK,CACVqH,MAAoB,IAAdG,EAAKH,KAAiB,EAAIM,EAAKN,KAAOG,EAAKH,KACjDF,OAAsB,IAAfK,EAAKL,MAAkB3T,KAAK0e,MAAQvK,EAAKR,MAAQK,EAAKL,MAC7DD,KAAkB,IAAbM,EAAKN,IAAgB,EAAIS,EAAKT,IAAMM,EAAKN,IAC9CE,QAAwB,IAAhBI,EAAKJ,OAAmB5T,KAAK4e,OAASzK,EAAKP,OAASI,EAAKJ,SAGzE5J,EAAKY,WAAWzI,OACZulC,IACA,OAAWl7B,GAEfgL,EAAKgmB,YAAa,EAClBx9B,KAAKwvB,cAAc,mBAAoBhY,GAC3C,CACH0D,cAAc9B,GACP,OAAO,OAAeA,EAAOpZ,KAAKoU,UAAWpU,KAAKomC,YACtD,CACAwB,0BAA0BziC,EAAGwE,EAAMhC,EAASqT,GACxC,MAAMvU,EAASoW,EAAYC,MAAMnT,GACjC,MAAsB,mBAAXlD,EACAA,EAAOzG,KAAMmF,EAAGwC,EAASqT,GAE7B,EACX,CACAxL,eAAe5F,GACX,MAAMqE,EAAUjO,KAAKsP,KAAKC,SAAS3F,GAC7BT,EAAWnJ,KAAKqjC,UACtB,IAAIr5B,EAAOb,EAAS0C,QAAQuC,GAAIA,GAAKA,EAAEqK,WAAaxK,IAAS1L,MAkB7D,OAjBKyH,IACDA,EAAO,CACHrJ,KAAM,KACN2O,KAAM,GACNrB,QAAS,KACTrD,WAAY,KACZ2H,OAAQ,KACRhE,QAAS,KACTG,QAAS,KACTi3B,MAAO13B,GAAWA,EAAQ03B,OAAS,EACnCr8B,MAAOM,EACP6O,SAAUxK,EACVjC,QAAS,GACTmF,SAAS,GAEbhI,EAASlG,KAAK+G,IAEXA,CACX,CACA8G,aACI,OAAO9Q,KAAKoN,WAAapN,KAAKoN,UAAW,OAAc,KAAM,CACzD5M,MAAOR,KACPW,KAAM,UAEd,CACAknC,yBACI,OAAO7nC,KAAK6a,+BAA+B7Y,MAC/C,CACA6jC,iBAAiBj8B,GACb,MAAMqE,EAAUjO,KAAKsP,KAAKC,SAAS3F,GACnC,IAAKqE,EACD,OAAO,EAEX,MAAMjE,EAAOhK,KAAKwP,eAAe5F,GACjC,MAA8B,kBAAhBI,EAAKuI,QAAwBvI,EAAKuI,QAAUtE,EAAQsE,MACtE,CACAu1B,qBAAqBl+B,EAAcg8B,GAClB5lC,KAAKwP,eAAe5F,GAC5B2I,QAAUqzB,CACnB,CACAmC,qBAAqBz+B,GACjBtJ,KAAK2jC,eAAer6B,IAAUtJ,KAAK2jC,eAAer6B,EACtD,CACA0+B,kBAAkB1+B,GACd,OAAQtJ,KAAK2jC,eAAer6B,EAChC,CACH2+B,kBAAkBr+B,EAAcgL,EAAWgxB,GACpC,MAAMj8B,EAAOi8B,EAAU,OAAS,OAC1B57B,EAAOhK,KAAKwP,eAAe5F,GAC3BnJ,EAAQuJ,EAAKY,WAAW8K,wBAAmBpV,EAAWqJ,IACxD,OAAQiL,IACR5K,EAAKsF,KAAKsF,GAAWrC,QAAUqzB,EAC/B5lC,KAAKgG,WAELhG,KAAK8nC,qBAAqBl+B,EAAcg8B,GACxCnlC,EAAMuF,OAAOgE,EAAM,CACf47B,YAEJ5lC,KAAKgG,QAAQwG,GAAMA,EAAI5C,eAAiBA,EAAeD,OAAOrJ,IAEtE,CACA4nC,KAAKt+B,EAAcgL,GACf5U,KAAKioC,kBAAkBr+B,EAAcgL,GAAW,EACpD,CACAuzB,KAAKv+B,EAAcgL,GACf5U,KAAKioC,kBAAkBr+B,EAAcgL,GAAW,EACpD,CACH0wB,oBAAoB17B,GACb,MAAMI,EAAOhK,KAAKqjC,UAAUz5B,GACxBI,GAAQA,EAAKY,YACbZ,EAAKY,WAAWgF,kBAEb5P,KAAKqjC,UAAUz5B,EAC1B,CACAw+B,QACI,IAAIlmC,EAAGmH,EAGP,IAFArJ,KAAKyD,OACLI,EAASF,OAAO3D,MACZkC,EAAI,EAAGmH,EAAOrJ,KAAKsP,KAAKC,SAASvN,OAAQE,EAAImH,IAAQnH,EACrDlC,KAAKslC,oBAAoBpjC,EAEjC,CACAmmC,UACIroC,KAAKwvB,cAAc,iBACnB,MAAM,OAAEhN,EAAO,IAAEhW,GAASxM,KAC1BA,KAAKooC,QACLpoC,KAAK2G,OAAO85B,aACRje,IACAxiB,KAAK6mC,gBACL,QAAYrkB,EAAQhW,GACpBxM,KAAKwgC,SAAS9d,eAAelW,GAC7BxM,KAAKwiB,OAAS,KACdxiB,KAAKwM,IAAM,aAERg2B,GAAUxiC,KAAKsL,IACtBtL,KAAKwvB,cAAc,eACvB,CACA8Y,iBAAiB9wB,GACb,OAAOxX,KAAKwiB,OAAO+lB,aAAa/wB,EACpC,CACH0sB,aACOlkC,KAAKwoC,iBACDxoC,KAAK2H,QAAQs8B,WACbjkC,KAAKyoC,uBAELzoC,KAAK4jC,UAAW,CAExB,CACH4E,iBACO,MAAM3nC,EAAYb,KAAKujC,WACjB/C,EAAWxgC,KAAKwgC,SAChBkI,EAAO,CAAC/nC,EAAMiiB,KAChB4d,EAAS7d,iBAAiB3iB,KAAMW,EAAMiiB,GACtC/hB,EAAUF,GAAQiiB,CAAQ,EAExBA,EAAW,CAACzd,EAAGiJ,EAAGC,KACpBlJ,EAAEwjC,QAAUv6B,EACZjJ,EAAEyjC,QAAUv6B,EACZrO,KAAKwmC,cAAcrhC,EAAE,GAEzB,OAAKnF,KAAK2H,QAAQi/B,QAASjmC,GAAO+nC,EAAK/nC,EAAMiiB,IACjD,CACH6lB,uBACYzoC,KAAKwjC,uBACNxjC,KAAKwjC,qBAAuB,CAAC,GAEjC,MAAM3iC,EAAYb,KAAKwjC,qBACjBhD,EAAWxgC,KAAKwgC,SAChBkI,EAAO,CAAC/nC,EAAMiiB,KAChB4d,EAAS7d,iBAAiB3iB,KAAMW,EAAMiiB,GACtC/hB,EAAUF,GAAQiiB,CAAQ,EAExBimB,EAAU,CAACloC,EAAMiiB,KACf/hB,EAAUF,KACV6/B,EAAS3d,oBAAoB7iB,KAAMW,EAAMiiB,UAClC/hB,EAAUF,GACrB,EAEEiiB,EAAW,CAAClE,EAAOE,KACjB5e,KAAKwiB,QACLxiB,KAAKulB,OAAO7G,EAAOE,EACvB,EAEJ,IAAIkqB,EACJ,MAAMlF,EAAW,KACbiF,EAAQ,SAAUjF,GAClB5jC,KAAK4jC,UAAW,EAChB5jC,KAAKulB,SACLmjB,EAAK,SAAU9lB,GACf8lB,EAAK,SAAUI,EAAS,EAE5BA,EAAW,KACP9oC,KAAK4jC,UAAW,EAChBiF,EAAQ,SAAUjmB,GAClB5iB,KAAKooC,QACLpoC,KAAKokC,QAAQ,EAAG,GAChBsE,EAAK,SAAU9E,EAAS,EAExBpD,EAASxd,WAAWhjB,KAAKwiB,QACzBohB,IAEAkF,GAER,CACHjC,gBACO,OAAK7mC,KAAKujC,YAAY,CAAC3gB,EAAUjiB,KAC7BX,KAAKwgC,SAAS3d,oBAAoB7iB,KAAMW,EAAMiiB,EAAS,IAE3D5iB,KAAKujC,WAAa,CAAC,GACnB,OAAKvjC,KAAKwjC,sBAAsB,CAAC5gB,EAAUjiB,KACvCX,KAAKwgC,SAAS3d,oBAAoB7iB,KAAMW,EAAMiiB,EAAS,IAE3D5iB,KAAKwjC,0BAAuBljC,CAChC,CACAyoC,iBAAiBhnC,EAAO4H,EAAMif,GAC1B,MAAMogB,EAASpgB,EAAU,MAAQ,SACjC,IAAI5e,EAAM/H,EAAMC,EAAGmH,EAKnB,IAJa,YAATM,IACAK,EAAOhK,KAAKwP,eAAezN,EAAM,GAAG6H,cACpCI,EAAKY,WAAW,IAAMo+B,EAAS,wBAE/B9mC,EAAI,EAAGmH,EAAOtH,EAAMC,OAAQE,EAAImH,IAAQnH,EAAE,CAC1CD,EAAOF,EAAMG,GACb,MAAM0I,EAAa3I,GAAQjC,KAAKwP,eAAevN,EAAK2H,cAAcgB,WAC9DA,GACAA,EAAWo+B,EAAS,cAAc/mC,EAAKqS,QAASrS,EAAK2H,aAAc3H,EAAKqH,MAEhF,CACJ,CACH2/B,oBACO,OAAOjpC,KAAKoC,SAAW,EAC3B,CACH8mC,kBAAkBC,GACX,MAAMC,EAAappC,KAAKoC,SAAW,GAC7B2D,EAASojC,EAAepE,KAAI,EAAGn7B,eAAeN,YAChD,MAAMU,EAAOhK,KAAKwP,eAAe5F,GACjC,IAAKI,EACD,MAAM,IAAImwB,MAAM,6BAA+BvwB,GAEnD,MAAO,CACHA,eACA0K,QAAStK,EAAKsF,KAAKhG,GACnBA,QACH,MAEY,QAAevD,EAAQqjC,KAEpCppC,KAAKoC,QAAU2D,EACf/F,KAAKsjC,WAAa,KAClBtjC,KAAKymC,mBAAmB1gC,EAAQqjC,GAExC,CACH5Z,cAAc2N,EAAM3lB,EAAM3L,GACnB,OAAO7L,KAAK0jC,SAASxG,OAAOl9B,KAAMm9B,EAAM3lB,EAAM3L,EAClD,CACHgC,gBAAgBw7B,GACT,OAA6E,IAAtErpC,KAAK0jC,SAAS9W,OAAO/gB,QAAQ+1B,GAAIA,EAAErE,OAAOjyB,KAAO+9B,IAAUrnC,MACtE,CACHykC,mBAAmB1gC,EAAQqjC,EAAYE,GAChC,MAAMC,EAAevpC,KAAK2H,QAAQ6hC,MAC5B/f,EAAO,CAACjM,EAAG/J,IAAI+J,EAAE3R,QAAQuC,IAAKqF,EAAE2qB,MAAM/vB,GAAID,EAAExE,eAAiByE,EAAEzE,cAAgBwE,EAAE9E,QAAU+E,EAAE/E,UAC7FmgC,EAAchgB,EAAK2f,EAAYrjC,GAC/B2jC,EAAYJ,EAASvjC,EAAS0jB,EAAK1jB,EAAQqjC,GAC7CK,EAAYznC,QACZhC,KAAK+oC,iBAAiBU,EAAaF,EAAa5/B,MAAM,GAEtD+/B,EAAU1nC,QAAUunC,EAAa5/B,MACjC3J,KAAK+oC,iBAAiBW,EAAWH,EAAa5/B,MAAM,EAE5D,CACH68B,cAAcrhC,EAAGmkC,GACV,MAAM9xB,EAAO,CACTzU,MAAOoC,EACPmkC,SACA9L,YAAY,EACZmM,YAAa3pC,KAAKkb,cAAc/V,IAE9BykC,EAAerM,IAAUA,EAAO51B,QAAQi/B,QAAU5mC,KAAK2H,QAAQi/B,QAAQ3oB,SAAS9Y,EAAEihB,OAAOzlB,MAC/F,IAA6D,IAAzDX,KAAKwvB,cAAc,cAAehY,EAAMoyB,GACxC,OAEJ,MAAMtpB,EAAUtgB,KAAK6pC,aAAa1kC,EAAGmkC,EAAQ9xB,EAAKmyB,aAMlD,OALAnyB,EAAKgmB,YAAa,EAClBx9B,KAAKwvB,cAAc,aAAchY,EAAMoyB,IACnCtpB,GAAW9I,EAAK8I,UAChBtgB,KAAKwkC,SAEFxkC,IACX,CACH6pC,aAAa1kC,EAAGmkC,EAAQK,GACjB,MAAQvnC,QAASgnC,EAAa,GAAG,QAAEzhC,GAAa3H,KAC1Cgb,EAAmBsuB,EACnBvjC,EAAS/F,KAAK8pC,mBAAmB3kC,EAAGikC,EAAYO,EAAa3uB,GAC7D+uB,GAAU,QAAc5kC,GACxB6kC,EA5yBb,SAA4B7kC,EAAG6kC,EAAWL,EAAaI,GACpD,OAAKJ,GAA0B,aAAXxkC,EAAExE,KAGlBopC,EACOC,EAEJ7kC,EALI,IAMf,CAoyB0B8kC,CAAmB9kC,EAAGnF,KAAKsjC,WAAYqG,EAAaI,GAClEJ,IACA3pC,KAAKsjC,WAAa,MAClB,OAAS37B,EAAQuiC,QAAS,CACtB/kC,EACAY,EACA/F,MACDA,MACC+pC,IACA,OAASpiC,EAAQwiC,QAAS,CACtBhlC,EACAY,EACA/F,MACDA,OAGX,MAAMsgB,IAAW,QAAeva,EAAQqjC,GAMxC,OALI9oB,GAAWgpB,KACXtpC,KAAKoC,QAAU2D,EACf/F,KAAKymC,mBAAmB1gC,EAAQqjC,EAAYE,IAEhDtpC,KAAKsjC,WAAa0G,EACX1pB,CACX,CACHwpB,mBAAmB3kC,EAAGikC,EAAYO,EAAa3uB,GACxC,GAAe,aAAX7V,EAAExE,KACF,MAAO,GAEX,IAAKgpC,EACD,OAAOP,EAEX,MAAMG,EAAevpC,KAAK2H,QAAQ6hC,MAClC,OAAOxpC,KAAK4nC,0BAA0BziC,EAAGokC,EAAa5/B,KAAM4/B,EAAcvuB,EAC9E,EAEJ,SAAS6nB,KACL,OAAO,OAAKD,GAAMJ,WAAYhiC,GAAQA,EAAMkjC,SAASjG,cACzD,CAmSA,SAAS2M,GAAS59B,EAAK7E,EAAS6e,EAAQ7e,GACpC6E,EAAI69B,SAAU,IAAA77B,GAAegY,EAAM8jB,eAAgB3iC,EAAQ2iC,gBAC3D99B,EAAIwrB,aAAY,IAAAxpB,GAAegY,EAAM2O,WAAYxtB,EAAQwtB,aACzD3oB,EAAIyrB,gBAAiB,IAAAzpB,GAAegY,EAAM6O,iBAAkB1tB,EAAQ0tB,kBACpE7oB,EAAI+9B,UAAW,IAAA/7B,GAAegY,EAAMgkB,gBAAiB7iC,EAAQ6iC,iBAC7Dh+B,EAAIyoB,WAAY,IAAAzmB,GAAegY,EAAM3N,YAAalR,EAAQkR,aAC1DrM,EAAIurB,aAAc,IAAAvpB,GAAegY,EAAMikB,YAAa9iC,EAAQ8iC,YAChE,CACA,SAASrS,GAAO5rB,EAAKk+B,EAAU5lC,GAC3B0H,EAAI4rB,OAAOtzB,EAAOsJ,EAAGtJ,EAAOuJ,EAChC,CAUA,SAASs8B,GAASnyB,EAAQM,EAASgF,EAAS,CAAC,GACzC,MAAM7M,EAAQuH,EAAOxW,QACbV,MAAOspC,EAAc,EAAI5hC,IAAK6hC,EAAY55B,EAAQ,GAAO6M,GACzDxc,MAAOwpC,EAAe9hC,IAAK+hC,GAAgBjyB,EAC7CxX,EAAQF,KAAKmC,IAAIqnC,EAAaE,GAC9B9hC,EAAM5H,KAAKC,IAAIwpC,EAAWE,GAC1BC,EAAUJ,EAAcE,GAAgBD,EAAYC,GAAgBF,EAAcG,GAAcF,EAAYE,EAClH,MAAO,CACH95B,QACA3P,QACAmE,KAAMqT,EAAQrT,KACd4D,KAAML,EAAM1H,IAAU0pC,EAAU/5B,EAAQjI,EAAM1H,EAAQ0H,EAAM1H,EAEpE,CACC,SAAS2pC,GAAYz+B,EAAK+L,EAAMO,EAASgF,GACtC,MAAM,OAAEtF,EAAO,QAAE7Q,GAAa4Q,GACxB,MAAEtH,EAAM,MAAE3P,EAAM,KAAEmE,EAAK,KAAE4D,GAAUshC,GAASnyB,EAAQM,EAASgF,GAC7DotB,EA1BV,SAAuBvjC,GACnB,OAAIA,EAAQwjC,QACD,KAEPxjC,EAAQyjC,SAA8C,aAAnCzjC,EAAQ0jC,uBACpB,KAEJjT,EACX,CAkBuBkT,CAAc3jC,GACjC,IACIzF,EAAGkX,EAAOhI,GADV,KAAE8F,GAAM,EAAK,QAAEnO,GAAa+U,GAAU,CAAC,EAE3C,IAAI5b,EAAI,EAAGA,GAAKmH,IAAQnH,EACpBkX,EAAQZ,GAAQlX,GAASyH,EAAUM,EAAOnH,EAAIA,IAAM+O,GAChDmI,EAAMC,OAECnC,GACP1K,EAAI2rB,OAAO/e,EAAMhL,EAAGgL,EAAM/K,GAC1B6I,GAAO,GAEPg0B,EAAW1+B,EAAK4E,EAAMgI,EAAOrQ,EAASpB,EAAQwjC,SAElD/5B,EAAOgI,GAMX,OAJI3T,IACA2T,EAAQZ,GAAQlX,GAASyH,EAAUM,EAAO,IAAM4H,GAChDi6B,EAAW1+B,EAAK4E,EAAMgI,EAAOrQ,EAASpB,EAAQwjC,YAEzC1lC,CACb,CACC,SAAS8lC,GAAgB/+B,EAAK+L,EAAMO,EAASgF,GAC1C,MAAMtF,EAASD,EAAKC,QACd,MAAEvH,EAAM,MAAE3P,EAAM,KAAE+H,GAAUshC,GAASnyB,EAAQM,EAASgF,IACtD,KAAE5G,GAAM,EAAK,QAAEnO,GAAa+U,GAAU,CAAC,EAC7C,IAEI5b,EAAGkX,EAAOoyB,EAAOC,EAAMC,EAAMC,EAF7BC,EAAO,EACPC,EAAS,EAEb,MAAMC,EAAcxiC,IAAShI,GAASyH,EAAUM,EAAOC,EAAQA,IAAU2H,EACnE86B,EAAQ,KACNN,IAASC,IACTl/B,EAAI4rB,OAAOwT,EAAMF,GACjBl/B,EAAI4rB,OAAOwT,EAAMH,GACjBj/B,EAAI4rB,OAAOwT,EAAMD,GACrB,EAMJ,IAJIz0B,IACAkC,EAAQZ,EAAOszB,EAAW,IAC1Bt/B,EAAI2rB,OAAO/e,EAAMhL,EAAGgL,EAAM/K,IAE1BnM,EAAI,EAAGA,GAAKmH,IAAQnH,EAAE,CAEtB,GADAkX,EAAQZ,EAAOszB,EAAW5pC,IACtBkX,EAAMC,KACN,SAEJ,MAAMjL,EAAIgL,EAAMhL,EACVC,EAAI+K,EAAM/K,EACV29B,EAAa,EAAJ59B,EACX49B,IAAWR,GACPn9B,EAAIo9B,EACJA,EAAOp9B,EACAA,EAAIq9B,IACXA,EAAOr9B,GAEXu9B,GAAQC,EAASD,EAAOx9B,KAAOy9B,IAE/BE,IACAv/B,EAAI4rB,OAAOhqB,EAAGC,GACdm9B,EAAQQ,EACRH,EAAS,EACTJ,EAAOC,EAAOr9B,GAElBs9B,EAAQt9B,CACZ,CACA09B,GACJ,CACC,SAASE,GAAkB1zB,GACxB,MAAMzP,EAAOyP,EAAK5Q,QACZwtB,EAAarsB,EAAKqsB,YAAcrsB,EAAKqsB,WAAWnzB,OAEtD,QADqBuW,EAAKK,YAAeL,EAAK/S,OAAUsD,EAAKsiC,SAA2C,aAAhCtiC,EAAKuiC,wBAA0CviC,EAAKqiC,SAAYhW,GACnHoW,GAAkBN,EAC3C,CAoCA,MAAMiB,GAA8B,mBAAXC,OACzB,SAAShqC,GAAKqK,EAAK+L,EAAMjX,EAAO2P,GACxBi7B,KAAc3zB,EAAK5Q,QAAQmR,QA5BnC,SAA6BtM,EAAK+L,EAAMjX,EAAO2P,GAC3C,IAAIm7B,EAAO7zB,EAAK8zB,MACXD,IACDA,EAAO7zB,EAAK8zB,MAAQ,IAAIF,OACpB5zB,EAAK6zB,KAAKA,EAAM9qC,EAAO2P,IACvBm7B,EAAKE,aAGblC,GAAS59B,EAAK+L,EAAK5Q,SACnB6E,EAAI6rB,OAAO+T,EACf,CAmBQG,CAAoB//B,EAAK+L,EAAMjX,EAAO2P,GAlB9C,SAA0BzE,EAAK+L,EAAMjX,EAAO2P,GACxC,MAAM,SAAEu7B,EAAS,QAAE7kC,GAAa4Q,EAC1Bk0B,EAAgBR,GAAkB1zB,GACxC,IAAK,MAAMO,KAAW0zB,EAClBpC,GAAS59B,EAAK7E,EAASmR,EAAQ0N,OAC/Bha,EAAI0rB,YACAuU,EAAcjgC,EAAK+L,EAAMO,EAAS,CAClCxX,QACA0H,IAAK1H,EAAQ2P,EAAQ,KAErBzE,EAAI8/B,YAER9/B,EAAI6rB,QAEZ,CAMQqU,CAAiBlgC,EAAK+L,EAAMjX,EAAO2P,EAE3C,CACA,MAAM07B,WAAoBplB,GACtBjb,UAAY,OACfA,gBAAkB,CACXg+B,eAAgB,OAChBnV,WAAY,GACZE,iBAAkB,EAClBmV,gBAAiB,QACjB3xB,YAAa,EACb+zB,iBAAiB,EACjBvB,uBAAwB,UACxBz9B,MAAM,EACNuK,UAAU,EACVgzB,SAAS,EACTC,QAAS,GAEhB9+B,qBAAuB,CAChB8qB,gBAAiB,kBACjBqT,YAAa,eAEjBn+B,mBAAqB,CACjBugC,aAAa,EACbC,WAAavd,GAAgB,eAATA,GAAkC,SAATA,GAEjDxvB,YAAY8E,GACRyT,QACAtY,KAAK+Y,UAAW,EAChB/Y,KAAK2H,aAAUrH,EACfN,KAAK4G,YAAStG,EACdN,KAAKwF,WAAQlF,EACbN,KAAK+sC,eAAYzsC,EACjBN,KAAKqsC,WAAQ/rC,EACbN,KAAKgtC,aAAU1sC,EACfN,KAAKitC,eAAY3sC,EACjBN,KAAK4Y,YAAa,EAClB5Y,KAAKktC,gBAAiB,EACtBltC,KAAK2Y,mBAAgBrY,EACjBuE,GACAmC,OAAOa,OAAO7H,KAAM6E,EAE5B,CACAmV,oBAAoB5F,EAAWvF,GAC3B,MAAMlH,EAAU3H,KAAK2H,QACrB,IAAKA,EAAQyjC,SAA8C,aAAnCzjC,EAAQ0jC,0BAA2C1jC,EAAQwjC,UAAYnrC,KAAKktC,eAAgB,CAChH,MAAMznC,EAAOkC,EAAQwQ,SAAWnY,KAAKwF,MAAQxF,KAAK+sC,WAClD,QAA2B/sC,KAAKgtC,QAASrlC,EAASyM,EAAW3O,EAAMoJ,GACnE7O,KAAKktC,gBAAiB,CAC1B,CACJ,CACI10B,WAAOA,GACPxY,KAAKgtC,QAAUx0B,SACRxY,KAAKitC,iBACLjtC,KAAKqsC,MACZrsC,KAAKktC,gBAAiB,CAC1B,CACI10B,aACA,OAAOxY,KAAKgtC,OAChB,CACIR,eACA,OAAOxsC,KAAKitC,YAAcjtC,KAAKitC,WAAY,QAAiBjtC,KAAMA,KAAK2H,QAAQmR,SACnF,CACHkQ,QACO,MAAMwjB,EAAWxsC,KAAKwsC,SAChBh0B,EAASxY,KAAKwY,OACpB,OAAOg0B,EAASxqC,QAAUwW,EAAOg0B,EAAS,GAAGlrC,MACjD,CACH2nB,OACO,MAAMujB,EAAWxsC,KAAKwsC,SAChBh0B,EAASxY,KAAKwY,OACdvH,EAAQu7B,EAASxqC,OACvB,OAAOiP,GAASuH,EAAOg0B,EAASv7B,EAAQ,GAAGjI,IAC/C,CACHmkC,YAAY/zB,EAAOohB,GACZ,MAAM7yB,EAAU3H,KAAK2H,QACfa,EAAQ4Q,EAAMohB,GACdhiB,EAASxY,KAAKwY,OACdg0B,GAAW,QAAexsC,KAAM,CAClCw6B,WACAl5B,MAAOkH,EACPQ,IAAKR,IAET,IAAKgkC,EAASxqC,OACV,OAEJ,MAAM6mB,EAAS,GACTukB,EA/Hb,SAAiCzlC,GAC9B,OAAIA,EAAQwjC,QACD,KAEPxjC,EAAQyjC,SAA8C,aAAnCzjC,EAAQ0jC,uBACpB,KAEJ,IACX,CAuH6BgC,CAAwB1lC,GAC7C,IAAIzF,EAAGmH,EACP,IAAInH,EAAI,EAAGmH,EAAOmjC,EAASxqC,OAAQE,EAAImH,IAAQnH,EAAE,CAC7C,MAAM,MAAEZ,EAAM,IAAE0H,GAASwjC,EAAStqC,GAC5B21B,EAAKrf,EAAOlX,GACZw2B,EAAKtf,EAAOxP,GAClB,GAAI6uB,IAAOC,EAAI,CACXjP,EAAO5lB,KAAK40B,GACZ,QACJ,CACA,MACMyV,EAAeF,EAAavV,EAAIC,EAD5B12B,KAAKwY,KAAKpR,EAAQqvB,EAAG2C,KAAc1C,EAAG0C,GAAY3C,EAAG2C,KAClB7yB,EAAQwjC,SACrDmC,EAAa9S,GAAYphB,EAAMohB,GAC/B3R,EAAO5lB,KAAKqqC,EAChB,CACA,OAAyB,IAAlBzkB,EAAO7mB,OAAe6mB,EAAO,GAAKA,CAC7C,CACHoiB,YAAYz+B,EAAKsM,EAASgF,GAEnB,OADsBmuB,GAAkBjsC,KACjCysC,CAAcjgC,EAAKxM,KAAM8Y,EAASgF,EAC7C,CACHsuB,KAAK5/B,EAAKlL,EAAO2P,GACV,MAAMu7B,EAAWxsC,KAAKwsC,SAChBC,EAAgBR,GAAkBjsC,MACxC,IAAIyF,EAAOzF,KAAKwF,MAChBlE,EAAQA,GAAS,EACjB2P,EAAQA,GAASjR,KAAKwY,OAAOxW,OAASV,EACtC,IAAK,MAAMwX,KAAW0zB,EAClB/mC,GAAQgnC,EAAcjgC,EAAKxM,KAAM8Y,EAAS,CACtCxX,QACA0H,IAAK1H,EAAQ2P,EAAQ,IAG7B,QAASxL,CACb,CACHtD,KAAKqK,EAAK4H,EAAW9S,EAAO2P,GACrB,MAAMtJ,EAAU3H,KAAK2H,SAAW,CAAC,GAClB3H,KAAKwY,QAAU,IACnBxW,QAAU2F,EAAQkR,cACzBrM,EAAI6qB,OACJl1B,GAAKqK,EAAKxM,KAAMsB,EAAO2P,GACvBzE,EAAIgrB,WAEJx3B,KAAK+Y,WACL/Y,KAAKktC,gBAAiB,EACtBltC,KAAKqsC,WAAQ/rC,EAErB,EAGJ,SAASitC,GAAUjzB,EAAI6C,EAAKjS,EAAM8P,GAC9B,MAAMrT,EAAU2S,EAAG3S,SACX,CAACuD,GAAO1C,GAAW8R,EAAGiC,SAAS,CACnCrR,GACD8P,GACH,OAAO5Z,KAAKwY,IAAIuD,EAAM3U,GAASb,EAAQ6lC,OAAS7lC,EAAQ8lC,SAC5D,CACA,MAAMC,WAAqBnmB,GACvBjb,UAAY,QAGVA,gBAAkB,CAChBuM,YAAa,EACb40B,UAAW,EACXE,iBAAkB,EAClBC,YAAa,EACbC,WAAY,SACZL,OAAQ,EACR3X,SAAU,GAIZvpB,qBAAuB,CACrB8qB,gBAAiB,kBACjBqT,YAAa,eAEjB1qC,YAAY8E,GACRyT,QACAtY,KAAK2H,aAAUrH,EACfN,KAAK6K,YAASvK,EACdN,KAAKqZ,UAAO/Y,EACZN,KAAKyD,UAAOnD,EACRuE,GACAmC,OAAOa,OAAO7H,KAAM6E,EAE5B,CACAsW,QAAQ2yB,EAAQC,EAAQ/yB,GACpB,MAAMrT,EAAU3H,KAAK2H,SACf,EAAEyG,EAAE,EAAEC,GAAOrO,KAAKuc,SAAS,CAC7B,IACA,KACDvB,GACH,OAAO5Z,KAAK0a,IAAIgyB,EAAS1/B,EAAG,GAAKhN,KAAK0a,IAAIiyB,EAAS1/B,EAAG,GAAKjN,KAAK0a,IAAInU,EAAQ8lC,UAAY9lC,EAAQ6lC,OAAQ,EAC5G,CACAQ,SAASF,EAAQ9yB,GACb,OAAOuyB,GAAUvtC,KAAM8tC,EAAQ,IAAK9yB,EACxC,CACAizB,SAASF,EAAQ/yB,GACb,OAAOuyB,GAAUvtC,KAAM+tC,EAAQ,IAAK/yB,EACxC,CACAkB,eAAelB,GACX,MAAM,EAAE5M,EAAE,EAAEC,GAAOrO,KAAKuc,SAAS,CAC7B,IACA,KACDvB,GACH,MAAO,CACH5M,IACAC,IAER,CACA3F,KAAKf,GAED,IAAI6lC,GADJ7lC,EAAUA,GAAW3H,KAAK2H,SAAW,CAAC,GACjB6lC,QAAU,EAC/BA,EAASpsC,KAAKmC,IAAIiqC,EAAQA,GAAU7lC,EAAQimC,aAAe,GAE3D,OAAgC,GAAxBJ,GADYA,GAAU7lC,EAAQkR,aAAe,GAEzD,CACA1W,KAAKqK,EAAK2H,GACN,MAAMxM,EAAU3H,KAAK2H,QACjB3H,KAAKqZ,MAAQ1R,EAAQ6lC,OAAS,MAAQ,OAAextC,KAAMmU,EAAMnU,KAAK0I,KAAKf,GAAW,KAG1F6E,EAAIurB,YAAcpwB,EAAQ8iC,YAC1Bj+B,EAAIyoB,UAAYttB,EAAQkR,YACxBrM,EAAI8qB,UAAY3vB,EAAQyvB,iBACxB,QAAU5qB,EAAK7E,EAAS3H,KAAKoO,EAAGpO,KAAKqO,GACzC,CACAkM,WACI,MAAM5S,EAAU3H,KAAK2H,SAAW,CAAC,EAEjC,OAAOA,EAAQ6lC,OAAS7lC,EAAQ8lC,SACpC,EA2hCJ,MAAMS,GAAa,CAACC,EAAW7U,KAC3B,IAAI,UAAE8U,EAAW9U,EAAS,SAAE+U,EAAU/U,GAAc6U,EAKpD,OAJIA,EAAUG,gBACVF,EAAYhtC,KAAKC,IAAI+sC,EAAW9U,GAChC+U,EAAWF,EAAUI,iBAAmBntC,KAAKC,IAAIgtC,EAAU/U,IAExD,CACH+U,WACAD,YACAI,WAAYptC,KAAKmC,IAAI+1B,EAAU8U,GAClC,EAGL,MAAMK,WAAelnB,GACpBxnB,YAAY4G,GACL2R,QACAtY,KAAK0uC,QAAS,EACd1uC,KAAK2uC,eAAiB,GAC7B3uC,KAAK4uC,aAAe,KACb5uC,KAAK6uC,cAAe,EACpB7uC,KAAKQ,MAAQmG,EAAOnG,MACpBR,KAAK2H,QAAUhB,EAAOgB,QACtB3H,KAAKwM,IAAM7F,EAAO6F,IAClBxM,KAAK8uC,iBAAcxuC,EACnBN,KAAK+uC,iBAAczuC,EACnBN,KAAKgvC,gBAAa1uC,EAClBN,KAAK2rB,eAAYrrB,EACjBN,KAAK0rB,cAAWprB,EAChBN,KAAK0T,SAAMpT,EACXN,KAAK4T,YAAStT,EACdN,KAAK6T,UAAOvT,EACZN,KAAK2T,WAAQrT,EACbN,KAAK4e,YAASte,EACdN,KAAK0e,WAAQpe,EACbN,KAAKyrB,cAAWnrB,EAChBN,KAAK2a,cAAWra,EAChBN,KAAK2d,YAASrd,EACdN,KAAKwe,cAAWle,CACpB,CACA0F,OAAO0lB,EAAUC,EAAW8B,GACxBztB,KAAK0rB,SAAWA,EAChB1rB,KAAK2rB,UAAYA,EACjB3rB,KAAKyrB,SAAWgC,EAChBztB,KAAK8tB,gBACL9tB,KAAKivC,cACLjvC,KAAK8uB,KACT,CACAhB,gBACQ9tB,KAAKohB,gBACLphB,KAAK0e,MAAQ1e,KAAK0rB,SAClB1rB,KAAK6T,KAAO7T,KAAKyrB,SAAS5X,KAC1B7T,KAAK2T,MAAQ3T,KAAK0e,QAElB1e,KAAK4e,OAAS5e,KAAK2rB,UACnB3rB,KAAK0T,IAAM1T,KAAKyrB,SAAS/X,IACzB1T,KAAK4T,OAAS5T,KAAK4e,OAE3B,CACAqwB,cACI,MAAMd,EAAYnuC,KAAK2H,QAAQ8J,QAAU,CAAC,EAC1C,IAAIq9B,GAAc,OAASX,EAAUe,eAAgB,CACjDlvC,KAAKQ,OACNR,OAAS,GACRmuC,EAAUtiC,SACVijC,EAAcA,EAAYjjC,QAAQ5J,GAAOksC,EAAUtiC,OAAO5J,EAAMjC,KAAKQ,MAAM8O,SAE3E6+B,EAAU5wB,OACVuxB,EAAcA,EAAYvxB,MAAK,CAACC,EAAG/J,IAAI06B,EAAU5wB,KAAKC,EAAG/J,EAAGzT,KAAKQ,MAAM8O,SAEvEtP,KAAK2H,QAAQoB,SACb+lC,EAAY/lC,UAEhB/I,KAAK8uC,YAAcA,CACvB,CACAhgB,MACI,MAAM,QAAEnnB,EAAQ,IAAE6E,GAASxM,KAC3B,IAAK2H,EAAQua,QAET,YADAliB,KAAK0e,MAAQ1e,KAAK4e,OAAS,GAG/B,MAAMuvB,EAAYxmC,EAAQ8J,OACpB09B,GAAY,QAAOhB,EAAUjjB,MAC7BoO,EAAW6V,EAAUzmC,KACrBqoB,EAAc/wB,KAAKovC,uBACnB,SAAEf,EAAS,WAAEG,GAAgBN,GAAWC,EAAW7U,GACzD,IAAI5a,EAAOE,EACXpS,EAAI0e,KAAOikB,EAAU1c,OACjBzyB,KAAKohB,gBACL1C,EAAQ1e,KAAK0rB,SACb9M,EAAS5e,KAAKqvC,SAASte,EAAauI,EAAU+U,EAAUG,GAAc,KAEtE5vB,EAAS5e,KAAK2rB,UACdjN,EAAQ1e,KAAKsvC,SAASve,EAAaoe,EAAWd,EAAUG,GAAc,IAE1ExuC,KAAK0e,MAAQtd,KAAKC,IAAIqd,EAAO/W,EAAQ+jB,UAAY1rB,KAAK0rB,UACtD1rB,KAAK4e,OAASxd,KAAKC,IAAIud,EAAQjX,EAAQgkB,WAAa3rB,KAAK2rB,UAC7D,CACH0jB,SAASte,EAAauI,EAAU+U,EAAUG,GACnC,MAAM,IAAEhiC,EAAI,SAAEkf,EAAW/jB,SAAW8J,QAAQ,QAAEiP,KAAmB1gB,KAC3DuvC,EAAWvvC,KAAK2uC,eAAiB,GACjCK,EAAahvC,KAAKgvC,WAAa,CACjC,GAEE5jB,EAAaojB,EAAa9tB,EAChC,IAAI8uB,EAAcze,EAClBvkB,EAAIspB,UAAY,OAChBtpB,EAAIypB,aAAe,SACnB,IAAIwZ,GAAO,EACP/7B,GAAO0X,EAkBX,OAjBAprB,KAAK8uC,YAAY9tC,SAAQ,CAAC0uC,EAAYxtC,KAClC,MAAMytC,EAAYtB,EAAW/U,EAAW,EAAI9sB,EAAIojC,YAAYF,EAAWvkB,MAAMzM,OACnE,IAANxc,GAAW8sC,EAAWA,EAAWhtC,OAAS,GAAK2tC,EAAY,EAAIjvB,EAAUgL,KACzE8jB,GAAepkB,EACf4jB,EAAWA,EAAWhtC,QAAUE,EAAI,EAAI,EAAI,IAAM,EAClDwR,GAAO0X,EACPqkB,KAEJF,EAASrtC,GAAK,CACV2R,KAAM,EACNH,MACA+7B,MACA/wB,MAAOixB,EACP/wB,OAAQ4vB,GAEZQ,EAAWA,EAAWhtC,OAAS,IAAM2tC,EAAYjvB,CAAO,IAErD8uB,CACX,CACAF,SAASve,EAAaoe,EAAWd,EAAUwB,GACvC,MAAM,IAAErjC,EAAI,UAAEmf,EAAYhkB,SAAW8J,QAAQ,QAAEiP,KAAmB1gB,KAC5DuvC,EAAWvvC,KAAK2uC,eAAiB,GACjCI,EAAc/uC,KAAK+uC,YAAc,GACjCe,EAAcnkB,EAAYoF,EAChC,IAAIgf,EAAarvB,EACbsvB,EAAkB,EAClBC,EAAmB,EACnBp8B,EAAO,EACPq8B,EAAM,EA4BV,OA3BAlwC,KAAK8uC,YAAY9tC,SAAQ,CAAC0uC,EAAYxtC,KAClC,MAAM,UAAEytC,EAAU,WAAEnB,GAqRhC,SAA2BH,EAAUc,EAAW3iC,EAAKkjC,EAAYG,GAC7D,MAAMF,EAOV,SAA4BD,EAAYrB,EAAUc,EAAW3iC,GACzD,IAAI2jC,EAAiBT,EAAWvkB,KAC5BglB,GAA4C,iBAAnBA,IACzBA,EAAiBA,EAAe/sC,QAAO,CAACoa,EAAG/J,IAAI+J,EAAExb,OAASyR,EAAEzR,OAASwb,EAAI/J,KAE7E,OAAO46B,EAAWc,EAAUzmC,KAAO,EAAI8D,EAAIojC,YAAYO,GAAgBzxB,KAC3E,CAbsB0xB,CAAmBV,EAAYrB,EAAUc,EAAW3iC,GAChEgiC,EAaV,SAA6BqB,EAAaH,EAAYW,GAClD,IAAI7B,EAAaqB,EACc,iBAApBH,EAAWvkB,OAClBqjB,EAAa8B,GAA0BZ,EAAYW,IAEvD,OAAO7B,CACX,CAnBuB+B,CAAoBV,EAAaH,EAAYP,EAAU/jB,YAC1E,MAAO,CACHukB,YACAnB,aAER,CA5RgDgC,CAAkBnC,EAAUc,EAAW3iC,EAAKkjC,EAAYG,GACxF3tC,EAAI,GAAK+tC,EAAmBzB,EAAa,EAAI9tB,EAAUovB,IACvDC,GAAcC,EAAkBtvB,EAChCquB,EAAY9rC,KAAK,CACbyb,MAAOsxB,EACPpxB,OAAQqxB,IAEZp8B,GAAQm8B,EAAkBtvB,EAC1BwvB,IACAF,EAAkBC,EAAmB,GAEzCV,EAASrtC,GAAK,CACV2R,OACAH,IAAKu8B,EACLC,MACAxxB,MAAOixB,EACP/wB,OAAQ4vB,GAEZwB,EAAkB5uC,KAAKmC,IAAIysC,EAAiBL,GAC5CM,GAAoBzB,EAAa9tB,CAAO,IAE5CqvB,GAAcC,EACdjB,EAAY9rC,KAAK,CACbyb,MAAOsxB,EACPpxB,OAAQqxB,IAELF,CACX,CACAU,iBACI,IAAKzwC,KAAK2H,QAAQua,QACd,OAEJ,MAAM6O,EAAc/wB,KAAKovC,uBACjBT,eAAgBY,EAAW5nC,SAAS,MAAE2jB,EAAQ7Z,QAAQ,QAAEiP,GAAW,IAAEgwB,IAAY1wC,KACnF2wC,GAAY,QAAcD,EAAK1wC,KAAK6T,KAAM7T,KAAK0e,OACrD,GAAI1e,KAAKohB,eAAgB,CACrB,IAAIquB,EAAM,EACN57B,GAAO,QAAeyX,EAAOtrB,KAAK6T,KAAO6M,EAAS1gB,KAAK2T,MAAQ3T,KAAKgvC,WAAWS,IACnF,IAAK,MAAMmB,KAAUrB,EACbE,IAAQmB,EAAOnB,MACfA,EAAMmB,EAAOnB,IACb57B,GAAO,QAAeyX,EAAOtrB,KAAK6T,KAAO6M,EAAS1gB,KAAK2T,MAAQ3T,KAAKgvC,WAAWS,KAEnFmB,EAAOl9B,KAAO1T,KAAK0T,IAAMqd,EAAcrQ,EACvCkwB,EAAO/8B,KAAO88B,EAAUE,WAAWF,EAAUviC,EAAEyF,GAAO+8B,EAAOlyB,OAC7D7K,GAAQ+8B,EAAOlyB,MAAQgC,CAE/B,KAAO,CACH,IAAIwvB,EAAM,EACNx8B,GAAM,QAAe4X,EAAOtrB,KAAK0T,IAAMqd,EAAcrQ,EAAS1gB,KAAK4T,OAAS5T,KAAK+uC,YAAYmB,GAAKtxB,QACtG,IAAK,MAAMkyB,KAAWvB,EACduB,EAAQZ,MAAQA,IAChBA,EAAMY,EAAQZ,IACdx8B,GAAM,QAAe4X,EAAOtrB,KAAK0T,IAAMqd,EAAcrQ,EAAS1gB,KAAK4T,OAAS5T,KAAK+uC,YAAYmB,GAAKtxB,SAEtGkyB,EAAQp9B,IAAMA,EACdo9B,EAAQj9B,MAAQ7T,KAAK6T,KAAO6M,EAC5BowB,EAAQj9B,KAAO88B,EAAUE,WAAWF,EAAUviC,EAAE0iC,EAAQj9B,MAAOi9B,EAAQpyB,OACvEhL,GAAOo9B,EAAQlyB,OAAS8B,CAEhC,CACJ,CACAU,eACI,MAAiC,QAA1BphB,KAAK2H,QAAQgT,UAAgD,WAA1B3a,KAAK2H,QAAQgT,QAC3D,CACAxY,OACI,GAAInC,KAAK2H,QAAQua,QAAS,CACtB,MAAM1V,EAAMxM,KAAKwM,KACjB,OAASA,EAAKxM,MACdA,KAAK+wC,SACL,OAAWvkC,EACf,CACJ,CACHukC,QACO,MAAQppC,QAASmB,EAAK,YAAEimC,EAAY,WAAEC,EAAW,IAAExiC,GAASxM,MACtD,MAAEsrB,EAAQ7Z,OAAQ08B,GAAerlC,EACjCkoC,EAAe,EAAA9pC,EAAA,MACfypC,GAAY,QAAc7nC,EAAK4nC,IAAK1wC,KAAK6T,KAAM7T,KAAK0e,OACpDywB,GAAY,QAAOhB,EAAUjjB,OAC7B,QAAExK,GAAaytB,EACf7U,EAAW6V,EAAUzmC,KACrBuoC,EAAe3X,EAAW,EAChC,IAAI4X,EACJlxC,KAAK24B,YACLnsB,EAAIspB,UAAY6a,EAAU7a,UAAU,QACpCtpB,EAAIypB,aAAe,SACnBzpB,EAAIyoB,UAAY,GAChBzoB,EAAI0e,KAAOikB,EAAU1c,OACrB,MAAM,SAAE4b,EAAS,UAAED,EAAU,WAAEI,GAAgBN,GAAWC,EAAW7U,GAqD/DlY,EAAephB,KAAKohB,eACpB2P,EAAc/wB,KAAKovC,sBAErB8B,EADA9vB,EACS,CACLhT,GAAG,QAAekd,EAAOtrB,KAAK6T,KAAO6M,EAAS1gB,KAAK2T,MAAQq7B,EAAW,IACtE3gC,EAAGrO,KAAK0T,IAAMgN,EAAUqQ,EACxBxY,KAAM,GAGD,CACLnK,EAAGpO,KAAK6T,KAAO6M,EACfrS,GAAG,QAAeid,EAAOtrB,KAAK0T,IAAMqd,EAAcrQ,EAAS1gB,KAAK4T,OAASm7B,EAAY,GAAGnwB,QACxFrG,KAAM,IAGd,QAAsBvY,KAAKwM,IAAK1D,EAAKqoC,eACrC,MAAM/lB,EAAaojB,EAAa9tB,EAChC1gB,KAAK8uC,YAAY9tC,SAAQ,CAAC0uC,EAAYxtC,KAClCsK,EAAIurB,YAAc2X,EAAW0B,UAC7B5kC,EAAI8qB,UAAYoY,EAAW0B,UAC3B,MAAMC,EAAY7kC,EAAIojC,YAAYF,EAAWvkB,MAAMzM,MAC7CoX,EAAY6a,EAAU7a,UAAU4Z,EAAW5Z,YAAc4Z,EAAW5Z,UAAYqY,EAAUrY,YAC1FpX,EAAQ2vB,EAAW4C,EAAeI,EACxC,IAAIjjC,EAAI8iC,EAAO9iC,EACXC,EAAI6iC,EAAO7iC,EACfsiC,EAAUW,SAAStxC,KAAK0e,OACpB0C,EACIlf,EAAI,GAAKkM,EAAIsQ,EAAQgC,EAAU1gB,KAAK2T,QACpCtF,EAAI6iC,EAAO7iC,GAAK+c,EAChB8lB,EAAO34B,OACPnK,EAAI8iC,EAAO9iC,GAAI,QAAekd,EAAOtrB,KAAK6T,KAAO6M,EAAS1gB,KAAK2T,MAAQq7B,EAAWkC,EAAO34B,QAEtFrW,EAAI,GAAKmM,EAAI+c,EAAaprB,KAAK4T,SACtCxF,EAAI8iC,EAAO9iC,EAAIA,EAAI2gC,EAAYmC,EAAO34B,MAAMmG,MAAQgC,EACpDwwB,EAAO34B,OACPlK,EAAI6iC,EAAO7iC,GAAI,QAAeid,EAAOtrB,KAAK0T,IAAMqd,EAAcrQ,EAAS1gB,KAAK4T,OAASm7B,EAAYmC,EAAO34B,MAAMqG,SAMlH,GA7FkB,SAASxQ,EAAGC,EAAGqhC,GACjC,GAAI/1B,MAAM00B,IAAaA,GAAY,GAAK10B,MAAMy0B,IAAcA,EAAY,EACpE,OAEJ5hC,EAAI6qB,OACJ,MAAMpC,GAAY,IAAAzmB,GAAekhC,EAAWza,UAAW,GAQvD,GAPAzoB,EAAI8qB,WAAY,IAAA9oB,GAAekhC,EAAWpY,UAAW0Z,GACrDxkC,EAAI69B,SAAU,IAAA77B,GAAekhC,EAAWrF,QAAS,QACjD79B,EAAIyrB,gBAAiB,IAAAzpB,GAAekhC,EAAWzX,eAAgB,GAC/DzrB,EAAI+9B,UAAW,IAAA/7B,GAAekhC,EAAWnF,SAAU,SACnD/9B,EAAIyoB,UAAYA,EAChBzoB,EAAIurB,aAAc,IAAAvpB,GAAekhC,EAAW3X,YAAaiZ,GACzDxkC,EAAIwrB,aAAY,IAAAxpB,GAAekhC,EAAW6B,SAAU,KAChDpD,EAAUG,cAAe,CACzB,MAAMkD,EAAc,CAChBhE,OAAQY,EAAYhtC,KAAKqwC,MAAQ,EACjC5D,WAAY6B,EAAW7B,WACvBhY,SAAU6Z,EAAW7Z,SACrBhd,YAAaoc,GAEXyc,EAAUf,EAAUgB,MAAMvjC,EAAGigC,EAAW,GACxCuD,EAAUvjC,EAAI4iC,GACpB,QAAgBzkC,EAAKglC,EAAaE,EAASE,EAASzD,EAAUI,iBAAmBF,EACrF,KAAO,CACH,MAAMwD,EAAUxjC,EAAIjN,KAAKmC,KAAK+1B,EAAW8U,GAAa,EAAG,GACnD0D,EAAWnB,EAAUE,WAAWziC,EAAGigC,GACnC0D,GAAe,QAAcrC,EAAWqC,cAC9CvlC,EAAI0rB,YACAlxB,OAAOS,OAAOsqC,GAAc3T,MAAM5vB,GAAU,IAANA,KACtC,QAAmBhC,EAAK,CACpB4B,EAAG0jC,EACHzjC,EAAGwjC,EACHpyB,EAAG4uB,EACH1uB,EAAGyuB,EACHZ,OAAQuE,IAGZvlC,EAAIwlC,KAAKF,EAAUD,EAASxD,EAAUD,GAE1C5hC,EAAIoB,OACc,IAAdqnB,GACAzoB,EAAI6rB,QAEZ,CACA7rB,EAAIgrB,SACR,CA6CIya,CADctB,EAAUviC,EAAEA,GACLC,EAAGqhC,GACxBthC,GAAI,QAAO0nB,EAAW1nB,EAAIigC,EAAW4C,EAAc7vB,EAAehT,EAAIsQ,EAAQ1e,KAAK2T,MAAO7K,EAAK4nC,KA7ClF,SAAStiC,EAAGC,EAAGqhC,IAC5B,OAAWljC,EAAKkjC,EAAWvkB,KAAM/c,EAAGC,EAAImgC,EAAa,EAAGW,EAAW,CAC/D+C,cAAexC,EAAWn9B,OAC1BujB,UAAW6a,EAAU7a,UAAU4Z,EAAW5Z,YAElD,CAyCIqc,CAASxB,EAAUviC,EAAEA,GAAIC,EAAGqhC,GACxBtuB,EACA8vB,EAAO9iC,GAAKsQ,EAAQgC,OACjB,GAA+B,iBAApBgvB,EAAWvkB,KAAmB,CAC5C,MAAMklB,EAAiBlB,EAAU/jB,WACjC8lB,EAAO7iC,GAAKiiC,GAA0BZ,EAAYW,EACtD,MACIa,EAAO7iC,GAAK+c,CAChB,KAEJ,QAAqBprB,KAAKwM,IAAK1D,EAAKqoC,cACxC,CACHxY,YACO,MAAM7vB,EAAO9I,KAAK2H,QACZkpB,EAAY/nB,EAAK4nB,MACjB0hB,GAAY,QAAOvhB,EAAU3F,MAC7BmnB,GAAe,OAAUxhB,EAAUnQ,SACzC,IAAKmQ,EAAU3O,QACX,OAEJ,MAAMyuB,GAAY,QAAc7nC,EAAK4nC,IAAK1wC,KAAK6T,KAAM7T,KAAK0e,OACpDlS,EAAMxM,KAAKwM,IACXmO,EAAWkW,EAAUlW,SACrBs2B,EAAemB,EAAU1pC,KAAO,EAChC4pC,EAA6BD,EAAa3+B,IAAMu9B,EACtD,IAAI5iC,EACAwF,EAAO7T,KAAK6T,KACZ6X,EAAW1rB,KAAK0e,MACpB,GAAI1e,KAAKohB,eACLsK,EAAWtqB,KAAKmC,OAAOvD,KAAKgvC,YAC5B3gC,EAAIrO,KAAK0T,IAAM4+B,EACfz+B,GAAO,QAAe/K,EAAKwiB,MAAOzX,EAAM7T,KAAK2T,MAAQ+X,OAClD,CACH,MAAMC,EAAY3rB,KAAK+uC,YAAY3rC,QAAO,CAACC,EAAKqF,IAAOtH,KAAKmC,IAAIF,EAAKqF,EAAKkW,SAAS,GACnFvQ,EAAIikC,GAA6B,QAAexpC,EAAKwiB,MAAOtrB,KAAK0T,IAAK1T,KAAK4T,OAAS+X,EAAY7iB,EAAK2I,OAAOiP,QAAU1gB,KAAKovC,sBAC/H,CACA,MAAMhhC,GAAI,QAAeuM,EAAU9G,EAAMA,EAAO6X,GAChDlf,EAAIspB,UAAY6a,EAAU7a,WAAU,QAAmBnb,IACvDnO,EAAIypB,aAAe,SACnBzpB,EAAIurB,YAAclH,EAAUzsB,MAC5BoI,EAAI8qB,UAAYzG,EAAUzsB,MAC1BoI,EAAI0e,KAAOknB,EAAU3f,QACrB,OAAWjmB,EAAKqkB,EAAU1F,KAAM/c,EAAGC,EAAG+jC,EAC1C,CACHhD,sBACO,MAAMve,EAAY7wB,KAAK2H,QAAQ+oB,MACzB0hB,GAAY,QAAOvhB,EAAU3F,MAC7BmnB,GAAe,OAAUxhB,EAAUnQ,SACzC,OAAOmQ,EAAU3O,QAAUkwB,EAAUhnB,WAAainB,EAAazzB,OAAS,CAC5E,CACH2zB,iBAAiBnkC,EAAGC,GACb,IAAInM,EAAGswC,EAAQC,EACf,IAAI,QAAWrkC,EAAGpO,KAAK6T,KAAM7T,KAAK2T,SAAU,QAAWtF,EAAGrO,KAAK0T,IAAK1T,KAAK4T,QAErE,IADA6+B,EAAKzyC,KAAK2uC,eACNzsC,EAAI,EAAGA,EAAIuwC,EAAGzwC,SAAUE,EAExB,GADAswC,EAASC,EAAGvwC,IACR,QAAWkM,EAAGokC,EAAO3+B,KAAM2+B,EAAO3+B,KAAO2+B,EAAO9zB,SAAU,QAAWrQ,EAAGmkC,EAAO9+B,IAAK8+B,EAAO9+B,IAAM8+B,EAAO5zB,QACxG,OAAO5e,KAAK8uC,YAAY5sC,GAIpC,OAAO,IACX,CACHwwC,YAAYvtC,GACL,MAAM2D,EAAO9I,KAAK2H,QAClB,IAyDR,SAAoBhH,EAAMmI,GACtB,IAAc,cAATnI,GAAiC,aAATA,KAAyBmI,EAAKohC,SAAWphC,EAAK6pC,SACvE,OAAO,EAEX,GAAI7pC,EAAKqhC,UAAqB,UAATxpC,GAA6B,YAATA,GACrC,OAAO,EAEX,OAAO,CACX,CAjEaiyC,CAAWztC,EAAExE,KAAMmI,GACpB,OAEJ,MAAM+pC,EAAc7yC,KAAKuyC,iBAAiBptC,EAAEiJ,EAAGjJ,EAAEkJ,GACjD,GAAe,cAAXlJ,EAAExE,MAAmC,aAAXwE,EAAExE,KAAqB,CACjD,MAAM+pC,EAAW1qC,KAAK4uC,aAChBkE,GA3XKr/B,EA2X2Bo/B,EA3XjB,QAAbr1B,EA2XoBktB,IA3XO,OAANj3B,GAAc+J,EAAE5T,eAAiB6J,EAAE7J,cAAgB4T,EAAElU,QAAUmK,EAAEnK,OA4X1FohC,IAAaoI,IACb,OAAShqC,EAAK6pC,QAAS,CACnBxtC,EACAulC,EACA1qC,MACDA,MAEPA,KAAK4uC,aAAeiE,EAChBA,IAAgBC,IAChB,OAAShqC,EAAKohC,QAAS,CACnB/kC,EACA0tC,EACA7yC,MACDA,KAEX,MAAW6yC,IACP,OAAS/pC,EAAKqhC,QAAS,CACnBhlC,EACA0tC,EACA7yC,MACDA,MAhZI,IAACwd,EAAG/J,CAkZnB,EAwBJ,SAAS68B,GAA0BZ,EAAYW,GAE3C,OAAOA,GADaX,EAAWvkB,KAAOukB,EAAWvkB,KAAKnpB,OAAS,GAAM,EAEzE,CAUA,IAAI+wC,GAAgB,CAChBznC,GAAI,SACP0nC,SAAUvE,GACPntC,MAAOd,EAAOyyC,EAAOtrC,GACjB,MAAMurC,EAAS1yC,EAAM0yC,OAAS,IAAIzE,GAAO,CACrCjiC,IAAKhM,EAAMgM,IACX7E,UACAnH,UAEJqd,EAAQ/W,UAAUtG,EAAO0yC,EAAQvrC,GACjCkW,EAAQgD,OAAOrgB,EAAO0yC,EAC1B,EACAzvC,KAAMjD,GACFqd,EAAQmD,UAAUxgB,EAAOA,EAAM0yC,eACxB1yC,EAAM0yC,MACjB,EACA1lB,aAAchtB,EAAOyyC,EAAOtrC,GACxB,MAAMurC,EAAS1yC,EAAM0yC,OACrBr1B,EAAQ/W,UAAUtG,EAAO0yC,EAAQvrC,GACjCurC,EAAOvrC,QAAUA,CACrB,EACAqnB,YAAaxuB,GACT,MAAM0yC,EAAS1yC,EAAM0yC,OACrBA,EAAOjE,cACPiE,EAAOzC,gBACX,EACA0C,WAAY3yC,EAAOgX,GACVA,EAAK8xB,QACN9oC,EAAM0yC,OAAOR,YAAYl7B,EAAKzU,MAEtC,EACAs3B,SAAU,CACNnY,SAAS,EACTvH,SAAU,MACV2Q,MAAO,SACP9M,UAAU,EACVzV,SAAS,EACT4U,OAAQ,IACRwsB,QAAShlC,EAAGuqC,EAAYwD,GACpB,MAAM5pC,EAAQomC,EAAW9lC,aACnBwpC,EAAKF,EAAO1yC,MACd4yC,EAAGvN,iBAAiBv8B,IACpB8pC,EAAGlL,KAAK5+B,GACRomC,EAAWn9B,QAAS,IAEpB6gC,EAAGjL,KAAK7+B,GACRomC,EAAWn9B,QAAS,EAE5B,EACA23B,QAAS,KACTyI,QAAS,KACTlhC,OAAQ,CACJrN,MAAQoI,GAAMA,EAAIhM,MAAMmH,QAAQvD,MAChCiqC,SAAU,GACV3tB,QAAS,GACTwuB,eAAgB1uC,GACZ,MAAM+O,EAAW/O,EAAM8O,KAAKC,UACpBkC,QAAQ,cAAE68B,EAAc,WAAET,EAAW,UAAE/X,EAAU,MAAE1xB,EAAM,gBAAEivC,EAAgB,aAAEtB,IAAqBvxC,EAAM0yC,OAAOvrC,QACvH,OAAOnH,EAAM4I,yBAAyB27B,KAAK/6B,IACvC,MAAMwc,EAAQxc,EAAKY,WAAW2J,SAAS+5B,EAAgB,OAAIhuC,GACrDuY,GAAc,OAAU2N,EAAM3N,aACpC,MAAO,CACHsS,KAAM5b,EAASvF,EAAKV,OAAO+J,MAC3BikB,UAAW9Q,EAAM4Q,gBACjBga,UAAWhtC,EACXmO,QAASvI,EAAK47B,QACdyE,QAAS7jB,EAAM8jB,eACfiH,SAAU/qB,EAAM2O,WAChB8C,eAAgBzR,EAAM6O,iBACtBkV,SAAU/jB,EAAMgkB,gBAChBvV,WAAYpc,EAAY6F,MAAQ7F,EAAY+F,QAAU,EACtDmZ,YAAavR,EAAMikB,YACnBoD,WAAYA,GAAcrnB,EAAMqnB,WAChChY,SAAUrP,EAAMqP,SAChBC,UAAWA,GAAatP,EAAMsP,UAC9Bic,aAAcsB,IAAoBtB,GAAgBvrB,EAAMurB,cACxDnoC,aAAcI,EAAKV,MACtB,GACFtJ,KACP,GAEJ0wB,MAAO,CACHtsB,MAAQoI,GAAMA,EAAIhM,MAAMmH,QAAQvD,MAChC8d,SAAS,EACTvH,SAAU,SACVwQ,KAAM,KAGd+P,YAAa,CACT2R,YAActd,IAAQA,EAAK+jB,WAAW,MACtC7hC,OAAQ,CACJo7B,YAActd,IAAQ,CACd,iBACA,SACA,QACFtR,SAASsR,MAK3B,MAAMgkB,WAAchsB,GACnBxnB,YAAY4G,GACL2R,QACAtY,KAAKQ,MAAQmG,EAAOnG,MACpBR,KAAK2H,QAAUhB,EAAOgB,QACtB3H,KAAKwM,IAAM7F,EAAO6F,IAClBxM,KAAKwzC,cAAWlzC,EAChBN,KAAK0T,SAAMpT,EACXN,KAAK4T,YAAStT,EACdN,KAAK6T,UAAOvT,EACZN,KAAK2T,WAAQrT,EACbN,KAAK0e,WAAQpe,EACbN,KAAK4e,YAASte,EACdN,KAAK2a,cAAWra,EAChBN,KAAK2d,YAASrd,EACdN,KAAKwe,cAAWle,CACpB,CACA0F,OAAO0lB,EAAUC,GACb,MAAM7iB,EAAO9I,KAAK2H,QAGlB,GAFA3H,KAAK6T,KAAO,EACZ7T,KAAK0T,IAAM,GACN5K,EAAKoZ,QAEN,YADAliB,KAAK0e,MAAQ1e,KAAK4e,OAAS5e,KAAK2T,MAAQ3T,KAAK4T,OAAS,GAG1D5T,KAAK0e,MAAQ1e,KAAK2T,MAAQ+X,EAC1B1rB,KAAK4e,OAAS5e,KAAK4T,OAAS+X,EAC5B,MAAMoK,GAAY,OAAQjtB,EAAKqiB,MAAQriB,EAAKqiB,KAAKnpB,OAAS,EAC1DhC,KAAKwzC,UAAW,OAAU1qC,EAAK4X,SAC/B,MAAM+yB,EAAW1d,GAAY,QAAOjtB,EAAKoiB,MAAME,WAAaprB,KAAKwzC,SAAS50B,OACtE5e,KAAKohB,eACLphB,KAAK4e,OAAS60B,EAEdzzC,KAAK0e,MAAQ+0B,CAErB,CACAryB,eACI,MAAMjE,EAAMnd,KAAK2H,QAAQgT,SACzB,MAAe,QAARwC,GAAyB,WAARA,CAC5B,CACAu2B,UAAU1rB,GACN,MAAM,IAAEtU,EAAI,KAAEG,EAAK,OAAED,EAAO,MAAED,EAAM,QAAEhM,GAAa3H,KAC7CsrB,EAAQ3jB,EAAQ2jB,MACtB,IACII,EAAUkN,EAAQC,EADlBhD,EAAW,EAkBf,OAhBI71B,KAAKohB,gBACLwX,GAAS,QAAetN,EAAOzX,EAAMF,GACrCklB,EAASnlB,EAAMsU,EACf0D,EAAW/X,EAAQE,IAEM,SAArBlM,EAAQgT,UACRie,EAAS/kB,EAAOmU,EAChB6Q,GAAS,QAAevN,EAAO1X,EAAQF,GACvCmiB,GAAiB,GAAN,EAAA8d,IAEX/a,EAASjlB,EAAQqU,EACjB6Q,GAAS,QAAevN,EAAO5X,EAAKE,GACpCiiB,EAAgB,GAAL,EAAA8d,GAEfjoB,EAAW9X,EAASF,GAEjB,CACHklB,SACAC,SACAnN,WACAmK,WAER,CACA1zB,OACI,MAAMqK,EAAMxM,KAAKwM,IACX1D,EAAO9I,KAAK2H,QAClB,IAAKmB,EAAKoZ,QACN,OAEJ,MAAM0xB,GAAW,QAAO9qC,EAAKoiB,MAEvBlD,EADa4rB,EAASxoB,WACA,EAAIprB,KAAKwzC,SAAS9/B,KACxC,OAAEklB,EAAO,OAAEC,EAAO,SAAEnN,EAAS,SAAEmK,GAAc71B,KAAK0zC,UAAU1rB,IAClE,OAAWxb,EAAK1D,EAAKqiB,KAAM,EAAG,EAAGyoB,EAAU,CACvCxvC,MAAO0E,EAAK1E,MACZsnB,WACAmK,WACAC,WAAW,QAAmBhtB,EAAKwiB,OACnC2K,aAAc,SACdgB,YAAa,CACT2B,EACAC,IAGZ,EAYJ,IAAIgb,GAAe,CACfvoC,GAAI,QACP0nC,SAAUO,GACPjyC,MAAOd,EAAOyyC,EAAOtrC,IAbzB,SAAqBnH,EAAOqwB,GACxB,MAAMH,EAAQ,IAAI6iB,GAAM,CACpB/mC,IAAKhM,EAAMgM,IACX7E,QAASkpB,EACTrwB,UAEJqd,EAAQ/W,UAAUtG,EAAOkwB,EAAOG,GAChChT,EAAQgD,OAAOrgB,EAAOkwB,GACtBlwB,EAAMszC,WAAapjB,CACvB,CAKQqjB,CAAYvzC,EAAOmH,EACvB,EACAlE,KAAMjD,GACF,MAAMszC,EAAatzC,EAAMszC,WACzBj2B,EAAQmD,UAAUxgB,EAAOszC,UAClBtzC,EAAMszC,UACjB,EACAtmB,aAAchtB,EAAOyyC,EAAOtrC,GACxB,MAAM+oB,EAAQlwB,EAAMszC,WACpBj2B,EAAQ/W,UAAUtG,EAAOkwB,EAAO/oB,GAChC+oB,EAAM/oB,QAAUA,CACpB,EACA0yB,SAAU,CACN/O,MAAO,SACPpJ,SAAS,EACTgJ,KAAM,CACFvN,OAAQ,QAEZa,UAAU,EACVkC,QAAS,GACT/F,SAAU,MACVwQ,KAAM,GACNxN,OAAQ,KAEZ2c,cAAe,CACXl2B,MAAO,SAEX82B,YAAa,CACT2R,aAAa,EACbC,YAAY,IAIR,IAAIkH,QA2ChB,MAAMC,GAAc,CACnBC,QAASnyC,GACF,IAAKA,EAAMC,OACP,OAAO,EAEX,IAAIE,EAAGsnB,EACHpb,EAAI,EACJC,EAAI,EACJ4C,EAAQ,EACZ,IAAI/O,EAAI,EAAGsnB,EAAMznB,EAAMC,OAAQE,EAAIsnB,IAAOtnB,EAAE,CACxC,MAAMoY,EAAKvY,EAAMG,GAAGoS,QACpB,GAAIgG,GAAMA,EAAGmN,WAAY,CACrB,MAAMtK,EAAM7C,EAAGkN,kBACfpZ,GAAK+O,EAAI/O,EACTC,GAAK8O,EAAI9O,IACP4C,CACN,CACJ,CACA,MAAO,CACH7C,EAAGA,EAAI6C,EACP5C,EAAGA,EAAI4C,EAEf,EACH8L,QAAShb,EAAOoyC,GACT,IAAKpyC,EAAMC,OACP,OAAO,EAEX,IAGIE,EAAGsnB,EAAK4qB,EAHRhmC,EAAI+lC,EAAc/lC,EAClBC,EAAI8lC,EAAc9lC,EAClB2N,EAAcvJ,OAAOC,kBAEzB,IAAIxQ,EAAI,EAAGsnB,EAAMznB,EAAMC,OAAQE,EAAIsnB,IAAOtnB,EAAE,CACxC,MAAMoY,EAAKvY,EAAMG,GAAGoS,QACpB,GAAIgG,GAAMA,EAAGmN,WAAY,CACrB,MAAMxL,EAAS3B,EAAG4B,iBACZhV,GAAI,QAAsBitC,EAAel4B,GAC3C/U,EAAI8U,IACJA,EAAc9U,EACdktC,EAAiB95B,EAEzB,CACJ,CACA,GAAI85B,EAAgB,CAChB,MAAMC,EAAKD,EAAe5sB,kBAC1BpZ,EAAIimC,EAAGjmC,EACPC,EAAIgmC,EAAGhmC,CACX,CACA,MAAO,CACHD,IACAC,IAER,GAEJ,SAASimC,GAAaC,EAAMC,GAQxB,OAPIA,KACI,OAAQA,GACRxkC,MAAMmpB,UAAUl2B,KAAKwxC,MAAMF,EAAMC,GAEjCD,EAAKtxC,KAAKuxC,IAGXD,CACX,CACC,SAASG,GAAcC,GACpB,OAAoB,iBAARA,GAAoBA,aAAeC,SAAWD,EAAIp5B,QAAQ,OAAS,EACpEo5B,EAAIja,MAAM,MAEdia,CACX,CACC,SAASE,GAAkBr0C,EAAOyB,GAC/B,MAAM,QAAEqS,EAAQ,aAAE1K,EAAa,MAAEN,GAAWrH,EACtC2I,EAAapK,EAAMgP,eAAe5F,GAAcgB,YAChD,MAAEyI,EAAM,MAAE7K,GAAWoC,EAAWwI,iBAAiB9J,GACvD,MAAO,CACH9I,QACA6S,QACAxI,OAAQD,EAAWkH,UAAUxI,GAC7BuL,IAAKrU,EAAM8O,KAAKC,SAAS3F,GAAc0F,KAAKhG,GAC5CwrC,eAAgBtsC,EAChByF,QAASrD,EAAWsD,aACpB0G,UAAWtL,EACXM,eACA0K,UAER,CACC,SAASygC,GAAeC,EAASrtC,GAC9B,MAAM6E,EAAMwoC,EAAQx0C,MAAMgM,KACpB,KAAEyoC,EAAK,OAAEC,EAAO,MAAExkB,GAAWskB,GAC7B,SAAE3G,EAAS,UAAED,GAAezmC,EAC5BwtC,GAAW,QAAOxtC,EAAQwtC,UAC1B/C,GAAY,QAAOzqC,EAAQyqC,WAC3BgD,GAAa,QAAOztC,EAAQytC,YAC5BC,EAAiB3kB,EAAM1uB,OACvBszC,EAAkBJ,EAAOlzC,OACzBuzC,EAAoBN,EAAKjzC,OACzB0e,GAAU,OAAU/Y,EAAQ+Y,SAClC,IAAI9B,EAAS8B,EAAQ9B,OACjBF,EAAQ,EACR82B,EAAqBP,EAAK7xC,QAAO,CAAC6N,EAAOwkC,IAAWxkC,EAAQwkC,EAASC,OAAO1zC,OAASyzC,EAASE,MAAM3zC,OAASyzC,EAASG,MAAM5zC,QAAQ,GAKxI,GAJAwzC,GAAsBR,EAAQa,WAAW7zC,OAASgzC,EAAQc,UAAU9zC,OAChEqzC,IACAz2B,GAAUy2B,EAAiBjD,EAAUhnB,YAAciqB,EAAiB,GAAK1tC,EAAQouC,aAAepuC,EAAQquC,mBAExGR,EAAoB,CAEpB52B,GAAU22B,GADa5tC,EAAQsuC,cAAgB70C,KAAKmC,IAAI6qC,EAAW+G,EAAS/pB,YAAc+pB,EAAS/pB,aACnDoqB,EAAqBD,GAAqBJ,EAAS/pB,YAAcoqB,EAAqB,GAAK7tC,EAAQuuC,WACvJ,CACIZ,IACA12B,GAAUjX,EAAQwuC,gBAAkBb,EAAkBF,EAAWhqB,YAAckqB,EAAkB,GAAK3tC,EAAQyuC,eAElH,IAAIC,EAAe,EACnB,MAAMC,EAAe,SAAS/9B,GAC1BmG,EAAQtd,KAAKmC,IAAImb,EAAOlS,EAAIojC,YAAYr3B,GAAMmG,MAAQ23B,EAC1D,EAiBA,OAhBA7pC,EAAI6qB,OACJ7qB,EAAI0e,KAAOknB,EAAU3f,QACrB,OAAKuiB,EAAQtkB,MAAO4lB,GACpB9pC,EAAI0e,KAAOiqB,EAAS1iB,QACpB,OAAKuiB,EAAQa,WAAWp0B,OAAOuzB,EAAQc,WAAYQ,GACnDD,EAAe1uC,EAAQsuC,cAAgB5H,EAAW,EAAI1mC,EAAQsX,WAAa,GAC3E,OAAKg2B,GAAOQ,KACR,OAAKA,EAASC,OAAQY,IACtB,OAAKb,EAASE,MAAOW,IACrB,OAAKb,EAASG,MAAOU,EAAa,IAEtCD,EAAe,EACf7pC,EAAI0e,KAAOkqB,EAAW3iB,QACtB,OAAKuiB,EAAQE,OAAQoB,GACrB9pC,EAAIgrB,UACJ9Y,GAASgC,EAAQhC,MACV,CACHA,QACAE,SAER,CAoBA,SAAS23B,GAAgB/1C,EAAOmH,EAASe,EAAM8tC,GAC3C,MAAM,EAAEpoC,EAAE,MAAEsQ,GAAWhW,GACfgW,MAAO+3B,EAAariC,WAAW,KAAEP,EAAK,MAAEF,IAAcnT,EAC9D,IAAIk2C,EAAS,SAWb,MAVe,WAAXF,EACAE,EAAStoC,IAAMyF,EAAOF,GAAS,EAAI,OAAS,QACrCvF,GAAKsQ,EAAQ,EACpBg4B,EAAS,OACFtoC,GAAKqoC,EAAa/3B,EAAQ,IACjCg4B,EAAS,SAnBjB,SAA6BA,EAAQl2C,EAAOmH,EAASe,GACjD,MAAM,EAAE0F,EAAE,MAAEsQ,GAAWhW,EACjBiuC,EAAQhvC,EAAQivC,UAAYjvC,EAAQkvC,aAC1C,MAAe,SAAXH,GAAqBtoC,EAAIsQ,EAAQi4B,EAAQn2C,EAAMke,OAGpC,UAAXg4B,GAAsBtoC,EAAIsQ,EAAQi4B,EAAQ,QAA9C,CAGJ,CAYQG,CAAoBJ,EAAQl2C,EAAOmH,EAASe,KAC5CguC,EAAS,UAENA,CACX,CACC,SAASK,GAAmBv2C,EAAOmH,EAASe,GACzC,MAAM8tC,EAAS9tC,EAAK8tC,QAAU7uC,EAAQ6uC,QApC1C,SAAyBh2C,EAAOkI,GAC5B,MAAM,EAAE2F,EAAE,OAAEuQ,GAAYlW,EACxB,OAAI2F,EAAIuQ,EAAS,EACN,MACAvQ,EAAI7N,EAAMoe,OAASA,EAAS,EAC5B,SAEJ,QACX,CA4BoDo4B,CAAgBx2C,EAAOkI,GACvE,MAAO,CACHguC,OAAQhuC,EAAKguC,QAAU/uC,EAAQ+uC,QAAUH,GAAgB/1C,EAAOmH,EAASe,EAAM8tC,GAC/EA,SAER,CAqBC,SAASS,GAAmBtvC,EAASe,EAAMwuC,EAAW12C,GACnD,MAAM,UAAEo2C,EAAU,aAAEC,EAAa,aAAEM,GAAkBxvC,GAC/C,OAAE+uC,EAAO,OAAEF,GAAYU,EACvBE,EAAiBR,EAAYC,GAC7B,QAAEQ,EAAQ,SAAEC,EAAS,WAAEC,EAAW,YAAEC,IAAiB,QAAcL,GACzE,IAAI/oC,EAzBR,SAAgB1F,EAAMguC,GAClB,IAAI,EAAEtoC,EAAE,MAAEsQ,GAAWhW,EAMrB,MALe,UAAXguC,EACAtoC,GAAKsQ,EACa,WAAXg4B,IACPtoC,GAAKsQ,EAAQ,GAEVtQ,CACX,CAiBYqpC,CAAO/uC,EAAMguC,GACrB,MAAMroC,EAjBV,SAAgB3F,EAAM8tC,EAAQY,GAC1B,IAAI,EAAE/oC,EAAE,OAAEuQ,GAAYlW,EAQtB,MAPe,QAAX8tC,EACAnoC,GAAK+oC,EAEL/oC,GADkB,WAAXmoC,EACF53B,EAASw4B,EAETx4B,EAAS,EAEXvQ,CACX,CAOcqpC,CAAOhvC,EAAM8tC,EAAQY,GAY/B,MAXe,WAAXZ,EACe,SAAXE,EACAtoC,GAAKgpC,EACa,UAAXV,IACPtoC,GAAKgpC,GAES,SAAXV,EACPtoC,GAAKhN,KAAKmC,IAAI8zC,EAASE,GAAcX,EACnB,UAAXF,IACPtoC,GAAKhN,KAAKmC,IAAI+zC,EAAUE,GAAeZ,GAEpC,CACHxoC,GAAG,OAAYA,EAAG,EAAG5N,EAAMke,MAAQhW,EAAKgW,OACxCrQ,GAAG,OAAYA,EAAG,EAAG7N,EAAMoe,OAASlW,EAAKkW,QAEjD,CACA,SAAS+4B,GAAY3C,EAAS1pB,EAAO3jB,GACjC,MAAM+Y,GAAU,OAAU/Y,EAAQ+Y,SAClC,MAAiB,WAAV4K,EAAqB0pB,EAAQ5mC,EAAI4mC,EAAQt2B,MAAQ,EAAc,UAAV4M,EAAoB0pB,EAAQ5mC,EAAI4mC,EAAQt2B,MAAQgC,EAAQ/M,MAAQqhC,EAAQ5mC,EAAIsS,EAAQ7M,IACpJ,CACC,SAAS+jC,GAAwBjoB,GAC9B,OAAO2kB,GAAa,GAAII,GAAc/kB,GAC1C,CAQA,SAASkoB,GAAkBj3C,EAAW8T,GAClC,MAAM+kB,EAAW/kB,GAAWA,EAAQzG,SAAWyG,EAAQzG,QAAQ+mC,SAAWtgC,EAAQzG,QAAQ+mC,QAAQp0C,UAClG,OAAO64B,EAAW74B,EAAU64B,SAASA,GAAY74B,CACrD,CACA,MAAMk3C,GAAmB,CACrBC,YAAa,KACbrnB,MAAOsnB,GACH,GAAIA,EAAah2C,OAAS,EAAG,CACzB,MAAMC,EAAO+1C,EAAa,GACpBvmC,EAASxP,EAAKzB,MAAM8O,KAAKmC,OACzBwmC,EAAaxmC,EAASA,EAAOzP,OAAS,EAC5C,GAAIhC,MAAQA,KAAK2H,SAAiC,YAAtB3H,KAAK2H,QAAQgC,KACrC,OAAO1H,EAAKgM,QAAQoF,OAAS,GAC1B,GAAIpR,EAAKoR,MACZ,OAAOpR,EAAKoR,MACT,GAAI4kC,EAAa,GAAKh2C,EAAK2S,UAAYqjC,EAC1C,OAAOxmC,EAAOxP,EAAK2S,UAE3B,CACA,MAAO,EACX,EACAsjC,WAAY,KACZrC,WAAY,KACZsC,YAAa,KACb9kC,MAAO+kC,GACH,GAAIp4C,MAAQA,KAAK2H,SAAiC,YAAtB3H,KAAK2H,QAAQgC,KACrC,OAAOyuC,EAAY/kC,MAAQ,KAAO+kC,EAAYtD,gBAAkBsD,EAAYtD,eAEhF,IAAIzhC,EAAQ+kC,EAAYnqC,QAAQoF,OAAS,GACrCA,IACAA,GAAS,MAEb,MAAM7K,EAAQ4vC,EAAYtD,eAI1B,OAHK,OAActsC,KACf6K,GAAS7K,GAEN6K,CACX,EACAglC,WAAYD,GACR,MACMzwC,EADOywC,EAAY53C,MAAMgP,eAAe4oC,EAAYxuC,cACrCgB,WAAW2J,SAAS6jC,EAAYxjC,WACrD,MAAO,CACH61B,YAAa9iC,EAAQ8iC,YACrBrT,gBAAiBzvB,EAAQyvB,gBACzBve,YAAalR,EAAQkR,YACrBsc,WAAYxtB,EAAQwtB,WACpBE,iBAAkB1tB,EAAQ0tB,iBAC1B0c,aAAc,EAEtB,EACAuG,iBACI,OAAOt4C,KAAK2H,QAAQ4wC,SACxB,EACAC,gBAAiBJ,GACb,MACMzwC,EADOywC,EAAY53C,MAAMgP,eAAe4oC,EAAYxuC,cACrCgB,WAAW2J,SAAS6jC,EAAYxjC,WACrD,MAAO,CACHi5B,WAAYlmC,EAAQkmC,WACpBhY,SAAUluB,EAAQkuB,SAE1B,EACA4iB,WAAY,KACZ3C,UAAW,KACX4C,aAAc,KACdxD,OAAQ,KACRyD,YAAa,MAEhB,SAASC,GAA2Bh4C,EAAW2uB,EAAM/iB,EAAKgwB,GACvD,MAAM3T,EAASjoB,EAAU2uB,GAAMsK,KAAKrtB,EAAKgwB,GACzC,YAAsB,IAAX3T,EACAivB,GAAiBvoB,GAAMsK,KAAKrtB,EAAKgwB,GAErC3T,CACX,CACA,MAAMgwB,WAAgBtxB,GACrBjb,mBAAqB2nC,GAClBl0C,YAAY4G,GACR2R,QACAtY,KAAK84C,QAAU,EACf94C,KAAKoC,QAAU,GACfpC,KAAK+4C,oBAAiBz4C,EACtBN,KAAKg5C,WAAQ14C,EACbN,KAAKi5C,uBAAoB34C,EACzBN,KAAKk5C,cAAgB,GACrBl5C,KAAK8H,iBAAcxH,EACnBN,KAAKoN,cAAW9M,EAChBN,KAAKQ,MAAQmG,EAAOnG,MACpBR,KAAK2H,QAAUhB,EAAOgB,QACtB3H,KAAKm5C,gBAAa74C,EAClBN,KAAK0wB,WAAQpwB,EACbN,KAAK61C,gBAAav1C,EAClBN,KAAKi1C,UAAO30C,EACZN,KAAK81C,eAAYx1C,EACjBN,KAAKk1C,YAAS50C,EACdN,KAAK02C,YAASp2C,EACdN,KAAKw2C,YAASl2C,EACdN,KAAKoO,OAAI9N,EACTN,KAAKqO,OAAI/N,EACTN,KAAK4e,YAASte,EACdN,KAAK0e,WAAQpe,EACbN,KAAKo5C,YAAS94C,EACdN,KAAKq5C,YAAS/4C,EACdN,KAAKs5C,iBAAch5C,EACnBN,KAAKu5C,sBAAmBj5C,EACxBN,KAAKw5C,qBAAkBl5C,CAC3B,CACAkN,WAAW7F,GACP3H,KAAK2H,QAAUA,EACf3H,KAAKi5C,uBAAoB34C,EACzBN,KAAKoN,cAAW9M,CACpB,CACHoV,qBACO,MAAMvJ,EAASnM,KAAKi5C,kBACpB,GAAI9sC,EACA,OAAOA,EAEX,MAAM3L,EAAQR,KAAKQ,MACbmH,EAAU3H,KAAK2H,QAAQolB,WAAW/sB,KAAK8Q,cACvChI,EAAOnB,EAAQihB,SAAWpoB,EAAMmH,QAAQc,WAAad,EAAQK,WAC7DA,EAAa,IAAItB,EAAW1G,KAAKQ,MAAOsI,GAI9C,OAHIA,EAAK+M,aACL7V,KAAKi5C,kBAAoBjyC,OAAOyO,OAAOzN,IAEpCA,CACX,CACH8I,aACO,OAAO9Q,KAAKoN,WAAapN,KAAKoN,UArIRuH,EAqIwC3U,KAAKQ,MAAMsQ,aArI3CkkC,EAqIyDh1C,KArIhDg4C,EAqIsDh4C,KAAKk5C,eApI/F,OAAcvkC,EAAQ,CACzBqgC,UACAgD,eACAr3C,KAAM,cAJd,IAA8BgU,EAAQqgC,EAASgD,CAsI3C,CACAyB,SAAS/kC,EAAS/M,GACd,MAAM,UAAE/G,GAAe+G,EACjBowC,EAAca,GAA2Bh4C,EAAW,cAAeZ,KAAM0U,GACzEgc,EAAQkoB,GAA2Bh4C,EAAW,QAASZ,KAAM0U,GAC7DwjC,EAAaU,GAA2Bh4C,EAAW,aAAcZ,KAAM0U,GAC7E,IAAIihC,EAAQ,GAIZ,OAHAA,EAAQrB,GAAaqB,EAAOjB,GAAcqD,IAC1CpC,EAAQrB,GAAaqB,EAAOjB,GAAchkB,IAC1CilB,EAAQrB,GAAaqB,EAAOjB,GAAcwD,IACnCvC,CACX,CACA+D,cAAc1B,EAAcrwC,GACxB,OAAOiwC,GAAwBgB,GAA2BjxC,EAAQ/G,UAAW,aAAcZ,KAAMg4C,GACrG,CACA2B,QAAQ3B,EAAcrwC,GAClB,MAAM,UAAE/G,GAAe+G,EACjBiyC,EAAY,GAalB,OAZA,OAAK5B,GAAetjC,IAChB,MAAM+gC,EAAW,CACbC,OAAQ,GACRC,MAAO,GACPC,MAAO,IAELiE,EAAShC,GAAkBj3C,EAAW8T,GAC5C4/B,GAAamB,EAASC,OAAQhB,GAAckE,GAA2BiB,EAAQ,cAAe75C,KAAM0U,KACpG4/B,GAAamB,EAASE,MAAOiD,GAA2BiB,EAAQ,QAAS75C,KAAM0U,IAC/E4/B,GAAamB,EAASG,MAAOlB,GAAckE,GAA2BiB,EAAQ,aAAc75C,KAAM0U,KAClGklC,EAAU32C,KAAKwyC,EAAS,IAErBmE,CACX,CACAE,aAAa9B,EAAcrwC,GACvB,OAAOiwC,GAAwBgB,GAA2BjxC,EAAQ/G,UAAW,YAAaZ,KAAMg4C,GACpG,CACA+B,UAAU/B,EAAcrwC,GACpB,MAAM,UAAE/G,GAAe+G,EACjB+wC,EAAeE,GAA2Bh4C,EAAW,eAAgBZ,KAAMg4C,GAC3E9C,EAAS0D,GAA2Bh4C,EAAW,SAAUZ,KAAMg4C,GAC/DW,EAAcC,GAA2Bh4C,EAAW,cAAeZ,KAAMg4C,GAC/E,IAAIrC,EAAQ,GAIZ,OAHAA,EAAQrB,GAAaqB,EAAOjB,GAAcgE,IAC1C/C,EAAQrB,GAAaqB,EAAOjB,GAAcQ,IAC1CS,EAAQrB,GAAaqB,EAAOjB,GAAciE,IACnChD,CACX,CACHqE,aAAaryC,GACN,MAAM5B,EAAS/F,KAAKoC,QACdkN,EAAOtP,KAAKQ,MAAM8O,KAClBgqC,EAAc,GACdC,EAAmB,GACnBC,EAAkB,GACxB,IACIt3C,EAAGsnB,EADHwuB,EAAe,GAEnB,IAAI91C,EAAI,EAAGsnB,EAAMzjB,EAAO/D,OAAQE,EAAIsnB,IAAOtnB,EACvC81C,EAAa/0C,KAAK4xC,GAAkB70C,KAAKQ,MAAOuF,EAAO7D,KAkB3D,OAhBIyF,EAAQkE,SACRmsC,EAAeA,EAAansC,QAAO,CAACyI,EAAShL,EAAO4T,IAAQvV,EAAQkE,OAAOyI,EAAShL,EAAO4T,EAAO5N,MAElG3H,EAAQsyC,WACRjC,EAAeA,EAAaz6B,MAAK,CAACC,EAAG/J,IAAI9L,EAAQsyC,SAASz8B,EAAG/J,EAAGnE,OAEpE,OAAK0oC,GAAetjC,IAChB,MAAMmlC,EAAShC,GAAkBlwC,EAAQ/G,UAAW8T,GACpD4kC,EAAYr2C,KAAK21C,GAA2BiB,EAAQ,aAAc75C,KAAM0U,IACxE6kC,EAAiBt2C,KAAK21C,GAA2BiB,EAAQ,kBAAmB75C,KAAM0U,IAClF8kC,EAAgBv2C,KAAK21C,GAA2BiB,EAAQ,iBAAkB75C,KAAM0U,GAAS,IAE7F1U,KAAKs5C,YAAcA,EACnBt5C,KAAKu5C,iBAAmBA,EACxBv5C,KAAKw5C,gBAAkBA,EACvBx5C,KAAKm5C,WAAanB,EACXA,CACX,CACAhyC,OAAOsa,EAASgpB,GACZ,MAAM3hC,EAAU3H,KAAK2H,QAAQolB,WAAW/sB,KAAK8Q,cACvC/K,EAAS/F,KAAKoC,QACpB,IAAImF,EACAywC,EAAe,GACnB,GAAKjyC,EAAO/D,OAML,CACH,MAAM2Y,EAAWs5B,GAAYtsC,EAAQgT,UAAUkf,KAAK75B,KAAM+F,EAAQ/F,KAAK+4C,gBACvEf,EAAeh4C,KAAKg6C,aAAaryC,GACjC3H,KAAK0wB,MAAQ1wB,KAAKy5C,SAASzB,EAAcrwC,GACzC3H,KAAK61C,WAAa71C,KAAK05C,cAAc1B,EAAcrwC,GACnD3H,KAAKi1C,KAAOj1C,KAAK25C,QAAQ3B,EAAcrwC,GACvC3H,KAAK81C,UAAY91C,KAAK85C,aAAa9B,EAAcrwC,GACjD3H,KAAKk1C,OAASl1C,KAAK+5C,UAAU/B,EAAcrwC,GAC3C,MAAMe,EAAO1I,KAAKg5C,MAAQjE,GAAe/0C,KAAM2H,GACzCuyC,EAAkBlzC,OAAOa,OAAO,CAAC,EAAG8S,EAAUjS,GAC9CwuC,EAAYH,GAAmB/2C,KAAKQ,MAAOmH,EAASuyC,GACpDC,EAAkBlD,GAAmBtvC,EAASuyC,EAAiBhD,EAAWl3C,KAAKQ,OACrFR,KAAK02C,OAASQ,EAAUR,OACxB12C,KAAKw2C,OAASU,EAAUV,OACxBjvC,EAAa,CACTuxC,QAAS,EACT1qC,EAAG+rC,EAAgB/rC,EACnBC,EAAG8rC,EAAgB9rC,EACnBqQ,MAAOhW,EAAKgW,MACZE,OAAQlW,EAAKkW,OACbw6B,OAAQz+B,EAASvM,EACjBirC,OAAQ1+B,EAAStM,EAEzB,MA5ByB,IAAjBrO,KAAK84C,UACLvxC,EAAa,CACTuxC,QAAS,IA2BrB94C,KAAKk5C,cAAgBlB,EACrBh4C,KAAKoN,cAAW9M,EACZiH,GACAvH,KAAK0V,qBAAqB1P,OAAOhG,KAAMuH,GAEvC+Y,GAAW3Y,EAAQyyC,UACnBzyC,EAAQyyC,SAASvgB,KAAK75B,KAAM,CACxBQ,MAAOR,KAAKQ,MACZw0C,QAASh1C,KACTspC,UAGZ,CACA+Q,UAAUC,EAAc9tC,EAAK9D,EAAMf,GAC/B,MAAM4yC,EAAgBv6C,KAAKw6C,iBAAiBF,EAAc5xC,EAAMf,GAChE6E,EAAI4rB,OAAOmiB,EAAcjmB,GAAIimB,EAAchmB,IAC3C/nB,EAAI4rB,OAAOmiB,EAAc/lB,GAAI+lB,EAAc9lB,IAC3CjoB,EAAI4rB,OAAOmiB,EAAcE,GAAIF,EAAcG,GAC/C,CACAF,iBAAiBF,EAAc5xC,EAAMf,GACjC,MAAM,OAAE+uC,EAAO,OAAEF,GAAYx2C,MACvB,UAAE42C,EAAU,aAAEO,GAAkBxvC,GAChC,QAAE0vC,EAAQ,SAAEC,EAAS,WAAEC,EAAW,YAAEC,IAAiB,QAAcL,IACjE/oC,EAAGusC,EAAMtsC,EAAGusC,GAASN,GACvB,MAAE57B,EAAM,OAAEE,GAAYlW,EAC5B,IAAI4rB,EAAIE,EAAIimB,EAAIlmB,EAAIE,EAAIimB,EAoCxB,MAnCe,WAAXlE,GACA/hB,EAAKmmB,EAAMh8B,EAAS,EACL,SAAX83B,GACApiB,EAAKqmB,EACLnmB,EAAKF,EAAKsiB,EACVriB,EAAKE,EAAKmiB,EACV8D,EAAKjmB,EAAKmiB,IAEVtiB,EAAKqmB,EAAMj8B,EACX8V,EAAKF,EAAKsiB,EACVriB,EAAKE,EAAKmiB,EACV8D,EAAKjmB,EAAKmiB,GAEd6D,EAAKnmB,IAGDE,EADW,SAAXkiB,EACKiE,EAAMv5C,KAAKmC,IAAI8zC,EAASE,GAAcX,EACzB,UAAXF,EACFiE,EAAMj8B,EAAQtd,KAAKmC,IAAI+zC,EAAUE,GAAeZ,EAEhD52C,KAAKo5C,OAEC,QAAX5C,GACAjiB,EAAKqmB,EACLnmB,EAAKF,EAAKqiB,EACVtiB,EAAKE,EAAKoiB,EACV6D,EAAKjmB,EAAKoiB,IAEVriB,EAAKqmB,EAAMh8B,EACX6V,EAAKF,EAAKqiB,EACVtiB,EAAKE,EAAKoiB,EACV6D,EAAKjmB,EAAKoiB,GAEd8D,EAAKnmB,GAEF,CACHD,KACAE,KACAimB,KACAlmB,KACAE,KACAimB,KAER,CACA/hB,UAAUkiB,EAAIruC,EAAK7E,GACf,MAAM+oB,EAAQ1wB,KAAK0wB,MACb1uB,EAAS0uB,EAAM1uB,OACrB,IAAIowC,EAAW2D,EAAc7zC,EAC7B,GAAIF,EAAQ,CACR,MAAM2uC,GAAY,QAAchpC,EAAQ+oC,IAAK1wC,KAAKoO,EAAGpO,KAAK0e,OAQ1D,IAPAm8B,EAAGzsC,EAAIupC,GAAY33C,KAAM2H,EAAQ0jB,WAAY1jB,GAC7C6E,EAAIspB,UAAY6a,EAAU7a,UAAUnuB,EAAQ0jB,YAC5C7e,EAAIypB,aAAe,SACnBmc,GAAY,QAAOzqC,EAAQyqC,WAC3B2D,EAAepuC,EAAQouC,aACvBvpC,EAAI8qB,UAAY3vB,EAAQmzC,WACxBtuC,EAAI0e,KAAOknB,EAAU3f,OACjBvwB,EAAI,EAAGA,EAAIF,IAAUE,EACrBsK,EAAI2lC,SAASzhB,EAAMxuB,GAAIyuC,EAAUviC,EAAEysC,EAAGzsC,GAAIysC,EAAGxsC,EAAI+jC,EAAUhnB,WAAa,GACxEyvB,EAAGxsC,GAAK+jC,EAAUhnB,WAAa2qB,EAC3B7zC,EAAI,IAAMF,IACV64C,EAAGxsC,GAAK1G,EAAQquC,kBAAoBD,EAGhD,CACJ,CACHgF,cAAcvuC,EAAKquC,EAAI34C,EAAGyuC,EAAWhpC,GAC9B,MAAM2xC,EAAct5C,KAAKs5C,YAAYp3C,GAC/Bs2C,EAAkBx4C,KAAKu5C,iBAAiBr3C,IACxC,UAAEksC,EAAU,SAAEC,EAAS,WAAEpvB,GAAgBtX,EACzCwtC,GAAW,QAAOxtC,EAAQwtC,UAC1B6F,EAASrD,GAAY33C,KAAM,OAAQ2H,GACnCszC,EAAYtK,EAAUviC,EAAE4sC,GACxBE,EAAU9M,EAAY+G,EAAS/pB,YAAc+pB,EAAS/pB,WAAagjB,GAAa,EAAI,EACpF+M,EAASN,EAAGxsC,EAAI6sC,EACtB,GAAIvzC,EAAQ2mC,cAAe,CACvB,MAAMkD,EAAc,CAChBhE,OAAQpsC,KAAKC,IAAIgtC,EAAUD,GAAa,EACxCP,WAAY2K,EAAgB3K,WAC5BhY,SAAU2iB,EAAgB3iB,SAC1Bhd,YAAa,GAEX64B,EAAUf,EAAUE,WAAWoK,EAAW5M,GAAYA,EAAW,EACjEuD,EAAUuJ,EAAS/M,EAAY,EACrC5hC,EAAIurB,YAAcpwB,EAAQyzC,mBAC1B5uC,EAAI8qB,UAAY3vB,EAAQyzC,oBACxB,QAAU5uC,EAAKglC,EAAaE,EAASE,GACrCplC,EAAIurB,YAAcuhB,EAAY7O,YAC9Bj+B,EAAI8qB,UAAYgiB,EAAYliB,iBAC5B,QAAU5qB,EAAKglC,EAAaE,EAASE,EACzC,KAAO,CACHplC,EAAIyoB,WAAY,IAAA/yB,GAASo3C,EAAYzgC,aAAezX,KAAKmC,OAAOyD,OAAOS,OAAO6xC,EAAYzgC,cAAgBygC,EAAYzgC,aAAe,EACrIrM,EAAIurB,YAAcuhB,EAAY7O,YAC9Bj+B,EAAIwrB,YAAYshB,EAAYnkB,YAAc,IAC1C3oB,EAAIyrB,eAAiBqhB,EAAYjkB,kBAAoB,EACrD,MAAMgmB,EAAS1K,EAAUE,WAAWoK,EAAW5M,EAAWpvB,GACpDq8B,EAAS3K,EAAUE,WAAWF,EAAUgB,MAAMsJ,EAAW,GAAI5M,EAAWpvB,EAAa,GACrF8yB,GAAe,QAAcuH,EAAYvH,cAC3C/qC,OAAOS,OAAOsqC,GAAc3T,MAAM5vB,GAAU,IAANA,KACtChC,EAAI0rB,YACJ1rB,EAAI8qB,UAAY3vB,EAAQyzC,oBACxB,QAAmB5uC,EAAK,CACpB4B,EAAGitC,EACHhtC,EAAG8sC,EACH17B,EAAG4uB,EACH1uB,EAAGyuB,EACHZ,OAAQuE,IAEZvlC,EAAIoB,OACJpB,EAAI6rB,SACJ7rB,EAAI8qB,UAAYgiB,EAAYliB,gBAC5B5qB,EAAI0rB,aACJ,QAAmB1rB,EAAK,CACpB4B,EAAGktC,EACHjtC,EAAG8sC,EAAS,EACZ17B,EAAG4uB,EAAW,EACd1uB,EAAGyuB,EAAY,EACfZ,OAAQuE,IAEZvlC,EAAIoB,SAEJpB,EAAI8qB,UAAY3vB,EAAQyzC,mBACxB5uC,EAAI+qB,SAAS8jB,EAAQF,EAAQ9M,EAAUD,GACvC5hC,EAAI+uC,WAAWF,EAAQF,EAAQ9M,EAAUD,GACzC5hC,EAAI8qB,UAAYgiB,EAAYliB,gBAC5B5qB,EAAI+qB,SAAS+jB,EAAQH,EAAS,EAAG9M,EAAW,EAAGD,EAAY,GAEnE,CACA5hC,EAAI8qB,UAAYt3B,KAAKw5C,gBAAgBt3C,EACzC,CACAs5C,SAASX,EAAIruC,EAAK7E,GACd,MAAM,KAAEstC,GAAUj1C,MACZ,YAAEk2C,EAAY,UAAEuF,EAAU,cAAExF,EAAc,UAAE7H,EAAU,SAAEC,EAAS,WAAEpvB,GAAgBtX,EACnFwtC,GAAW,QAAOxtC,EAAQwtC,UAChC,IAAIuG,EAAiBvG,EAAS/pB,WAC1BuwB,EAAe,EACnB,MAAMhL,GAAY,QAAchpC,EAAQ+oC,IAAK1wC,KAAKoO,EAAGpO,KAAK0e,OACpDk9B,EAAiB,SAASrjC,GAC5B/L,EAAI2lC,SAAS55B,EAAMo4B,EAAUviC,EAAEysC,EAAGzsC,EAAIutC,GAAed,EAAGxsC,EAAIqtC,EAAiB,GAC7Eb,EAAGxsC,GAAKqtC,EAAiBxF,CAC7B,EACM2F,EAA0BlL,EAAU7a,UAAU2lB,GACpD,IAAIhG,EAAUqG,EAAWnG,EAAOzzC,EAAG4Y,EAAGzR,EAAM6oB,EAQ5C,IAPA1lB,EAAIspB,UAAY2lB,EAChBjvC,EAAIypB,aAAe,SACnBzpB,EAAI0e,KAAOiqB,EAAS1iB,OACpBooB,EAAGzsC,EAAIupC,GAAY33C,KAAM67C,EAAyBl0C,GAClD6E,EAAI8qB,UAAY3vB,EAAQ4wC,WACxB,OAAKv4C,KAAK61C,WAAY+F,GACtBD,EAAe1F,GAA6C,UAA5B4F,EAAoD,WAAdJ,EAAyBpN,EAAW,EAAIpvB,EAAaovB,EAAW,EAAIpvB,EAAa,EACnJ/c,EAAI,EAAGmH,EAAO4rC,EAAKjzC,OAAQE,EAAImH,IAAQnH,EAAE,CAUzC,IATAuzC,EAAWR,EAAK/yC,GAChB45C,EAAY97C,KAAKw5C,gBAAgBt3C,GACjCsK,EAAI8qB,UAAYwkB,GAChB,OAAKrG,EAASC,OAAQkG,GACtBjG,EAAQF,EAASE,MACbM,GAAiBN,EAAM3zC,SACvBhC,KAAK+6C,cAAcvuC,EAAKquC,EAAI34C,EAAGyuC,EAAWhpC,GAC1C+zC,EAAiBt6C,KAAKmC,IAAI4xC,EAAS/pB,WAAYgjB,IAE/CtzB,EAAI,EAAGoX,EAAOyjB,EAAM3zC,OAAQ8Y,EAAIoX,IAAQpX,EACxC8gC,EAAejG,EAAM76B,IACrB4gC,EAAiBvG,EAAS/pB,YAE9B,OAAKqqB,EAASG,MAAOgG,EACzB,CACAD,EAAe,EACfD,EAAiBvG,EAAS/pB,YAC1B,OAAKprB,KAAK81C,UAAW8F,GACrBf,EAAGxsC,GAAK6nC,CACZ,CACA6F,WAAWlB,EAAIruC,EAAK7E,GAChB,MAAMutC,EAASl1C,KAAKk1C,OACdlzC,EAASkzC,EAAOlzC,OACtB,IAAIozC,EAAYlzC,EAChB,GAAIF,EAAQ,CACR,MAAM2uC,GAAY,QAAchpC,EAAQ+oC,IAAK1wC,KAAKoO,EAAGpO,KAAK0e,OAQ1D,IAPAm8B,EAAGzsC,EAAIupC,GAAY33C,KAAM2H,EAAQq0C,YAAar0C,GAC9CkzC,EAAGxsC,GAAK1G,EAAQwuC,gBAChB3pC,EAAIspB,UAAY6a,EAAU7a,UAAUnuB,EAAQq0C,aAC5CxvC,EAAIypB,aAAe,SACnBmf,GAAa,QAAOztC,EAAQytC,YAC5B5oC,EAAI8qB,UAAY3vB,EAAQs0C,YACxBzvC,EAAI0e,KAAOkqB,EAAW3iB,OAClBvwB,EAAI,EAAGA,EAAIF,IAAUE,EACrBsK,EAAI2lC,SAAS+C,EAAOhzC,GAAIyuC,EAAUviC,EAAEysC,EAAGzsC,GAAIysC,EAAGxsC,EAAI+mC,EAAWhqB,WAAa,GAC1EyvB,EAAGxsC,GAAK+mC,EAAWhqB,WAAazjB,EAAQyuC,aAEhD,CACJ,CACAjf,eAAe0jB,EAAIruC,EAAK0vC,EAAav0C,GACjC,MAAM,OAAE+uC,EAAO,OAAEF,GAAYx2C,MACvB,EAAEoO,EAAE,EAAEC,GAAOwsC,GACb,MAAEn8B,EAAM,OAAEE,GAAYs9B,GACtB,QAAE7E,EAAQ,SAAEC,EAAS,WAAEC,EAAW,YAAEC,IAAiB,QAAc7vC,EAAQwvC,cACjF3qC,EAAI8qB,UAAY3vB,EAAQyvB,gBACxB5qB,EAAIurB,YAAcpwB,EAAQ8iC,YAC1Bj+B,EAAIyoB,UAAYttB,EAAQkR,YACxBrM,EAAI0rB,YACJ1rB,EAAI2rB,OAAO/pB,EAAIipC,EAAShpC,GACT,QAAXmoC,GACAx2C,KAAKq6C,UAAUQ,EAAIruC,EAAK0vC,EAAav0C,GAEzC6E,EAAI4rB,OAAOhqB,EAAIsQ,EAAQ44B,EAAUjpC,GACjC7B,EAAI2vC,iBAAiB/tC,EAAIsQ,EAAOrQ,EAAGD,EAAIsQ,EAAOrQ,EAAIipC,GACnC,WAAXd,GAAkC,UAAXE,GACvB12C,KAAKq6C,UAAUQ,EAAIruC,EAAK0vC,EAAav0C,GAEzC6E,EAAI4rB,OAAOhqB,EAAIsQ,EAAOrQ,EAAIuQ,EAAS44B,GACnChrC,EAAI2vC,iBAAiB/tC,EAAIsQ,EAAOrQ,EAAIuQ,EAAQxQ,EAAIsQ,EAAQ84B,EAAanpC,EAAIuQ,GAC1D,WAAX43B,GACAx2C,KAAKq6C,UAAUQ,EAAIruC,EAAK0vC,EAAav0C,GAEzC6E,EAAI4rB,OAAOhqB,EAAImpC,EAAYlpC,EAAIuQ,GAC/BpS,EAAI2vC,iBAAiB/tC,EAAGC,EAAIuQ,EAAQxQ,EAAGC,EAAIuQ,EAAS24B,GACrC,WAAXf,GAAkC,SAAXE,GACvB12C,KAAKq6C,UAAUQ,EAAIruC,EAAK0vC,EAAav0C,GAEzC6E,EAAI4rB,OAAOhqB,EAAGC,EAAIgpC,GAClB7qC,EAAI2vC,iBAAiB/tC,EAAGC,EAAGD,EAAIipC,EAAShpC,GACxC7B,EAAI8/B,YACJ9/B,EAAIoB,OACAjG,EAAQkR,YAAc,GACtBrM,EAAI6rB,QAEZ,CACH+jB,uBAAuBz0C,GAChB,MAAMnH,EAAQR,KAAKQ,MACbC,EAAQT,KAAK8H,YACbu0C,EAAQ57C,GAASA,EAAM2N,EACvBkuC,EAAQ77C,GAASA,EAAM4N,EAC7B,GAAIguC,GAASC,EAAO,CAChB,MAAM3hC,EAAWs5B,GAAYtsC,EAAQgT,UAAUkf,KAAK75B,KAAMA,KAAKoC,QAASpC,KAAK+4C,gBAC7E,IAAKp+B,EACD,OAEJ,MAAMjS,EAAO1I,KAAKg5C,MAAQjE,GAAe/0C,KAAM2H,GACzCuyC,EAAkBlzC,OAAOa,OAAO,CAAC,EAAG8S,EAAU3a,KAAKg5C,OACnD9B,EAAYH,GAAmBv2C,EAAOmH,EAASuyC,GAC/C9gC,EAAQ69B,GAAmBtvC,EAASuyC,EAAiBhD,EAAW12C,GAClE67C,EAAMx2C,MAAQuT,EAAMhL,GAAKkuC,EAAMz2C,MAAQuT,EAAM/K,IAC7CrO,KAAK02C,OAASQ,EAAUR,OACxB12C,KAAKw2C,OAASU,EAAUV,OACxBx2C,KAAK0e,MAAQhW,EAAKgW,MAClB1e,KAAK4e,OAASlW,EAAKkW,OACnB5e,KAAKo5C,OAASz+B,EAASvM,EACvBpO,KAAKq5C,OAAS1+B,EAAStM,EACvBrO,KAAK0V,qBAAqB1P,OAAOhG,KAAMoZ,GAE/C,CACJ,CACHmjC,cACO,QAASv8C,KAAK84C,OAClB,CACA32C,KAAKqK,GACD,MAAM7E,EAAU3H,KAAK2H,QAAQolB,WAAW/sB,KAAK8Q,cAC7C,IAAIgoC,EAAU94C,KAAK84C,QACnB,IAAKA,EACD,OAEJ94C,KAAKo8C,uBAAuBz0C,GAC5B,MAAMu0C,EAAc,CAChBx9B,MAAO1e,KAAK0e,MACZE,OAAQ5e,KAAK4e,QAEXi8B,EAAK,CACPzsC,EAAGpO,KAAKoO,EACRC,EAAGrO,KAAKqO,GAEZyqC,EAAU13C,KAAKwY,IAAIk/B,GAAW,KAAO,EAAIA,EACzC,MAAMp4B,GAAU,OAAU/Y,EAAQ+Y,SAC5B87B,EAAoBx8C,KAAK0wB,MAAM1uB,QAAUhC,KAAK61C,WAAW7zC,QAAUhC,KAAKi1C,KAAKjzC,QAAUhC,KAAK81C,UAAU9zC,QAAUhC,KAAKk1C,OAAOlzC,OAC9H2F,EAAQihB,SAAW4zB,IACnBhwC,EAAI6qB,OACJ7qB,EAAIiwC,YAAc3D,EAClB94C,KAAKm3B,eAAe0jB,EAAIruC,EAAK0vC,EAAav0C,IAC1C,QAAsB6E,EAAK7E,EAAQwpC,eACnC0J,EAAGxsC,GAAKqS,EAAQhN,IAChB1T,KAAK24B,UAAUkiB,EAAIruC,EAAK7E,GACxB3H,KAAKw7C,SAASX,EAAIruC,EAAK7E,GACvB3H,KAAK+7C,WAAWlB,EAAIruC,EAAK7E,IACzB,QAAqB6E,EAAK7E,EAAQwpC,eAClC3kC,EAAIgrB,UAEZ,CACHyR,oBACO,OAAOjpC,KAAKoC,SAAW,EAC3B,CACH8mC,kBAAkBC,EAAgBgL,GAC3B,MAAM/K,EAAappC,KAAKoC,QAClB2D,EAASojC,EAAepE,KAAI,EAAGn7B,eAAeN,YAChD,MAAMU,EAAOhK,KAAKQ,MAAMgP,eAAe5F,GACvC,IAAKI,EACD,MAAM,IAAImwB,MAAM,kCAAoCvwB,GAExD,MAAO,CACHA,eACA0K,QAAStK,EAAKsF,KAAKhG,GACnBA,QACH,IAECgX,IAAW,QAAe8oB,EAAYrjC,GACtC22C,EAAkB18C,KAAK28C,iBAAiB52C,EAAQouC,IAClD7zB,GAAWo8B,KACX18C,KAAKoC,QAAU2D,EACf/F,KAAK+4C,eAAiB5E,EACtBn0C,KAAK48C,qBAAsB,EAC3B58C,KAAKgG,QAAO,GAEpB,CACH0sC,YAAYvtC,EAAGmkC,EAAQK,GAAc,GAC9B,GAAIL,GAAUtpC,KAAK48C,oBACf,OAAO,EAEX58C,KAAK48C,qBAAsB,EAC3B,MAAMj1C,EAAU3H,KAAK2H,QACfyhC,EAAappC,KAAKoC,SAAW,GAC7B2D,EAAS/F,KAAK8pC,mBAAmB3kC,EAAGikC,EAAYE,EAAQK,GACxD+S,EAAkB18C,KAAK28C,iBAAiB52C,EAAQZ,GAChDmb,EAAUgpB,KAAW,QAAevjC,EAAQqjC,IAAesT,EAWjE,OAVIp8B,IACAtgB,KAAKoC,QAAU2D,GACX4B,EAAQihB,SAAWjhB,EAAQyyC,YAC3Bp6C,KAAK+4C,eAAiB,CAClB3qC,EAAGjJ,EAAEiJ,EACLC,EAAGlJ,EAAEkJ,GAETrO,KAAKgG,QAAO,EAAMsjC,KAGnBhpB,CACX,CACHwpB,mBAAmB3kC,EAAGikC,EAAYE,EAAQK,GACnC,MAAMhiC,EAAU3H,KAAK2H,QACrB,GAAe,aAAXxC,EAAExE,KACF,MAAO,GAEX,IAAKgpC,EACD,OAAOP,EAEX,MAAMrjC,EAAS/F,KAAKQ,MAAMonC,0BAA0BziC,EAAGwC,EAAQgC,KAAMhC,EAAS2hC,GAI9E,OAHI3hC,EAAQoB,SACRhD,EAAOgD,UAEJhD,CACX,CACH42C,iBAAiB52C,EAAQZ,GAClB,MAAM,OAAEi0C,EAAO,OAAEC,EAAO,QAAE1xC,GAAa3H,KACjC2a,EAAWs5B,GAAYtsC,EAAQgT,UAAUkf,KAAK75B,KAAM+F,EAAQZ,GAClE,OAAoB,IAAbwV,IAAuBy+B,IAAWz+B,EAASvM,GAAKirC,IAAW1+B,EAAStM,EAC/E,EAEJ,IAAIwuC,GAAiB,CACjBvxC,GAAI,UACJ0nC,SAAU6F,GACV5E,eACA6I,UAAWt8C,EAAOyyC,EAAOtrC,GACjBA,IACAnH,EAAMw0C,QAAU,IAAI6D,GAAQ,CACxBr4C,QACAmH,YAGZ,EACA6lB,aAAchtB,EAAOyyC,EAAOtrC,GACpBnH,EAAMw0C,SACNx0C,EAAMw0C,QAAQxnC,WAAW7F,EAEjC,EACAgI,MAAOnP,EAAOyyC,EAAOtrC,GACbnH,EAAMw0C,SACNx0C,EAAMw0C,QAAQxnC,WAAW7F,EAEjC,EACAo1C,UAAWv8C,GACP,MAAMw0C,EAAUx0C,EAAMw0C,QACtB,GAAIA,GAAWA,EAAQuH,cAAe,CAClC,MAAM/kC,EAAO,CACTw9B,WAEJ,IAGO,IAHHx0C,EAAMgvB,cAAc,oBAAqB,IACtChY,EACHgmB,YAAY,IAEZ,OAEJwX,EAAQ7yC,KAAK3B,EAAMgM,KACnBhM,EAAMgvB,cAAc,mBAAoBhY,EAC5C,CACJ,EACA27B,WAAY3yC,EAAOgX,GACf,GAAIhX,EAAMw0C,QAAS,CACf,MAAMh6B,EAAmBxD,EAAK8xB,OAC1B9oC,EAAMw0C,QAAQtC,YAAYl7B,EAAKzU,MAAOiY,EAAkBxD,EAAKmyB,eAC7DnyB,EAAK8I,SAAU,EAEvB,CACJ,EACA+Z,SAAU,CACNzR,SAAS,EACTwxB,SAAU,KACVz/B,SAAU,UACVyc,gBAAiB,kBACjB0jB,WAAY,OACZ1I,UAAW,CACPz0B,OAAQ,QAEZo4B,aAAc,EACdC,kBAAmB,EACnB3qB,WAAY,OACZktB,UAAW,OACXrC,YAAa,EACbf,SAAU,CAAC,EACXsG,UAAW,OACXQ,YAAa,OACb7F,cAAe,EACfD,gBAAiB,EACjBf,WAAY,CACRz3B,OAAQ,QAEZq+B,YAAa,OACbt7B,QAAS,EACTm2B,aAAc,EACdD,UAAW,EACXO,aAAc,EACd/I,UAAW,CAAC5hC,EAAK1D,IAAOA,EAAKqsC,SAASzsC,KACtC2lC,SAAU,CAAC7hC,EAAK1D,IAAOA,EAAKqsC,SAASzsC,KACrC0yC,mBAAoB,OACpBnF,eAAe,EACfh3B,WAAY,EACZwrB,YAAa,gBACb5xB,YAAa,EACbpQ,UAAW,CACP1H,SAAU,IACVqE,OAAQ,gBAEZ4C,WAAY,CACRg1C,QAAS,CACLr8C,KAAM,SACN4G,WAAY,CACR,IACA,IACA,QACA,SACA,SACA,WAGRuxC,QAAS,CACL1zC,OAAQ,SACRrE,SAAU,MAGlBH,UAAWk3C,IAEfxd,cAAe,CACX6a,SAAU,OACVC,WAAY,OACZhD,UAAW,QAEflX,YAAa,CACT2R,YAActd,GAAgB,WAATA,GAA8B,aAATA,GAAgC,aAATA,EACjEud,YAAY,EACZlsC,UAAW,CACPisC,aAAa,EACbC,YAAY,GAEhBrkC,UAAW,CACPw0C,WAAW,GAEfj1C,WAAY,CACRi1C,UAAW,cAGnBrc,uBAAwB,CACpB,gBA2BR,SAASsc,GAAezrC,EAAQoD,EAAKvL,EAAO6zC,GACxC,MAAMn0B,EAAQvX,EAAO8J,QAAQ1G,GAC7B,IAAe,IAAXmU,EACA,MAfY,EAACvX,EAAQoD,EAAKvL,EAAO6zC,KAClB,iBAARtoC,GACPvL,EAAQmI,EAAOxO,KAAK4R,GAAO,EAC3BsoC,EAAYC,QAAQ,CAChB9zC,QACA+J,MAAOwB,KAEJ8E,MAAM9E,KACbvL,EAAQ,MAELA,GAKI+zC,CAAY5rC,EAAQoD,EAAKvL,EAAO6zC,GAG3C,OAAOn0B,IADMvX,EAAO6rC,YAAYzoC,GACRvL,EAAQ0f,CACpC,CAEA,SAASu0B,GAAkB/0C,GACvB,MAAMiJ,EAASzR,KAAK0R,YACpB,OAAIlJ,GAAS,GAAKA,EAAQiJ,EAAOzP,OACtByP,EAAOjJ,GAEXA,CACX,CACA,MAAMg1C,WAAsBhyB,GACxBlf,UAAY,WACfA,gBAAkB,CACXub,MAAO,CACH8H,SAAU4tB,KAGlBx9C,YAAY8E,GACRyT,MAAMzT,GACL7E,KAAKy9C,iBAAcn9C,EACpBN,KAAK09C,YAAc,EACnB19C,KAAK29C,aAAe,EACxB,CACA7wB,KAAK8R,GACD,MAAMgf,EAAQ59C,KAAK29C,aACnB,GAAIC,EAAM57C,OAAQ,CACd,MAAMyP,EAASzR,KAAK0R,YACpB,IAAK,MAAM,MAAEpI,EAAM,MAAE+J,KAAYuqC,EACzBnsC,EAAOnI,KAAW+J,GAClB5B,EAAO6F,OAAOhO,EAAO,GAG7BtJ,KAAK29C,aAAe,EACxB,CACArlC,MAAMwU,KAAK8R,EACf,CACA5tB,MAAM6D,EAAKvL,GACP,IAAI,OAAcuL,GACd,OAAO,KAEX,MAAMpD,EAASzR,KAAK0R,YAEpB,MAxCW,EAACpI,EAAO/F,IAAgB,OAAV+F,EAAiB,MAAO,OAAYlI,KAAK0oB,MAAMxgB,GAAQ,EAAG/F,GAwC5EinB,CADPlhB,EAAQu0C,SAASv0C,IAAUmI,EAAOnI,KAAWuL,EAAMvL,EAAQ4zC,GAAezrC,EAAQoD,GAAK,IAAArG,GAAelF,EAAOuL,GAAM7U,KAAK29C,cAC/FlsC,EAAOzP,OAAS,EAC7C,CACAisB,sBACI,MAAM,WAAEnb,EAAW,WAAEC,GAAgB/S,KAAKgT,gBAC1C,IAAI,IAAE3R,EAAI,IAAEkC,GAASvD,KAAKoS,WAAU,GACR,UAAxBpS,KAAK2H,QAAQm2C,SACRhrC,IACDzR,EAAM,GAEL0R,IACDxP,EAAMvD,KAAK0R,YAAY1P,OAAS,IAGxChC,KAAKqB,IAAMA,EACXrB,KAAKuD,IAAMA,CACf,CACA6qB,aACI,MAAM/sB,EAAMrB,KAAKqB,IACXkC,EAAMvD,KAAKuD,IACXykB,EAAShoB,KAAK2H,QAAQqgB,OACtBH,EAAQ,GACd,IAAIpW,EAASzR,KAAK0R,YAClBD,EAAiB,IAARpQ,GAAakC,IAAQkO,EAAOzP,OAAS,EAAIyP,EAASA,EAAO8zB,MAAMlkC,EAAKkC,EAAM,GACnFvD,KAAK09C,YAAct8C,KAAKmC,IAAIkO,EAAOzP,QAAUgmB,EAAS,EAAI,GAAI,GAC9DhoB,KAAKy9C,YAAcz9C,KAAKqB,KAAO2mB,EAAS,GAAM,GAC9C,IAAI,IAAIxf,EAAQnH,EAAKmH,GAASjF,EAAKiF,IAC/Bqf,EAAM5kB,KAAK,CACPuF,UAGR,OAAOqf,CACX,CACAvU,iBAAiB9K,GACb,OAAO+0C,GAAkB1jB,KAAK75B,KAAMwI,EACxC,CACH1B,YACOwR,MAAMxR,YACD9G,KAAKohB,iBACNphB,KAAKqa,gBAAkBra,KAAKqa,eAEpC,CACAb,iBAAiBhR,GAIb,MAHqB,iBAAVA,IACPA,EAAQxI,KAAKgR,MAAMxI,IAEN,OAAVA,EAAiB2J,IAAMnS,KAAKizB,oBAAoBzqB,EAAQxI,KAAKy9C,aAAez9C,KAAK09C,YAC5F,CACA7yB,gBAAgBvhB,GACZ,MAAMue,EAAQ7nB,KAAK6nB,MACnB,OAAIve,EAAQ,GAAKA,EAAQue,EAAM7lB,OAAS,EAC7B,KAEJhC,KAAKwZ,iBAAiBqO,EAAMve,GAAOd,MAC9C,CACAuqB,iBAAiBC,GACb,OAAO5xB,KAAK0oB,MAAM9pB,KAAKy9C,YAAcz9C,KAAKmzB,mBAAmBH,GAAShzB,KAAK09C,YAC/E,CACAhkC,eACI,OAAO1Z,KAAK4T,MAChB,EAmGJ,SAASmqC,GAAkBv1C,EAAOw1C,GAAY,WAAEv/B,EAAW,YAAEqR,IACzD,MAAMmuB,GAAM,IAAAzqC,GAAUsc,GAChBouB,GAASz/B,EAAard,KAAK+vB,IAAI8sB,GAAO78C,KAAK8vB,IAAI+sB,KAAS,KACxDj8C,EAAS,IAAOg8C,GAAc,GAAKx1C,GAAOxG,OAChD,OAAOZ,KAAKC,IAAI28C,EAAaE,EAAOl8C,EACxC,CACA,MAAMm8C,WAAwB3yB,GAC1BzrB,YAAY8E,GACRyT,MAAMzT,GACL7E,KAAKsB,WAAQhB,EACbN,KAAKgJ,SAAM1I,EACXN,KAAKy9C,iBAAcn9C,EACnBN,KAAKo+C,eAAY99C,EAClBN,KAAK09C,YAAc,CACvB,CACA1sC,MAAM6D,EAAKvL,GACP,OAAI,OAAcuL,KAGE,iBAARA,GAAoBA,aAAepC,UAAYorC,UAAUhpC,GAF1D,MAKHA,CACZ,CACAwpC,yBACI,MAAM,YAAE3wB,GAAiB1tB,KAAK2H,SACxB,WAAEmL,EAAW,WAAEC,GAAgB/S,KAAKgT,gBAC1C,IAAI,IAAE3R,EAAI,IAAEkC,GAASvD,KACrB,MAAMs+C,EAAU9vC,GAAInN,EAAMyR,EAAazR,EAAMmN,EACvC+vC,EAAU/vC,GAAIjL,EAAMwP,EAAaxP,EAAMiL,EAC7C,GAAIkf,EAAa,CACb,MAAM8wB,GAAU,IAAA10C,GAAKzI,GACfo9C,GAAU,IAAA30C,GAAKvG,GACjBi7C,EAAU,GAAKC,EAAU,EACzBF,EAAO,GACAC,EAAU,GAAKC,EAAU,GAChCH,EAAO,EAEf,CACA,GAAIj9C,IAAQkC,EAAK,CACb,IAAIykB,EAAiB,IAARzkB,EAAY,EAAInC,KAAKwY,IAAU,IAANrW,GACtCg7C,EAAOh7C,EAAMykB,GACR0F,GACD4wB,EAAOj9C,EAAM2mB,EAErB,CACAhoB,KAAKqB,IAAMA,EACXrB,KAAKuD,IAAMA,CACf,CACAm7C,eACI,MAAM52B,EAAW9nB,KAAK2H,QAAQkgB,MAC9B,IACI82B,GADA,cAAEl2B,EAAc,SAAEm2B,GAAc92B,EAepC,OAbI82B,GACAD,EAAWv9C,KAAKioB,KAAKrpB,KAAKuD,IAAMq7C,GAAYx9C,KAAKkE,MAAMtF,KAAKqB,IAAMu9C,GAAY,EAC1ED,EAAW,MACX7wC,QAAQC,KAAK,UAAU/N,KAAKsL,sBAAsBszC,mCAA0CD,8BAC5FA,EAAW,OAGfA,EAAW3+C,KAAK6+C,mBAChBp2B,EAAgBA,GAAiB,IAEjCA,IACAk2B,EAAWv9C,KAAKC,IAAIonB,EAAek2B,IAEhCA,CACX,CACHE,mBACO,OAAOpsC,OAAOC,iBAClB,CACA0b,aACI,MAAMtlB,EAAO9I,KAAK2H,QACZmgB,EAAWhf,EAAK+e,MACtB,IAAI82B,EAAW3+C,KAAK0+C,eACpBC,EAAWv9C,KAAKmC,IAAI,EAAGo7C,GACvB,MAcM92B,EA1Ld,SAAyBi3B,EAAmBC,GACxC,MAAMl3B,EAAQ,IAER,OAAEi2B,EAAO,KAAEhpB,EAAK,IAAEzzB,EAAI,IAAEkC,EAAI,UAAEy7C,EAAU,MAAE/tC,EAAM,SAAE0tC,EAAS,UAAEM,EAAU,cAAEC,GAAmBJ,EAC5FK,EAAOrqB,GAAQ,EACfsqB,EAAYT,EAAW,GACrBt9C,IAAKg+C,EAAO97C,IAAK+7C,GAAUP,EAC7BjsC,IAAc,OAAczR,GAC5B0R,IAAc,OAAcxP,GAC5Bg8C,IAAgB,OAActuC,GAC9B+sC,GAAcsB,EAAOD,IAASJ,EAAY,GAChD,IACI96C,EAAQq7C,EAASC,EAASC,EAD1Bv2B,GAAU,SAASm2B,EAAOD,GAAQD,EAAYD,GAAQA,EAE1D,GAAIh2B,EAXgB,QAWUrW,IAAeC,EACzC,MAAO,CACH,CACIvK,MAAO62C,GAEX,CACI72C,MAAO82C,IAInBI,EAAYt+C,KAAKioB,KAAKi2B,EAAOn2B,GAAW/nB,KAAKkE,MAAM+5C,EAAOl2B,GACtDu2B,EAAYN,IACZj2B,GAAU,QAAQu2B,EAAYv2B,EAAUi2B,EAAYD,GAAQA,IAE3D,OAAcH,KACf76C,EAAS/C,KAAK0a,IAAI,GAAIkjC,GACtB71B,EAAU/nB,KAAKioB,KAAKF,EAAUhlB,GAAUA,GAE7B,UAAX25C,GACA0B,EAAUp+C,KAAKkE,MAAM+5C,EAAOl2B,GAAWA,EACvCs2B,EAAUr+C,KAAKioB,KAAKi2B,EAAOn2B,GAAWA,IAEtCq2B,EAAUH,EACVI,EAAUH,GAEVxsC,GAAcC,GAAc+hB,IAAQ,SAAavxB,EAAMlC,GAAOyzB,EAAM3L,EAAU,MAC9Eu2B,EAAYt+C,KAAK0oB,MAAM1oB,KAAKC,KAAKkC,EAAMlC,GAAO8nB,EAASw1B,IACvDx1B,GAAW5lB,EAAMlC,GAAOq+C,EACxBF,EAAUn+C,EACVo+C,EAAUl8C,GACHg8C,GACPC,EAAU1sC,EAAazR,EAAMm+C,EAC7BC,EAAU1sC,EAAaxP,EAAMk8C,EAC7BC,EAAYzuC,EAAQ,EACpBkY,GAAWs2B,EAAUD,GAAWE,IAEhCA,GAAaD,EAAUD,GAAWr2B,EAE9Bu2B,GADA,QAAaA,EAAWt+C,KAAK0oB,MAAM41B,GAAYv2B,EAAU,KAC7C/nB,KAAK0oB,MAAM41B,GAEXt+C,KAAKioB,KAAKq2B,IAG9B,MAAMC,EAAgBv+C,KAAKmC,KAAI,QAAe4lB,IAAU,QAAeq2B,IACvEr7C,EAAS/C,KAAK0a,IAAI,IAAI,OAAckjC,GAAaW,EAAgBX,GACjEQ,EAAUp+C,KAAK0oB,MAAM01B,EAAUr7C,GAAUA,EACzCs7C,EAAUr+C,KAAK0oB,MAAM21B,EAAUt7C,GAAUA,EACzC,IAAI2W,EAAI,EAgBR,IAfIhI,IACIosC,GAAiBM,IAAYn+C,GAC7BwmB,EAAM5kB,KAAK,CACPuF,MAAOnH,IAEPm+C,EAAUn+C,GACVyZ,KAEA,QAAa1Z,KAAK0oB,OAAO01B,EAAU1kC,EAAIqO,GAAWhlB,GAAUA,EAAQ9C,EAAK08C,GAAkB18C,EAAK28C,EAAYc,KAC5GhkC,KAEG0kC,EAAUn+C,GACjByZ,KAGFA,EAAI4kC,IAAa5kC,EACnB+M,EAAM5kB,KAAK,CACPuF,MAAOpH,KAAK0oB,OAAO01B,EAAU1kC,EAAIqO,GAAWhlB,GAAUA,IAgB9D,OAbI4O,GAAcmsC,GAAiBO,IAAYl8C,EACvCskB,EAAM7lB,SAAU,QAAa6lB,EAAMA,EAAM7lB,OAAS,GAAGwG,MAAOjF,EAAKw6C,GAAkBx6C,EAAKy6C,EAAYc,IACpGj3B,EAAMA,EAAM7lB,OAAS,GAAGwG,MAAQjF,EAEhCskB,EAAM5kB,KAAK,CACPuF,MAAOjF,IAGPwP,GAAc0sC,IAAYl8C,GAClCskB,EAAM5kB,KAAK,CACPuF,MAAOi3C,IAGR53B,CACX,CA2FsB+3B,CAdkB,CAC5BjB,WACAb,OAAQh1C,EAAKg1C,OACbz8C,IAAKyH,EAAKzH,IACVkC,IAAKuF,EAAKvF,IACVy7C,UAAWl3B,EAASk3B,UACpBlqB,KAAMhN,EAAS82B,SACf3tC,MAAO6W,EAAS7W,MAChBguC,UAAWj/C,KAAKq5B,aAChB5a,WAAYze,KAAKohB,eACjB0O,YAAahI,EAASgI,aAAe,EACrCovB,eAA0C,IAA3Bp3B,EAASo3B,eAEVl/C,KAAKisB,QAAUjsB,MAajC,MAXoB,UAAhB8I,EAAKg1C,SACL,QAAmBj2B,EAAO7nB,KAAM,SAEhC8I,EAAKC,SACL8e,EAAM9e,UACN/I,KAAKsB,MAAQtB,KAAKuD,IAClBvD,KAAKgJ,IAAMhJ,KAAKqB,MAEhBrB,KAAKsB,MAAQtB,KAAKqB,IAClBrB,KAAKgJ,IAAMhJ,KAAKuD,KAEbskB,CACX,CACH/gB,YACO,MAAM+gB,EAAQ7nB,KAAK6nB,MACnB,IAAIvmB,EAAQtB,KAAKqB,IACb2H,EAAMhJ,KAAKuD,IAEf,GADA+U,MAAMxR,YACF9G,KAAK2H,QAAQqgB,QAAUH,EAAM7lB,OAAQ,CACrC,MAAMgmB,GAAUhf,EAAM1H,GAASF,KAAKmC,IAAIskB,EAAM7lB,OAAS,EAAG,GAAK,EAC/DV,GAAS0mB,EACThf,GAAOgf,CACX,CACAhoB,KAAKy9C,YAAcn8C,EACnBtB,KAAKo+C,UAAYp1C,EACjBhJ,KAAK09C,YAAc10C,EAAM1H,CAC7B,CACAgS,iBAAiB9K,GACb,OAAO,OAAaA,EAAOxI,KAAKQ,MAAMmH,QAAQk4C,OAAQ7/C,KAAK2H,QAAQkgB,MAAMi4B,OAC7E,EAGJ,MAAMC,WAAoB5B,GACtB7xC,UAAY,SACfA,gBAAkB,CACXub,MAAO,CACH8H,SAAU,0BAGlB1B,sBACI,MAAM,IAAE5sB,EAAI,IAAEkC,GAASvD,KAAKoS,WAAU,GACtCpS,KAAKqB,KAAM,OAAeA,GAAOA,EAAM,EACvCrB,KAAKuD,KAAM,OAAeA,GAAOA,EAAM,EACvCvD,KAAKq+C,wBACT,CACHQ,mBACO,MAAMpgC,EAAaze,KAAKohB,eAClBpf,EAASyc,EAAaze,KAAK0e,MAAQ1e,KAAK4e,OACxCkR,GAAc,IAAAtc,GAAUxT,KAAK2H,QAAQkgB,MAAMiI,aAC3CouB,GAASz/B,EAAard,KAAK+vB,IAAIrB,GAAe1uB,KAAK8vB,IAAIpB,KAAiB,KACxEqC,EAAWnyB,KAAKwyB,wBAAwB,GAC9C,OAAOpxB,KAAKioB,KAAKrnB,EAASZ,KAAKC,IAAI,GAAI8wB,EAAS/G,WAAa8yB,GACjE,CACA1kC,iBAAiBhR,GACb,OAAiB,OAAVA,EAAiB2J,IAAMnS,KAAKizB,oBAAoBzqB,EAAQxI,KAAKy9C,aAAez9C,KAAK09C,YAC5F,CACA3qB,iBAAiBC,GACb,OAAOhzB,KAAKy9C,YAAcz9C,KAAKmzB,mBAAmBH,GAAShzB,KAAK09C,WACpE,EAgEJ,MAAMsC,WAAyBx0B,GAC3Blf,UAAY,cACfA,gBAAkB,CACXub,MAAO,CACH8H,SAAU,4BACVhH,MAAO,CACHC,SAAS,KAIrB7oB,YAAY8E,GACRyT,MAAMzT,GACL7E,KAAKsB,WAAQhB,EACbN,KAAKgJ,SAAM1I,EACXN,KAAKy9C,iBAAcn9C,EACpBN,KAAK09C,YAAc,CACvB,CACA1sC,MAAM6D,EAAKvL,GACP,MAAMd,EAAQ21C,GAAgBhlB,UAAUnoB,MAAMyjC,MAAMz0C,KAAM,CACtD6U,EACAvL,IAEJ,GAAc,IAAVd,EAIJ,OAAO,OAAeA,IAAUA,EAAQ,EAAIA,EAAQ,KAHhDxI,KAAKigD,OAAQ,CAIrB,CACAhyB,sBACI,MAAM,IAAE5sB,EAAI,IAAEkC,GAASvD,KAAKoS,WAAU,GACtCpS,KAAKqB,KAAM,OAAeA,GAAOD,KAAKmC,IAAI,EAAGlC,GAAO,KACpDrB,KAAKuD,KAAM,OAAeA,GAAOnC,KAAKmC,IAAI,EAAGA,GAAO,KAChDvD,KAAK2H,QAAQ+lB,cACb1tB,KAAKigD,OAAQ,GAEbjgD,KAAKigD,OAASjgD,KAAKqB,MAAQrB,KAAKysB,iBAAkB,OAAezsB,KAAKusB,YACtEvsB,KAAKqB,IAAMA,IAAQ6+C,eAAelgD,KAAKqB,IAAK,GAAK6+C,eAAelgD,KAAKqB,KAAM,GAAK6+C,eAAelgD,KAAKqB,IAAK,IAE7GrB,KAAKq+C,wBACT,CACAA,yBACI,MAAM,WAAEvrC,EAAW,WAAEC,GAAgB/S,KAAKgT,gBAC1C,IAAI3R,EAAMrB,KAAKqB,IACXkC,EAAMvD,KAAKuD,IACf,MAAM+6C,EAAU9vC,GAAUsE,EAAazR,EAAMmN,EACvC+vC,EAAU/vC,GAAUuE,EAAaxP,EAAMiL,EACzCnN,IAAQkC,IACJlC,GAAO,GACPi9C,EAAO,GACPC,EAAO,MAEPD,EAAO4B,eAAe7+C,GAAM,IAC5Bk9C,EAAO2B,eAAe38C,EAAK,MAG/BlC,GAAO,GACPi9C,EAAO4B,eAAe38C,GAAM,IAE5BA,GAAO,GACPg7C,EAAO2B,eAAe7+C,EAAK,IAE/BrB,KAAKqB,IAAMA,EACXrB,KAAKuD,IAAMA,CACf,CACA6qB,aACI,MAAMtlB,EAAO9I,KAAK2H,QAKZkgB,EAAQs4B,cAJY,CACtB9+C,IAAKrB,KAAKusB,SACVhpB,IAAKvD,KAAKssB,UAEiCtsB,MAY/C,MAXoB,UAAhB8I,EAAKg1C,SACL,QAAmBj2B,EAAO7nB,KAAM,SAEhC8I,EAAKC,SACL8e,EAAM9e,UACN/I,KAAKsB,MAAQtB,KAAKuD,IAClBvD,KAAKgJ,IAAMhJ,KAAKqB,MAEhBrB,KAAKsB,MAAQtB,KAAKqB,IAClBrB,KAAKgJ,IAAMhJ,KAAKuD,KAEbskB,CACX,CACHvU,iBAAiB9K,GACV,YAAiBlI,IAAVkI,EAAsB,KAAM,OAAaA,EAAOxI,KAAKQ,MAAMmH,QAAQk4C,OAAQ7/C,KAAK2H,QAAQkgB,MAAMi4B,OACzG,CACHh5C,YACO,MAAMxF,EAAQtB,KAAKqB,IACnBiX,MAAMxR,YACN9G,KAAKy9C,aAAc,QAAMn8C,GACzBtB,KAAK09C,aAAc,QAAM19C,KAAKuD,MAAO,QAAMjC,EAC/C,CACAkY,iBAAiBhR,GAIb,YAHclI,IAAVkI,GAAiC,IAAVA,GACfxI,KAAKqB,IAEH,OAAVmH,GAAkBmR,MAAMnR,GACjB2J,IAEJnS,KAAKizB,mBAAmBzqB,IAAUxI,KAAKqB,IAAM,IAAK,QAAMmH,GAASxI,KAAKy9C,aAAez9C,KAAK09C,YACrG,CACA3qB,iBAAiBC,GACb,MAAME,EAAUlzB,KAAKmzB,mBAAmBH,GACxC,OAAO5xB,KAAK0a,IAAI,GAAI9b,KAAKy9C,YAAcvqB,EAAUlzB,KAAK09C,YAC1D,EAkNJ,MAAM0C,WAA0BjC,GAC5B7xC,UAAY,eACfA,gBAAkB,CACX4V,SAAS,EACTm+B,SAAS,EACT1lC,SAAU,YACV2lC,WAAY,CACRp+B,SAAS,EACT+S,UAAW,EACXE,WAAY,GACZE,iBAAkB,GAEtB5E,KAAM,CACF8vB,UAAU,GAEdlkC,WAAY,EACZwL,MAAO,CACHgP,mBAAmB,EACnBlH,SAAU,yBAEd6wB,YAAa,CACTxpB,mBAAe12B,EACfy2B,gBAAiB,EACjB7U,SAAS,EACTgJ,KAAM,CACFxiB,KAAM,IAEVinB,SAAUtc,GACN,OAAOA,CACX,EACAqN,QAAS,EACT+/B,mBAAmB,IAG3Bn0C,qBAAuB,CACnB,mBAAoB,cACpB,oBAAqB,QACrB,cAAe,SAEnBA,mBAAqB,CACjBg0C,WAAY,CACRrD,UAAW,SAGnBl9C,YAAY8E,GACRyT,MAAMzT,GACL7E,KAAK0gD,aAAUpgD,EACfN,KAAK2gD,aAAUrgD,EACfN,KAAK4gD,iBAActgD,EACnBN,KAAK6gD,aAAe,GACrB7gD,KAAK8gD,iBAAmB,EAC5B,CACAhzB,gBACI,MAAMpN,EAAU1gB,KAAKwzC,UAAW,OAAUuN,sBAAsB/gD,KAAK2H,SAAW,GAC1E8X,EAAIzf,KAAK0e,MAAQ1e,KAAK0rB,SAAWhL,EAAQhC,MACzCiB,EAAI3f,KAAK4e,OAAS5e,KAAK2rB,UAAYjL,EAAQ9B,OACjD5e,KAAK0gD,QAAUt/C,KAAKkE,MAAMtF,KAAK6T,KAAO4L,EAAI,EAAIiB,EAAQ7M,MACtD7T,KAAK2gD,QAAUv/C,KAAKkE,MAAMtF,KAAK0T,IAAMiM,EAAI,EAAIe,EAAQhN,KACrD1T,KAAK4gD,YAAcx/C,KAAKkE,MAAMlE,KAAKC,IAAIoe,EAAGE,GAAK,EACnD,CACAsO,sBACI,MAAM,IAAE5sB,EAAI,IAAEkC,GAASvD,KAAKoS,WAAU,GACtCpS,KAAKqB,KAAM,OAAeA,KAASsY,MAAMtY,GAAOA,EAAM,EACtDrB,KAAKuD,KAAM,OAAeA,KAASoW,MAAMpW,GAAOA,EAAM,EACtDvD,KAAKq+C,wBACT,CACHQ,mBACO,OAAOz9C,KAAKioB,KAAKrpB,KAAK4gD,YAAcG,sBAAsB/gD,KAAK2H,SACnE,CACA+nB,mBAAmB7H,GACfs2B,GAAgBhlB,UAAUzJ,mBAAmBmK,KAAK75B,KAAM6nB,GACxD7nB,KAAK6gD,aAAe7gD,KAAK0R,YAAYqzB,KAAI,CAACv8B,EAAOc,KAC7C,MAAM+J,GAAQ,OAASrT,KAAK2H,QAAQ64C,YAAY7wB,SAAU,CACtDnnB,EACAc,GACDtJ,MACH,OAAOqT,GAAmB,IAAVA,EAAcA,EAAQ,EAAE,IACzCxH,QAAO,CAAC2C,EAAGtM,IAAIlC,KAAKQ,MAAMwnC,kBAAkB9lC,IACnD,CACA4sB,MACI,MAAMhmB,EAAO9I,KAAK2H,QACdmB,EAAKoZ,SAAWpZ,EAAK03C,YAAYt+B,QACjC8+B,mBAAmBhhD,MAEnBA,KAAKihD,eAAe,EAAG,EAAG,EAAG,EAErC,CACAA,eAAeC,EAAcC,EAAeC,EAAaC,GACrDrhD,KAAK0gD,SAAWt/C,KAAKkE,OAAO47C,EAAeC,GAAiB,GAC5DnhD,KAAK2gD,SAAWv/C,KAAKkE,OAAO87C,EAAcC,GAAkB,GAC5DrhD,KAAK4gD,aAAex/C,KAAKC,IAAIrB,KAAK4gD,YAAc,EAAGx/C,KAAKmC,IAAI29C,EAAcC,EAAeC,EAAaC,GAC1G,CACAC,cAAch4C,GACV,MAAMi4C,EAAkB,EAAAC,GAAOxhD,KAAK6gD,aAAa7+C,QAAU,GACrDqa,EAAarc,KAAK2H,QAAQ0U,YAAc,EAC9C,OAAO,QAAgB/S,EAAQi4C,GAAkB,IAAA/tC,GAAU6I,GAC/D,CACAolC,8BAA8Bj5C,GAC1B,IAAI,OAAcA,GACd,OAAO2J,IAEX,MAAMuvC,EAAgB1hD,KAAK4gD,aAAe5gD,KAAKuD,IAAMvD,KAAKqB,KAC1D,OAAIrB,KAAK2H,QAAQoB,SACL/I,KAAKuD,IAAMiF,GAASk5C,GAExBl5C,EAAQxI,KAAKqB,KAAOqgD,CAChC,CACAC,8BAA8BxlC,GAC1B,IAAI,OAAcA,GACd,OAAOhK,IAEX,MAAMyvC,EAAiBzlC,GAAYnc,KAAK4gD,aAAe5gD,KAAKuD,IAAMvD,KAAKqB,MACvE,OAAOrB,KAAK2H,QAAQoB,QAAU/I,KAAKuD,IAAMq+C,EAAiB5hD,KAAKqB,IAAMugD,CACzE,CACAC,qBAAqBv4C,GACjB,MAAMk3C,EAAcxgD,KAAK6gD,cAAgB,GACzC,GAAIv3C,GAAS,GAAKA,EAAQk3C,EAAYx+C,OAAQ,CAC1C,MAAM8/C,EAAatB,EAAYl3C,GAC/B,OA7HZ,SAAiCqL,EAAQrL,EAAO+J,GAC5C,OAAO,OAAcsB,EAAQ,CACzBtB,QACA/J,QACA3I,KAAM,cAEd,CAuHmBohD,CAAwB/hD,KAAK8Q,aAAcxH,EAAOw4C,EAC7D,CACJ,CACAE,iBAAiB14C,EAAO24C,EAAoBC,EAAkB,GAC1D,MAAM1lC,EAAQxc,KAAKshD,cAAch4C,GAAS,EAAAwvB,EAAUopB,EACpD,MAAO,CACH9zC,EAAGhN,KAAK8vB,IAAI1U,GAASylC,EAAqBjiD,KAAK0gD,QAC/CryC,EAAGjN,KAAK+vB,IAAI3U,GAASylC,EAAqBjiD,KAAK2gD,QAC/CnkC,QAER,CACA2lC,yBAAyB74C,EAAOd,GAC5B,OAAOxI,KAAKgiD,iBAAiB14C,EAAOtJ,KAAKyhD,8BAA8Bj5C,GAC3E,CACA45C,gBAAgB94C,GACZ,OAAOtJ,KAAKmiD,yBAAyB74C,GAAS,EAAGtJ,KAAKozB,eAC1D,CACAivB,sBAAsB/4C,GAClB,MAAM,KAAEuK,EAAK,IAAEH,EAAI,MAAEC,EAAM,OAAEC,GAAY5T,KAAK8gD,iBAAiBx3C,GAC/D,MAAO,CACHuK,OACAH,MACAC,QACAC,SAER,CACHujB,iBACO,MAAM,gBAAEC,EAAkB3G,MAAM,SAAE8vB,IAAiBvgD,KAAK2H,QACxD,GAAIyvB,EAAiB,CACjB,MAAM5qB,EAAMxM,KAAKwM,IACjBA,EAAI6qB,OACJ7qB,EAAI0rB,YACJoqB,eAAetiD,KAAMA,KAAKyhD,8BAA8BzhD,KAAKo+C,WAAYmC,EAAUvgD,KAAK6gD,aAAa7+C,QACrGwK,EAAI8/B,YACJ9/B,EAAI8qB,UAAYF,EAChB5qB,EAAIoB,OACJpB,EAAIgrB,SACR,CACJ,CACHG,WACO,MAAMnrB,EAAMxM,KAAKwM,IACX1D,EAAO9I,KAAK2H,SACZ,WAAE24C,EAAW,KAAE7vB,EAAK,OAAE5W,GAAY/Q,EAClCmvC,EAAaj4C,KAAK6gD,aAAa7+C,OACrC,IAAIE,EAAG8lB,EAAQrN,EAef,GAdI7R,EAAK03C,YAAYt+B,SA7O7B,SAAyBtZ,EAAOqvC,GAC5B,MAAM,IAAEzrC,EAAM7E,SAAS,YAAE64C,IAAoB53C,EAC7C,IAAI,IAAI1G,EAAI+1C,EAAa,EAAG/1C,GAAK,EAAGA,IAAI,CACpC,MAAM6yB,EAAcyrB,EAAYzzB,WAAWnkB,EAAMi5C,qBAAqB3/C,IAChEqgD,GAAS,QAAOxtB,EAAY7J,OAC5B,EAAE9c,EAAE,EAAEC,EAAE,UAAEynB,EAAU,KAAEjiB,EAAK,IAAEH,EAAI,MAAEC,EAAM,OAAEC,GAAYhL,EAAMk4C,iBAAiB5+C,IAC9E,cAAE80B,GAAmBjC,EAC3B,KAAK,OAAciC,GAAgB,CAC/B,MAAM+a,GAAe,QAAchd,EAAYgd,cACzCrxB,GAAU,OAAUqU,EAAYgC,iBACtCvqB,EAAI8qB,UAAYN,EAChB,MAAMwrB,EAAe3uC,EAAO6M,EAAQ7M,KAC9B4uC,EAAc/uC,EAAMgN,EAAQhN,IAC5BgvC,EAAgB/uC,EAAQE,EAAO6M,EAAQhC,MACvCikC,EAAiB/uC,EAASF,EAAMgN,EAAQ9B,OAC1C5X,OAAOS,OAAOsqC,GAAc3T,MAAM5vB,GAAU,IAANA,KACtChC,EAAI0rB,aACJ,QAAmB1rB,EAAK,CACpB4B,EAAGo0C,EACHn0C,EAAGo0C,EACHhjC,EAAGijC,EACH/iC,EAAGgjC,EACHnV,OAAQuE,IAEZvlC,EAAIoB,QAEJpB,EAAI+qB,SAASirB,EAAcC,EAAaC,EAAeC,EAE/D,EACA,OAAWn2C,EAAK5D,EAAMi4C,aAAa3+C,GAAIkM,EAAGC,EAAIk0C,EAAOn3B,WAAa,EAAGm3B,EAAQ,CACzEn+C,MAAO2wB,EAAY3wB,MACnB0xB,UAAWA,EACXG,aAAc,UAEtB,CACJ,CA2MY2sB,CAAgB5iD,KAAMi4C,GAEtBxnB,EAAKvO,SACLliB,KAAK6nB,MAAM7mB,SAAQ,CAACsB,EAAMgH,KACtB,GAAc,IAAVA,EAAa,CACJtJ,KAAKyhD,8BAA8Bn/C,EAAKkG,OACjD,MAAMkM,EAAU1U,KAAK8Q,WAAWxH,GAC1ByrB,EAActE,EAAK1D,WAAWrY,GAC9BsgB,EAAoBnb,EAAOkT,WAAWrY,IArMhE,SAAwB9L,EAAOi6C,EAAcrV,EAAQyK,EAAYrkB,GAC7D,MAAMpnB,EAAM5D,EAAM4D,IACZ+zC,EAAWsC,EAAatC,UACxB,MAAEn8C,EAAM,UAAE6wB,GAAe4tB,GAC1BtC,IAAatI,IAAe7zC,IAAU6wB,GAAauY,EAAS,IAGjEhhC,EAAI6qB,OACJ7qB,EAAIurB,YAAc3zB,EAClBoI,EAAIyoB,UAAYA,EAChBzoB,EAAIwrB,YAAYpE,EAAWwB,MAC3B5oB,EAAIyrB,eAAiBrE,EAAW0B,WAChC9oB,EAAI0rB,YACJoqB,eAAe15C,EAAO4kC,EAAQ+S,EAAUtI,GACxCzrC,EAAI8/B,YACJ9/B,EAAI6rB,SACJ7rB,EAAIgrB,UACR,CAqLoBsrB,CAAe9iD,KAAM+0B,EAAa/M,EAAQiwB,EAAYjjB,EAC1D,KAGJsrB,EAAWp+B,QAAS,CAEpB,IADA1V,EAAI6qB,OACI4gB,EAAa,EAAG/1C,GAAK,EAAGA,IAAI,CAChC,MAAM6yB,EAAcurB,EAAWvzB,WAAW/sB,KAAK6hD,qBAAqB3/C,KAC9D,MAAEkC,EAAM,UAAE6wB,GAAeF,EAC1BE,GAAc7wB,IAGnBoI,EAAIyoB,UAAYA,EAChBzoB,EAAIurB,YAAc3zB,EAClBoI,EAAIwrB,YAAYjD,EAAYI,YAC5B3oB,EAAIyrB,eAAiBlD,EAAYM,iBACxBr1B,KAAKyhD,8BAA8B34C,EAAK+e,MAAM9e,QAAU/I,KAAKqB,IAAMrB,KAAKuD,KACtEvD,KAAKgiD,iBAAiB9/C,EAAG8lB,GACpCxb,EAAI0rB,YACJ1rB,EAAI2rB,OAAOn4B,KAAK0gD,QAAS1gD,KAAK2gD,SAC9Bn0C,EAAI4rB,OAAOzd,EAASvM,EAAGuM,EAAStM,GAChC7B,EAAI6rB,SACR,CACA7rB,EAAIgrB,SACR,CACJ,CACHe,aAAc,CACdE,aACO,MAAMjsB,EAAMxM,KAAKwM,IACX1D,EAAO9I,KAAK2H,QACZmgB,EAAWhf,EAAK+e,MACtB,IAAKC,EAAS5F,QACV,OAEJ,MAAM7F,EAAarc,KAAKshD,cAAc,GACtC,IAAIt5B,EAAQtJ,EACZlS,EAAI6qB,OACJ7qB,EAAIu2C,UAAU/iD,KAAK0gD,QAAS1gD,KAAK2gD,SACjCn0C,EAAIw2C,OAAO3mC,GACX7P,EAAIspB,UAAY,SAChBtpB,EAAIypB,aAAe,SACnBj2B,KAAK6nB,MAAM7mB,SAAQ,CAACsB,EAAMgH,KACtB,GAAc,IAAVA,IAAgBR,EAAKC,QACrB,OAEJ,MAAMgsB,EAAcjN,EAASiF,WAAW/sB,KAAK8Q,WAAWxH,IAClD6oB,GAAW,QAAO4C,EAAY7J,MAEpC,GADSlrB,KAAKyhD,8BAA8BzhD,KAAK6nB,MAAMve,GAAOd,OAC1DusB,EAAY8B,kBAAmB,CAC/BrqB,EAAI0e,KAAOiH,EAASM,OACZjmB,EAAIojC,YAAYttC,EAAK+Q,OAAOqL,MACpClS,EAAI8qB,UAAYvC,EAAYiC,cAC5B,MAAMtW,GAAU,OAAUqU,EAAYgC,iBACtCvqB,EAAI+qB,UAAU7Y,EAAQ,EAAIgC,EAAQ7M,MAAOmU,EAASmK,EAASzpB,KAAO,EAAIgY,EAAQhN,IAAKgL,EAAQgC,EAAQhC,MAAOyT,EAASzpB,KAAOgY,EAAQ9B,OACtI,EACA,OAAWpS,EAAKlK,EAAK+Q,MAAO,GAAI2U,EAAQmK,EAAU,CAC9C/tB,MAAO2wB,EAAY3wB,OACrB,IAENoI,EAAIgrB,SACR,CACHmB,YAAa","sources":["webpack://gatsby-starter-default/./node_modules/chart.js/dist/chart.js"],"sourcesContent":["/*!\n * Chart.js v4.2.0\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nexport { aL as Ticks, d as defaults } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data) {\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            x: key,\n            y: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            this._data = convertObjectDataToArray(data);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const skipNull = (meta)=>{\n            const parsed = meta.controller.getParsed(dataIndex);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing'\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPolarAreaController: PolarAreaController,\nPieController: PieController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height1 = chartArea.h * weight;\n            const width1 = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width1, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width1, height1);\n            }\n            stack.start = x;\n            stack.placed += height1;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n    chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    active = false;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n    let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID1 = Object.keys(position)[0];\n            const value1 = position[positionAxisID1];\n            titleX = scales[positionAxisID1].getPixelForValue(value1) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = this.ticks.length;\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; ++i){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel = label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID1 = Object.keys(position)[0];\n                const value1 = position[positionAxisID1];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID1].getPixelForValue(value1));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret1 = this._getYAxisLabelAlignment(tl);\n            textAlign = ret1.textAlign;\n            x = ret1.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID1 = Object.keys(position)[0];\n                const value1 = position[positionAxisID1];\n                x = this.chart.scales[positionAxisID1].getPixelForValue(value1);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i1 = 0; i1 < local.length; i1++){\n        const plugin = local[i1];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, scaleOptions) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n    id = scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.length > 1 && determineAxis(id[0].toLowerCase(), scaleOptions);\n    if (id) {\n        return id;\n    }\n    throw new Error(`Cannot determine type of '${name}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).reduce((acc, key)=>acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.2.0\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getDatasetArea(meta) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: xScale.left,\n            right: xScale.right,\n            top: yScale.top,\n            bottom: yScale.bottom\n        };\n    }\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i1 = 0, ilen1 = this.data.datasets.length; i1 < ilen1; ++i1){\n            this._updateDataset(i1, isFunction(mode) ? mode({\n                datasetIndex: i1\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resize(width, height);\n            this._resizeBeforeDraw = null;\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta) || this.chartArea;\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter1 = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter1.x, pCenter1.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter2 = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter2.x, pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter3 = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter3.x, pCenter3.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = this.options.spacing / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nLineElement: LineElement,\nPointElement: PointElement,\nBarElement: BarElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox1 of hitboxes){\n                if (hitbox1.col !== col) {\n                    col = hitbox1.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox1.top = top;\n                hitbox1.left += this.left + padding;\n                hitbox1.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox1.left), hitbox1.width);\n                top += hitbox1.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight);\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length + 0.5 : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let x = 0;\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                x += pos.x;\n                y += pos.y;\n                ++count;\n            }\n        }\n        return {\n            x: x / count,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColors = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColors.borderColor;\n            ctx.fillStyle = labelColors.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColors.borderWidth) ? Math.max(...Object.values(labelColors.borderWidth)) : labelColors.borderWidth || 1;\n            ctx.strokeStyle = labelColors.borderColor;\n            ctx.setLineDash(labelColors.borderDash || []);\n            ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n            const borderRadius = toTRBLCorners(labelColors.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColors.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColors.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        ticks.push({\n            value: Math.round((niceMin + j * spacing) * factor) / factor\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const extra = getTickBackdropHeight(opts) / 2;\n    const outerDistance = scale.drawingArea;\n    const additionalAngle = opts.pointLabels.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i], additionalAngle);\n        const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n        const size = labelSizes[i];\n        const y = yForAngle(pointLabelPosition.y, size.h, angle);\n        const textAlign = getTextAlignForAngle(angle);\n        const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n        items.push({\n            x: pointLabelPosition.x,\n            y,\n            textAlign,\n            left,\n            top: y,\n            right: left + size.w,\n            bottom: y + size.h\n        });\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign , left , top , right , bottom  } = scale._pointLabelItems[i];\n        const { backdropColor  } = optsAtIndex;\n        if (!isNullOrUndef(backdropColor)) {\n            const borderRadius = toTRBLCorners(optsAtIndex.borderRadius);\n            const padding = toPadding(optsAtIndex.backdropPadding);\n            ctx.fillStyle = backdropColor;\n            const backdropLeft = left - padding.left;\n            const backdropTop = top - padding.top;\n            const backdropWidth = right - left + padding.width;\n            const backdropHeight = bottom - top + padding.height;\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: backdropLeft,\n                    y: backdropTop,\n                    w: backdropWidth,\n                    h: backdropHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n            }\n        }\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort((a, b)=>a - b).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n"],"names":["Animator","constructor","this","_request","_charts","Map","_running","_lastDate","undefined","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","r","window","_update","Date","now","remaining","running","items","length","item","i","draw","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","color","c0","c","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","_fn","_easing","e","easing","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","Object","keys","d","animatedProps","getOwnPropertyNames","key","option","properties","_animateOptions","values","newOptions","options","$shared","assign","$animations","resolveTargetOptions","animations","_createAnimations","anim","all","awaitAll","then","props","charAt","value","animation","size","scaleClip","scale","allowedOverflow","opts","reverse","end","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","s","isStacked","meta","stacked","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","indexScale","valueScale","id","getStackKey","_top","_bottom","_visualValues","getFirstScaleId","scales","filter","shift","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","DatasetController","static","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","_stacked","addElements","fill","isPluginEnabled","console","warn","updateIndex","dataset","getDataset","chooseId","x","y","xid","xAxisID","v","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","xScale","getScaleForId","yScale","rScale","data","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","u","_dataCheck","adata","Array","convertObjectDataToArray","isExtensible","l","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","canStack","otherScale","hidden","createStack","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","otherMin","otherMax","minDefined","maxDefined","getUserBounds","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","t","b","top","right","bottom","left","disabled","toClip","clip","defaultClip","elements","area","chartArea","drawActiveElementsOnTop","element","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","parent","dataIndex","raw","createDataContext","createDatasetContext","_resolveElementOptions","elementType","cache","cacheKey","sharing","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","LineController","showLine","spanGaps","_index_","_value_","super","line","points","_dataset","animationsDisabled","_datasetIndex","_decimated","borderWidth","segment","animated","maxGapLength","directUpdate","pointsCount","prevParsed","point","skip","nullData","iPixel","getPixelForValue","vPixel","getBasePixel","isNaN","abs","border","firstPoint","lastPoint","updateControlPoints","binarySearch","metaset","intersect","lookupMethod","_reversePixels","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","j","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","inRange","getNearestCartesianItems","distanceMetric","useX","indexOf","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getDistanceMetricForAxis","minDistance","center","getCenterPoint","distance","getNearestItems","startAngle","endAngle","getProps","angle","getNearestRadialItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","sort","a","v0","v1","weight","setLayoutDims","layouts","params","wrap","stackWeight","includes","_stack","placed","buildStacks","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","horizontal","width","availableWidth","height","availableHeight","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","getMargins","marginForPositions","positions","margin","fitBoxes","boxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","padding","height1","width1","addBox","_layers","z","removeBox","layoutItem","minPadding","layoutBoxes","isHorizontal","wrapBoxes","centerHorizontal","centerVertical","leftAndTop","concat","rightAndBottom","vertical","buildLayoutBoxes","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","total","display","updatePos","change","handleMaxPadding","BasePlatform","acquireContext","canvas","aspectRatio","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","eventListenerOptions","passive","removeListener","nodeListContains","nodeList","node","contains","createAttachObserver","observer","MutationObserver","entries","trigger","entry","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","createResizeObserver","container","clientWidth","ResizeObserver","contentRect","listenDevicePixelRatioChanges","releaseObserver","disconnect","unlistenDevicePixelRatioChanges","createProxyAndListen","proxy","native","fromNativeEvent","addListener","DomPlatform","style","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","displayHeight","initCanvas","removeAttribute","setAttribute","proxies","$proxies","attach","detach","isConnected","Element","tooltipPosition","hasValue","final","ret","autoSkip","ticks","tickOpts","determinedMaxTicks","offset","tickLength","_tickSize","maxScale","_length","maxChart","_maxLength","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","result","getMajorIndices","numMajorIndices","first","last","newTicks","spacing","next","ceil","skipMajors","evenMajorSpacing","len","diff","getEvenSpacing","factors","calculateSpacing","avgMajorSpacing","round","majorStart","majorEnd","offsetFromEdge","edge","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","_startPixel","_endPixel","epsilon","lineValue","getPixelForTick","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","text","lineHeight","titleAlign","align","reverseAlign","Scale","_margins","maxWidth","maxHeight","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_cache","_dataLimitsCached","init","setContext","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","margins","beginAtZero","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","startPixel","endPixel","reversePixels","_alignToPixels","alignToPixels","_callHooks","name","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","callback","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","grid","title","asin","minSize","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","cos","sin","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","caches","widths","heights","jlen","tickFont","fontString","nestedLabel","widestLabelSize","highestLabelSize","_resolveTickFontOptions","string","gc","gcLen","garbageCollect","valueAt","idx","getValueForPixel","pixel","getPixelForDecimal","decimal","getDecimalForPixel","getBaseValue","createTickContext","optionTicks","rot","autoSkipPadding","_computeGridLineItems","ticksLength","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","positionAxisID","positionAxisID1","value1","limit","step","optsAtIndex","optsAtIndexBorder","lineWidth","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","rotation","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","ret1","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","backdrop","tickTextAlign","showLabelBackdrop","labelPadding","backdropPadding","backdropColor","translation","_computeLabelArea","drawBackground","backgroundColor","save","fillStyle","fillRect","restore","getLineWidthForValue","findIndex","drawGrid","drawLine","p1","p2","strokeStyle","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","titleX","titleY","H","titleArgs","tz","gz","bz","prototype","axisID","_maxDigits","fontSize","TypedRegistry","scope","override","create","isForType","isPrototypeOf","call","register","proto","getPrototypeOf","parentScope","isIChartComponent","Error","itemDefaults","defaults","defaultRoutes","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","routeDefaults","descriptors","registerDefaults","overrides","unregister","Registry","controllers","plugins","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","_descriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","localIds","local","i1","allPlugins","getOpts","pluginOpts","createDescriptors","previousDescriptors","some","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","determineAxis","scaleOptions","toLowerCase","initOptions","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","getDefaultScaleIDFromAxis","defaultScaleOptions","defaultID","getAxisFromDefaultScaleID","mergeScaleConfig","initData","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","obj","Config","_config","initConfig","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","resolver","subPrefixes","getResolver","isScriptable","isIndexable","hasFunction","needContext","subResolver","descriptorDefaults","resolverCache","p","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","Chart","invalidatePlugins","userConfig","initialCanvas","existingChart","OffscreenCanvas","_detectPlatform","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","resizeDelay","_initialize","maintainAspectRatio","responsive","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","scaleOpts","updated","map","isRadial","dposition","dtype","scaleType","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","visible","isDatasetVisible","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","events","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","ilen1","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getDatasetArea","getElementsAtEventForMode","getVisibleDatasetCount","setDatasetVisibility","toggleDataVisibility","getDataVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","offsetX","offsetY","_remove","detached","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","hover","deactivated","activated","inChartArea","eventFilter","_handleEvent","_getActiveElements","isClick","lastEvent","determineLastEvent","onHover","onClick","setStyle","lineCap","borderCapStyle","lineJoin","borderJoinStyle","borderColor","previous","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","stepped","tension","cubicInterpolationMode","getLineMethod","fastPathSegment","prevX","minY","maxY","lastY","avgX","countX","pointIndex","drawX","truncX","_getSegmentMethod","usePath2D","Path2D","path","_path","closePath","strokePathWithCache","segments","segmentMethod","strokePathDirect","LineElement","capBezierPoints","_scriptable","_indexable","_fullLoop","_points","_segments","_pointsUpdated","interpolate","_interpolate","_getInterpolationMethod","interpolated","inRange$1","radius","hitRadius","PointElement","hoverBorderWidth","hoverRadius","pointStyle","mouseX","mouseY","inXRange","inYRange","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","generateLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","legendItem","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","legendItemText","calculateItemWidth","fontLineHeight","calculateLegendItemHeight","calculateItemHeight","calculateItemSize","adjustHitBoxes","rtl","rtlHelper","hitbox","leftForLtr","hitbox1","_draw","defaultColor","halfFontSize","cursor","textDirection","fontColor","textWidth","setWidth","lineDash","drawOptions","SQRT2","centerX","xPlus","centerY","yBoxTop","xBoxLeft","borderRadius","rect","drawLegendBox","strikethrough","fillText","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","onLeave","isListened","hoveredItem","sameItem","plugin_legend","_element","_args","legend","afterEvent","ci","useBorderRadius","startsWith","Title","_padding","textSize","_drawArgs","P","fontOpts","plugin_title","titleBlock","createTitle","WeakMap","positioners","average","eventPosition","nearestElement","tp","pushOrConcat","base","toPush","apply","splitNewlines","str","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","lines","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineXAlign","yAlign","chartWidth","xAlign","caret","caretSize","caretPadding","doesNotFitWithAlign","determineAlignment","determineYAlign","getBackgroundPoint","alignment","cornerRadius","paddingAndSize","topLeft","topRight","bottomLeft","bottomRight","alignX","alignY","getAlignedX","getBeforeAfterBodyLines","overrideCallbacks","defaultCallbacks","beforeTitle","tooltipItems","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","bodyLineHeight","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","numbers","_fallback","findOrAddLabel","addedLabels","unshift","addIfString","lastIndexOf","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","isFinite","bounds","relativeLabelSize","minSpacing","rad","ratio","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","maxTicks","stepSize","computeTickLimit","generationOptions","dataRange","precision","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","niceMin","niceMax","numSpaces","decimalPlaces","generateTicks$1","locale","format","LinearScale","LogarithmicScale","_zero","changeExponent","generateTicks","RadialLinearScale","animate","angleLines","circular","pointLabels","centerPointLabels","xCenter","yCenter","drawingArea","_pointLabels","_pointLabelItems","getTickBackdropHeight","fitWithPointLabels","setCenterPoint","leftMovement","rightMovement","topMovement","bottomMovement","getIndexAngle","angleMultiplier","T","getDistanceFromCenterForValue","scalingFactor","getValueForDistanceFromCenter","scaledDistance","getPointLabelContext","pointLabel","createPointLabelContext","getPointPosition","distanceFromCenter","additionalAngle","getPointPositionForValue","getBasePosition","getPointLabelPosition","pathRadiusLine","plFont","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","gridLineOpts","drawRadiusLine","translate","rotate"],"sourceRoot":""}